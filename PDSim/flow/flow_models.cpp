/* Generated by Cython 0.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__PDSim__flow__flow_models
#define __PYX_HAVE_API__PDSim__flow__flow_models
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include "DataStructures.h"
#include "PhaseEnvelope.h"
#include "AbstractState.h"
#include <utility>
#include <map>
#include "pythread.h"
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "PDSim\\flow\\flow_models.pyx",
  "PDSim\\flow\\flow_models.pxd",
  "PDSim\\misc\\datatypes.pxd",
  "__init__.pxd",
  "type.pxd",
  "AbstractState.pxd",
  "CoolProp.pxd",
  "bool.pxd",
  "complex.pxd",
  "PDSim\\flow\\flow.pxd",
};

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":726
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":727
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":728
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":729
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":733
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":734
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":735
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":736
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":740
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":741
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":750
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":751
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":752
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":754
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":755
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":756
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":758
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":759
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":761
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":762
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":763
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "typedefs.pxd":1
 * ctypedef double CoolPropDbl             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_8CoolProp_8typedefs_CoolPropDbl;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData;
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure;
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState;
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState;
struct __pyx_obj_8CoolProp_8CoolProp_State;
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue;
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector;
struct __pyx_obj_5PDSim_4misc_9datatypes_listm;
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath;
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction;
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":765
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":766
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":767
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":769
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance;
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat;

/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":69
 * 
 *     ## Tangent plane distance
 *     cpdef double tangent_plane_distance(self, double T, double p, vector[double] w, double rhomolar_guess=*) except *             # <<<<<<<<<<<<<<
 * 
 *     ## ----------------------------------------
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance {
  int __pyx_n;
  double rhomolar_guess;
};

/* "CoolProp.pxd":40
 *     cpdef double get_dpdT(self) except *
 *     cpdef double get_speed_sound(self) except *
 *     cpdef get_Tsat(self, double Q = *)             # <<<<<<<<<<<<<<
 *     cpdef get_subcooling(self)
 *     cpdef get_superheat(self)
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat {
  int __pyx_n;
  double Q;
};
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v;

/* "PDSim\misc\datatypes.pxd":15
 *     """ The list that contains the values """
 * 
 *     cpdef v(self, int ndmin = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class listm(list):
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v {
  int __pyx_n;
  int ndmin;
};
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__;

/* "PDSim\flow\flow.pxd":94
 *     """ The downstream state """
 * 
 *     cpdef dict __cdict__(self, AddStates = *)             # <<<<<<<<<<<<<<
 *     cpdef FlowPath get_deepcopy(self)
 *     cpdef calculate(self)
 */
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ {
  int __pyx_n;
  PyObject *AddStates;
};
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle;
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle;
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsothermalWallTube;

/* "PDSim\flow\flow_models.pxd":19
 * from libc.math cimport exp, log, M_PI as pi, M_E as e, sqrt
 * 
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class FlowFunction(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle {
  int __pyx_n;
  int other_output;
};

/* "PDSim\flow\flow_models.pxd":36
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class ValveModel(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle {
  int __pyx_n;
  double t;
  double ro;
};

/* "PDSim\flow\flow_models.pyx":13
 * """
 * 
 * cdef public enum:             # <<<<<<<<<<<<<<
 *     TYPE_RADIAL
 *     TYPE_FLANK
 */
enum  {
  TYPE_RADIAL,
  TYPE_FLANK,
  TYPE_DISABLED
};

/* "PDSim\flow\flow_models.pyx":18
 *     TYPE_DISABLED
 * 
 * cdef public enum:             # <<<<<<<<<<<<<<
 *     OUTPUT_VELOCITY
 *     OUTPUT_MA
 */
enum  {
  OUTPUT_VELOCITY,
  OUTPUT_MA
};

/* "PDSim\flow\flow_models.pyx":161
 *     return x**y
 * 
 * cpdef IsothermalWallTube(mdot,State1,State2,fixed,L,ID,OD=None,HTModel='Twall',Tmean=None,T_wall=None,Q_add = 0.0,alpha=None):             # <<<<<<<<<<<<<<
 *     """
 *     In this tube model, one of the nodes is known (fixed), but the other is calculated based on heat transfer and pressure drop for a given mass flow rate
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsothermalWallTube {
  int __pyx_n;
  PyObject *OD;
  PyObject *HTModel;
  PyObject *Tmean;
  PyObject *T_wall;
  PyObject *Q_add;
  PyObject *alpha;
};

/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":14
 *     size_t
 * 
 * cdef class PyPhaseEnvelopeData:             # <<<<<<<<<<<<<<
 *     cpdef public bool TypeI
 *     cpdef public size_t iTsat_max, ipsat_max, icrit
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData {
  PyObject_HEAD
  bool TypeI;
  size_t iTsat_max;
  size_t ipsat_max;
  size_t icrit;
  PyObject *T;
  PyObject *p;
  PyObject *lnT;
  PyObject *lnp;
  PyObject *rhomolar_liq;
  PyObject *rhomolar_vap;
  PyObject *lnrhomolar_liq;
  PyObject *lnrhomolar_vap;
  PyObject *hmolar_liq;
  PyObject *hmolar_vap;
  PyObject *smolar_liq;
  PyObject *smolar_vap;
  PyObject *Q;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":19
 *     cpdef public list T, p, lnT, lnp, rhomolar_liq, rhomolar_vap, lnrhomolar_liq, lnrhomolar_vap, hmolar_liq, hmolar_vap, smolar_liq, smolar_vap, Q
 * 
 * cdef class PyGuessesStructure:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public double rhomolar_liq, rhomolar_vap
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  double rhomolar_liq;
  double rhomolar_vap;
  PyObject *x;
  PyObject *y;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":24
 *     cpdef public list x, y
 * 
 * cdef class PyCriticalState:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public bool stable
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  bool stable;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":28
 *     cpdef public bool stable
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtab;
  CoolProp::AbstractState *thisptr;
};


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */
struct __pyx_obj_8CoolProp_8CoolProp_State {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtab;
  struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *pAS;
  PyObject *Fluid;
  PyObject *phase;
  int iFluid;
  int iParam1;
  int iParam2;
  int iOutput;
  double T_;
  double rho_;
  double p_;
};


/* "PDSim\misc\datatypes.pxd":6
 * from cpython cimport bool
 * 
 * cdef class AnnotatedValue(object):             # <<<<<<<<<<<<<<
 *     cdef public object value
 *     cdef public str annotation, units, key
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue {
  PyObject_HEAD
  PyObject *value;
  PyObject *annotation;
  PyObject *units;
  PyObject *key;
};


/* "PDSim\misc\datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtab;
  PyObject *vec;
};


/* "PDSim\misc\datatypes.pxd":17
 *     cpdef v(self, int ndmin = *)
 * 
 * cdef class listm(list):             # <<<<<<<<<<<<<<
 *     """
 *     See http://docs.cython.org/src/userguide/special_methods.html
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_listm {
  PyListObject __pyx_base;
};


/* "PDSim\misc\datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtab;
  double *data;
  int N;
};


/* "PDSim\flow\flow.pxd":17
 * from PDSim.misc.datatypes cimport arraym
 * 
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection {
  PyListObject __pyx_base;
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtab;
  int N;
  int Nexists;
  double omega;
  PyObject *flow_paths;
};


/* "PDSim\flow\flow.pxd":34
 * 
 * #Make a stripped down class with the necessary terms included
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef public bytes key_up
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtab;
  PyObject *key_up;
  PyObject *key_down;
  PyObject *key1;
  PyObject *key2;
  int exists;
  int key1_exists;
  int key2_exists;
  int key_up_exists;
  int key_down_exists;
  long key1Index;
  long key2Index;
  long key_up_Index;
  long key_down_Index;
  int ikey1;
  int ikey2;
  int ikey_up;
  int ikey_down;
  double mdot;
  double h_up;
  double h_down;
  double T_up;
  double p_up;
  double p_down;
  double A;
  double edot;
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *MdotFcn;
  PyObject *MdotFcn_str;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State1;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State2;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
};


/* "PDSim\flow\flow_models.pxd":21
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtab;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *flows;
  int Nflows;
};


/* "PDSim\flow\flow_models.pxd":27
 *     cpdef public int Nflows
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cdef dict kwargs
 *     cdef public object Function
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
  PyObject *kwargs;
  PyObject *Function;
};


/* "PDSim\flow\flow_models.pxd":33
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 * 
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};


/* "PDSim\flow\flow_models.pxd":38
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     cdef public double E,A_port,A_valve,d_valve,l_valve,a_valve,h_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public bytes key_up, key_down
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtab;
  double E;
  double A_port;
  double A_valve;
  double d_valve;
  double l_valve;
  double a_valve;
  double h_valve;
  double rho_valve;
  double d_port;
  double m_eff;
  double C_D;
  double k_valve;
  double x_stopper;
  PyObject *key_up;
  PyObject *key_down;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *xv;
  double x_tr;
};



/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":28
 *     cpdef public bool stable
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState {
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_with_guesses)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure *, int __pyx_skip_dispatch);
  PyObject *(*set_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_volu_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, std::string, int __pyx_skip_dispatch);
  std::string (*get_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_param_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  PyObject *(*change_EOS)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  CoolProp::phases (*phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*specify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::phases, int __pyx_skip_dispatch);
  PyObject *(*unspecify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmin)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*pmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Ttriple)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*all_critical_points)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*criticality_contour_values)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tangent_plane_distance)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, double, double, std::vector<double> , int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance *__pyx_optional_args);
  double (*T)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Q)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0molar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gas_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*delta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*viscosity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*conductivity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*conformal_state)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, int __pyx_skip_dispatch);
  PyObject *(*conductivity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*viscosity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*surface_tension)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Prandtl)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Bvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Cvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*PIP)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isothermal_compressibility)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isobaric_expansion_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fugacity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*fugacity_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*molar_mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*acentric_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*true_critical_point)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*trivial_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_liquid_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_vapor_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  PyObject *(*ideal_curve)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*second_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv_splined)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, double, int __pyx_skip_dispatch);
  double (*melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, double, int __pyx_skip_dispatch);
  bool (*has_melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*saturation_ancillary)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int, CoolProp::parameters, double, int __pyx_skip_dispatch);
  PyObject *(*build_phase_envelope)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData *(*get_phase_envelope_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_liquid)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_vapor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alpha0)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alphar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, double, int __pyx_skip_dispatch);
  double (*__pyx_fuse_0get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_1get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState;


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_State {
  PyObject *(*set_Fluid)(struct __pyx_obj_8CoolProp_8CoolProp_State *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*speed_test)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int, int __pyx_skip_dispatch);
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_State *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*update_ph)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_Trho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_State *(*copy)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*Props)(struct __pyx_obj_8CoolProp_8CoolProp_State *, CoolProp::parameters, int __pyx_skip_dispatch);
  long (*Phase)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_Q)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_T)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_p)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_h)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_rho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_s)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_u)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_visc)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cond)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp0)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cv)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_MM)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_dpdT)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_Tsat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat *__pyx_optional_args);
  PyObject *(*get_subcooling)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_superheat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtabptr_8CoolProp_8CoolProp_State;


struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector {
  PyObject *(*v)(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector;


/* "PDSim\misc\datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym {
  void (*set_data)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double *, int);
  PyObject *(*set_size)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*dealloc)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*copy)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*slice)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int);
  PyObject *(*extend)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  double (*get_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  double (*set_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, double, int __pyx_skip_dispatch);
  PyObject *(*fill)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, int __pyx_skip_dispatch);
  PyBoolObject *(*all_finite)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym;


/* "PDSim\flow\flow.pxd":17
 * from PDSim.misc.datatypes cimport arraym
 * 
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection {
  PyObject *(*update_existence)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*sumterms)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection;


/* "PDSim\flow\flow.pxd":34
 * 
 * #Make a stripped down class with the necessary terms included
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef public bytes key_up
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath {
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args);
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPath;


/* "PDSim\flow\flow_models.pyx":119
 *     return IsentropicNozzleWrapper()
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper to contain the function that will be called
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction {
  double (*call)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;


/* "PDSim\flow\flow_models.pyx":48
 * cdef double Re_star_flank = 826.167177885
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     """
 *     This class is defined in order to wrap python functions for ease-of-use.
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;


/* "PDSim\flow\flow_models.pyx":94
 *     return PyFlowFunctionWrapper(**kwds)
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper that can be added to call the isentropic nozzle model
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;


/* "PDSim\flow\flow_models.pyx":310
 *     return VM
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     """
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel {
  PyObject *(*set_xv)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  double (*A)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
  PyObject *(*get_States)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_pressure_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double, double);
  PyObject *(*_flux_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double);
  double (*flow_velocity)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*derivs)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_CLEAR(__pyx_frame)
  #endif
  #define __Pyx_TraceDeclarations(codeobj)                            \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;                                          \
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  {   PyThreadState* tstate = PyThreadState_GET();                                   \
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&                       \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {    \
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
      }                                                                              \
  }
  #define __Pyx_TraceException()                                                           \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (tstate->use_tracing &&                                                           \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {          \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          PyObject *exc_info = __Pyx_GetExceptionTuple();                                  \
          if (exc_info) {                                                                  \
              if (CYTHON_TRACE && tstate->c_tracefunc)                                     \
                  tstate->c_tracefunc(                                                     \
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);      \
              tstate->c_profilefunc(                                                       \
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);        \
              Py_DECREF(exc_info);                                                         \
          }                                                                                \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
  #define __Pyx_TraceReturn(result)                                                       \
  if (likely(!__Pyx_use_tracing)); else {                                                 \
      PyThreadState* tstate = PyThreadState_GET();                                        \
      if (tstate->use_tracing) {                                                          \
          tstate->tracing++;                                                              \
          tstate->use_tracing = 0;                                                        \
          if (CYTHON_TRACE && tstate->c_tracefunc)                                        \
              tstate->c_tracefunc(                                                        \
                  tstate->c_traceobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);   \
          if (tstate->c_profilefunc)                                                      \
              tstate->c_profilefunc(                                                      \
                  tstate->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result); \
          CYTHON_FRAME_DEL;                                                               \
          tstate->use_tracing = 1;                                                        \
          tstate->tracing--;                                                              \
      }                                                                                   \
  }
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)
#endif
#if CYTHON_TRACE
  #define __Pyx_TraceLine(lineno)                                                          \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {                          \
          __pyx_frame->f_lineno = lineno;                                                 \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          tstate->c_tracefunc(tstate->c_traceobj, __pyx_frame, PyTrace_LINE, NULL);       \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
#else
  #define __Pyx_TraceLine(lineno)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_call(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_resize(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, int __pyx_v_Nflows, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_get_States(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__pressure_dominant(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_f, double __pyx_v_x, double __pyx_v_xdot, double __pyx_v_rho, double __pyx_v_V, double __pyx_v_deltap); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__flux_dominant(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_f, double __pyx_v_x, double __pyx_v_xdot, double __pyx_v_rho, double __pyx_v_V); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_set_xv(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_xv, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_A(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_flow_velocity(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_derivs(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel___cdict__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'CoolProp.typedefs' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp.cAbstractState' */

/* Module declarations from 'CoolProp.CoolProp' */
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_AbstractState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_State = 0;

/* Module declarations from 'CoolProp.State' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'PDSim.misc.datatypes' */
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_Collector = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_listm = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_arraym = 0;
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*__pyx_f_5PDSim_4misc_9datatypes_empty_arraym)(int, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'PDSim.flow.flow' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPath = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'PDSim.flow.flow_models' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = 0;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_0;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_1;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_2;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_3;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_4;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_5;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_6;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_7;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_8;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_9;
static double __pyx_v_5PDSim_4flow_11flow_models_ar_10;
static double __pyx_v_5PDSim_4flow_11flow_models_Re_star_radial;
static double __pyx_v_5PDSim_4flow_11flow_models_af_0;
static double __pyx_v_5PDSim_4flow_11flow_models_af_1;
static double __pyx_v_5PDSim_4flow_11flow_models_af_2;
static double __pyx_v_5PDSim_4flow_11flow_models_af_3;
static double __pyx_v_5PDSim_4flow_11flow_models_af_4;
static double __pyx_v_5PDSim_4flow_11flow_models_af_5;
static double __pyx_v_5PDSim_4flow_11flow_models_af_6;
static double __pyx_v_5PDSim_4flow_11flow_models_af_7;
static double __pyx_v_5PDSim_4flow_11flow_models_af_8;
static double __pyx_v_5PDSim_4flow_11flow_models_af_9;
static double __pyx_v_5PDSim_4flow_11flow_models_af_10;
static double __pyx_v_5PDSim_4flow_11flow_models_Re_star_flank;
static double __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(double, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle *__pyx_optional_args); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle(double, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, double, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle *__pyx_optional_args); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_pow(double, double, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_IsothermalWallTube(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsothermalWallTube *__pyx_optional_args); /*proto*/
#define __Pyx_MODULE_NAME "PDSim.flow.flow_models"
int __pyx_module_is_main_PDSim__flow__flow_models = 0;

/* Implementation of 'PDSim.flow.flow_models' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, PyObject *__pyx_v_Function, PyObject *__pyx_v_kwargs, PyObject *__pyx_v_Nflows); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_2call(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_4__reduce__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_makePyFlowFunctionWrapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_2__init__(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_4__reduce__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_2makeIsentropicNozzleWrapper(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_kwds); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_Nvalues); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_2resize(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, int __pyx_v_Nflows); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_4call(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_4pow(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, double __pyx_v_y); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_6IsothermalWallTube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mdot, PyObject *__pyx_v_State1, PyObject *__pyx_v_State2, PyObject *__pyx_v_fixed, PyObject *__pyx_v_L, PyObject *__pyx_v_ID, PyObject *__pyx_v_OD, PyObject *__pyx_v_HTModel, PyObject *__pyx_v_Tmean, PyObject *__pyx_v_T_wall, PyObject *__pyx_v_Q_add, PyObject *__pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_8rebuildValveModel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, double __pyx_v_d_valve, double __pyx_v_d_port, double __pyx_v_C_D, double __pyx_v_h_valve, double __pyx_v_a_valve, double __pyx_v_l_valve, double __pyx_v_rho_valve, double __pyx_v_E, double __pyx_v_x_stopper, PyObject *__pyx_v_key_up, PyObject *__pyx_v_key_down); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2get_States(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4set_xv(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_xv); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8flow_velocity(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10derivs(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_12__cdict__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_14__repr__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_16__reduce__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10IsentropicNozzle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, int __pyx_v_other_output); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FrictionCorrectedIsentropicNozzle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, double __pyx_v_delta, int __pyx_v_Type, double __pyx_v_t, double __pyx_v_ro); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_FlowFunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_ValveModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "]";
static char __pyx_k_A[] = "A";
static char __pyx_k_B[] = "B";
static char __pyx_k_E[] = "E";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_P[] = "P";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_T[] = "T";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_p[] = "p";
static char __pyx_k_q[] = "q";
static char __pyx_k_t[] = "t";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_ID[] = "ID";
static char __pyx_k_OD[] = "OD";
static char __pyx_k_VM[] = "VM";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_cp[] = "cp";
static char __pyx_k_ro[] = "ro";
static char __pyx_k_xv[] = "xv";
static char __pyx_k_CVs[] = "CVs";
static char __pyx_k_C_D[] = "C_D";
static char __pyx_k__16[] = "";
static char __pyx_k__17[] = " : ";
static char __pyx_k__18[] = "\n";
static char __pyx_k_and[] = " and ";
static char __pyx_k_end[] = "end";
static char __pyx_k_pop[] = "pop";
static char __pyx_k_rho[] = "rho";
static char __pyx_k_Type[] = "Type";
static char __pyx_k_call[] = "call";
static char __pyx_k_file[] = "file";
static char __pyx_k_item[] = "item";
static char __pyx_k_kwds[] = "kwds";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mdot[] = "mdot";
static char __pyx_k_name[] = "__name__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_visc[] = "visc";
static char __pyx_k_Fluid[] = "Fluid";
static char __pyx_k_Nodes[] = "Nodes";
static char __pyx_k_Q_add[] = "Q_add";
static char __pyx_k_State[] = "State";
static char __pyx_k_Tmean[] = "Tmean";
static char __pyx_k_Tubes[] = "Tubes";
static char __pyx_k_Twall[] = "Twall";
static char __pyx_k_alpha[] = "alpha";
static char __pyx_k_cdict[] = "__cdict__";
static char __pyx_k_delta[] = "delta";
static char __pyx_k_fixed[] = "fixed";
static char __pyx_k_m_eff[] = "m_eff";
static char __pyx_k_omega[] = "omega";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_A_port[] = "A_port";
static char __pyx_k_Nflows[] = "Nflows";
static char __pyx_k_State1[] = "State1";
static char __pyx_k_State2[] = "State2";
static char __pyx_k_T_wall[] = "T_wall";
static char __pyx_k_d_port[] = "d_port";
static char __pyx_k_derivs[] = "derivs";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_key_up[] = "key_up";
static char __pyx_k_kwargs[] = "kwargs";
static char __pyx_k_resize[] = "resize";
static char __pyx_k_set_xv[] = "set_xv";
static char __pyx_k_update[] = "update";
static char __pyx_k_valves[] = "valves";
static char __pyx_k_A_valve[] = "A_valve";
static char __pyx_k_HTModel[] = "HTModel";
static char __pyx_k_Nvalues[] = "Nvalues";
static char __pyx_k_a_valve[] = "a_valve";
static char __pyx_k_d_valve[] = "d_valve";
static char __pyx_k_h_valve[] = "h_valve";
static char __pyx_k_k_valve[] = "k_valve";
static char __pyx_k_l_valve[] = "l_valve";
static char __pyx_k_E_double[] = "E: 'double'";
static char __pyx_k_Function[] = "Function";
static char __pyx_k_State_up[] = "State_up";
static char __pyx_k_key_down[] = "key_down";
static char __pyx_k_rho_valve[] = "rho_valve";
static char __pyx_k_x_stopper[] = "x_stopper";
static char __pyx_k_C_D_double[] = "C_D: 'double'";
static char __pyx_k_Nflows_int[] = "Nflows: 'int'";
static char __pyx_k_State_down[] = "State_down";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_get_States[] = "get_States";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_exists_keys[] = "exists_keys";
static char __pyx_k_x_tr_double[] = "x_tr: 'double'";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_key_up_bytes[] = "key_up: bytes";
static char __pyx_k_m_eff_double[] = "m_eff: 'double'";
static char __pyx_k_other_output[] = "other_output";
static char __pyx_k_A_port_double[] = "A_port: 'double'";
static char __pyx_k_d_port_double[] = "d_port: 'double'";
static char __pyx_k_flow_velocity[] = "flow_velocity";
static char __pyx_k_A_valve_double[] = "A_valve: 'double'";
static char __pyx_k_a_valve_double[] = "a_valve: 'double'";
static char __pyx_k_d_valve_double[] = "d_valve: 'double'";
static char __pyx_k_h_valve_double[] = "h_valve: 'double'";
static char __pyx_k_k_valve_double[] = "k_valve: 'double'";
static char __pyx_k_key_down_bytes[] = "key_down: bytes";
static char __pyx_k_l_valve_double[] = "l_valve: 'double'";
static char __pyx_k_Function_object[] = "Function: object";
static char __pyx_k_self_xv_is_None[] = "self.xv is None";
static char __pyx_k_rho_valve_double[] = "rho_valve: 'double'";
static char __pyx_k_stationary_valve[] = "stationary valve";
static char __pyx_k_x_stopper_double[] = "x_stopper: 'double'";
static char __pyx_k_rebuildValveModel[] = "rebuildValveModel";
static char __pyx_k_fixed_not_provided[] = "fixed not provided";
static char __pyx_k_PDSim_flow_flow_models[] = "PDSim.flow.flow_models";
static char __pyx_k_makePyFlowFunctionWrapper[] = "makePyFlowFunctionWrapper";
static char __pyx_k_makeIsentropicNozzleWrapper[] = "makeIsentropicNozzleWrapper";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_is_not_equal_to_specified_size[] = "] is not equal to specified size [";
static char __pyx_k_xv_PDSim_misc_datatypes_arraym[] = "xv: PDSim.misc.datatypes.arraym";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_C_Users_dziviani_Documents_Pytho[] = "C:\\Users\\dziviani\\Documents\\Python\\pdsim-git\\PDSim\\flow\\flow_models.pyx";
static char __pyx_k_Cannot_apply_unary_operator_to_a[] = "Cannot apply unary operator to arraym instances with lengths of ";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_State_down_CoolProp_CoolProp_Sta[] = "State_down: CoolProp.CoolProp.State";
static char __pyx_k_State_up_CoolProp_CoolProp_State[] = "State_up: CoolProp.CoolProp.State";
static char __pyx_k_The_size_of_your_returned_flow_v[] = "The size of your returned flow vector [";
static char __pyx_k_Type_flank_provided_but_orbiting[] = "Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive";
static char __pyx_k_Type_radial_provided_but_thickne[] = "Type 'radial' provided, but thickness of scroll [{0:g}] is not positive";
static char __pyx_k_flows_PDSim_misc_datatypes_array[] = "flows: PDSim.misc.datatypes.arraym";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_A_port;
static PyObject *__pyx_n_s_A_valve;
static PyObject *__pyx_n_s_CVs;
static PyObject *__pyx_n_s_C_D;
static PyObject *__pyx_kp_s_C_Users_dziviani_Documents_Pytho;
static PyObject *__pyx_kp_s_Cannot_apply_unary_operator_to_a;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_Fluid;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_Function;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_HTModel;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_Nflows;
static PyObject *__pyx_n_s_Nodes;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_Nvalues;
static PyObject *__pyx_n_s_OD;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_PDSim_flow_flow_models;
static PyObject *__pyx_n_s_Q_add;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_State;
static PyObject *__pyx_n_s_State1;
static PyObject *__pyx_n_s_State2;
static PyObject *__pyx_n_s_State_down;
static PyObject *__pyx_n_s_State_up;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_T_wall;
static PyObject *__pyx_kp_s_The_size_of_your_returned_flow_v;
static PyObject *__pyx_n_s_Tmean;
static PyObject *__pyx_n_s_Tubes;
static PyObject *__pyx_n_s_Twall;
static PyObject *__pyx_n_s_Type;
static PyObject *__pyx_kp_s_Type_flank_provided_but_orbiting;
static PyObject *__pyx_kp_s_Type_radial_provided_but_thickne;
static PyObject *__pyx_n_s_VM;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__16;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_n_s_a_valve;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_kp_s_and;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_cdict;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_d_port;
static PyObject *__pyx_n_s_d_valve;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_derivs;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exists_keys;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fixed;
static PyObject *__pyx_kp_s_fixed_not_provided;
static PyObject *__pyx_n_s_flow_velocity;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_States;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_h_valve;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_s_is_not_equal_to_specified_size;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_k_valve;
static PyObject *__pyx_n_s_key_down;
static PyObject *__pyx_n_s_key_up;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_kwds;
static PyObject *__pyx_n_s_l_valve;
static PyObject *__pyx_n_s_m_eff;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makeIsentropicNozzleWrapper;
static PyObject *__pyx_n_s_makePyFlowFunctionWrapper;
static PyObject *__pyx_n_s_mdot;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_other_output;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rebuildValveModel;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_rho_valve;
static PyObject *__pyx_n_s_ro;
static PyObject *__pyx_kp_s_self_xv_is_None;
static PyObject *__pyx_n_s_set_xv;
static PyObject *__pyx_kp_s_stationary_valve;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_valves;
static PyObject *__pyx_n_s_visc;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x_stopper;
static PyObject *__pyx_n_s_xv;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_9;
static PyObject *__pyx_float_1_5;
static PyObject *__pyx_float_4_0;
static PyObject *__pyx_float_7_0;
static PyObject *__pyx_float_0_27;
static PyObject *__pyx_float_12_0;
static PyObject *__pyx_float_1000_;
static PyObject *__pyx_float_1eneg_10;
static PyObject *__pyx_float_1000_0;
static PyObject *__pyx_float_0_66666;
static PyObject *__pyx_float_37530_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_1000;
static double __pyx_k__19;
static double __pyx_k__20;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;

/* "PDSim\flow\flow_models.pyx":54
 *     In this way, functions defined at the python level can still be used by the Cython code
 *     """
 *     def __init__(self, Function, kwargs, Nflows = 1):             # <<<<<<<<<<<<<<
 *         self.Function = Function
 *         self.kwargs = kwargs
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Function = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_v_Nflows = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Function,&__pyx_n_s_kwargs,&__pyx_n_s_Nflows,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Function)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kwargs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nflows);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Function = values[0];
    __pyx_v_kwargs = values[1];
    __pyx_v_Nflows = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.PyFlowFunctionWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper___init__(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self), __pyx_v_Function, __pyx_v_kwargs, __pyx_v_Nflows);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, PyObject *__pyx_v_Function, PyObject *__pyx_v_kwargs, PyObject *__pyx_v_Nflows) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 54);

  /* "PDSim\flow\flow_models.pyx":55
 *     """
 *     def __init__(self, Function, kwargs, Nflows = 1):
 *         self.Function = Function             # <<<<<<<<<<<<<<
 *         self.kwargs = kwargs
 *         self.resize(Nflows)
 */
  __Pyx_INCREF(__pyx_v_Function);
  __Pyx_GIVEREF(__pyx_v_Function);
  __Pyx_GOTREF(__pyx_v_self->Function);
  __Pyx_DECREF(__pyx_v_self->Function);
  __pyx_v_self->Function = __pyx_v_Function;

  /* "PDSim\flow\flow_models.pyx":56
 *     def __init__(self, Function, kwargs, Nflows = 1):
 *         self.Function = Function
 *         self.kwargs = kwargs             # <<<<<<<<<<<<<<
 *         self.resize(Nflows)
 * 
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_kwargs))||((__pyx_v_kwargs) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_kwargs)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_kwargs;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kwargs);
  __Pyx_DECREF(__pyx_v_self->kwargs);
  __pyx_v_self->kwargs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":57
 *         self.Function = Function
 *         self.kwargs = kwargs
 *         self.resize(Nflows)             # <<<<<<<<<<<<<<
 * 
 *     cpdef double call(self, FlowPath FP) except *:
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_Nflows); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":54
 *     In this way, functions defined at the python level can still be used by the Cython code
 *     """
 *     def __init__(self, Function, kwargs, Nflows = 1):             # <<<<<<<<<<<<<<
 *         self.Function = Function
 *         self.kwargs = kwargs
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.PyFlowFunctionWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":59
 *         self.resize(Nflows)
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Call the flow path function, and store the flows that are calculated
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_3call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_call(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch) {
  double __pyx_v_dval;
  PyObject *__pyx_v_val = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 59);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_3call)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_FP)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_FP));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_FP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_FP));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":67
 * 
 *         # Get whatever you are going to get from the flow function
 *         val = self.Function(FP, **self.kwargs)             # <<<<<<<<<<<<<<
 * 
 *         # If it is an arraym (or a subclass thereof)
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_FP));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_FP));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_FP));
  if (unlikely(__pyx_v_self->kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_self->kwargs;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_self->Function, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_val = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PDSim\flow\flow_models.pyx":70
 * 
 *         # If it is an arraym (or a subclass thereof)
 *         if isinstance(val, arraym):             # <<<<<<<<<<<<<<
 *             if (<arraym>val).N != self.Nflows:
 *                 raise ValueError("The size of your returned flow vector ["+str((<arraym>val).N)+"] is not equal to specified size ["+str(self.Nflows)+"]")
 */
  __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_val, ((PyObject*)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)); 
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "PDSim\flow\flow_models.pyx":71
 *         # If it is an arraym (or a subclass thereof)
 *         if isinstance(val, arraym):
 *             if (<arraym>val).N != self.Nflows:             # <<<<<<<<<<<<<<
 *                 raise ValueError("The size of your returned flow vector ["+str((<arraym>val).N)+"] is not equal to specified size ["+str(self.Nflows)+"]")
 *             self.flows.set_data((<arraym>val).data, (<arraym>val).N)
 */
    __pyx_t_8 = ((((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_val)->N != __pyx_v_self->__pyx_base.Nflows) != 0);
    if (__pyx_t_8) {

      /* "PDSim\flow\flow_models.pyx":72
 *         if isinstance(val, arraym):
 *             if (<arraym>val).N != self.Nflows:
 *                 raise ValueError("The size of your returned flow vector ["+str((<arraym>val).N)+"] is not equal to specified size ["+str(self.Nflows)+"]")             # <<<<<<<<<<<<<<
 *             self.flows.set_data((<arraym>val).data, (<arraym>val).N)
 *         else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_val)->N); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_The_size_of_your_returned_flow_v, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_is_not_equal_to_specified_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.Nflows); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "PDSim\flow\flow_models.pyx":73
 *             if (<arraym>val).N != self.Nflows:
 *                 raise ValueError("The size of your returned flow vector ["+str((<arraym>val).N)+"] is not equal to specified size ["+str(self.Nflows)+"]")
 *             self.flows.set_data((<arraym>val).data, (<arraym>val).N)             # <<<<<<<<<<<<<<
 *         else:
 *             if self.Nflows == 1:
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->__pyx_base.flows->__pyx_vtab)->set_data(__pyx_v_self->__pyx_base.flows, ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_val)->data, ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_val)->N);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":75
 *             self.flows.set_data((<arraym>val).data, (<arraym>val).N)
 *         else:
 *             if self.Nflows == 1:             # <<<<<<<<<<<<<<
 *                 # Try to cast to double
 *                 dval = <double?> val
 */
    __pyx_t_8 = ((__pyx_v_self->__pyx_base.Nflows == 1) != 0);
    if (__pyx_t_8) {

      /* "PDSim\flow\flow_models.pyx":77
 *             if self.Nflows == 1:
 *                 # Try to cast to double
 *                 dval = <double?> val             # <<<<<<<<<<<<<<
 *                 # Store the value
 *                 self.flows[0] = dval
 */
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_dval = ((double)__pyx_t_6);

      /* "PDSim\flow\flow_models.pyx":79
 *                 dval = <double?> val
 *                 # Store the value
 *                 self.flows[0] = dval             # <<<<<<<<<<<<<<
 *             return dval
 * 
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_dval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->__pyx_base.flows), 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "PDSim\flow\flow_models.pyx":80
 *                 # Store the value
 *                 self.flows[0] = dval
 *             return dval             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = __pyx_v_dval;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":59
 *         self.resize(Nflows)
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Call the flow path function, and store the flows that are calculated
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.PyFlowFunctionWrapper.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_3call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_2call[] = "PyFlowFunctionWrapper.call(self, FlowPath FP) -> double\n\n        Call the flow path function, and store the flows that are calculated \n        in the values arraym instance\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_3call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FP), __pyx_ptype_5PDSim_4flow_4flow_FlowPath, 1, "FP", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_2call(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_FP));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_2call(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 59);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_call(__pyx_v_self, __pyx_v_FP, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.flow.flow_models.PyFlowFunctionWrapper.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":83
 * 
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         if not isinstance(self.Function,str):
 *             Function_str = self.Function.__name__
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_4__reduce__[] = "PyFlowFunctionWrapper.__reduce__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_4__reduce__(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_4__reduce__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self) {
  PyObject *__pyx_v_Function_str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__reduce__", 0);
  __Pyx_TraceCall("__reduce__", __pyx_f[0], 83);

  /* "PDSim\flow\flow_models.pyx":84
 * 
 *     def __reduce__(self):
 *         if not isinstance(self.Function,str):             # <<<<<<<<<<<<<<
 *             Function_str = self.Function.__name__
 *         else:
 */
  __pyx_t_1 = __pyx_v_self->Function;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyString_Check(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "PDSim\flow\flow_models.pyx":85
 *     def __reduce__(self):
 *         if not isinstance(self.Function,str):
 *             Function_str = self.Function.__name__             # <<<<<<<<<<<<<<
 *         else:
 *             Function_str = self.Function
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->Function, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_Function_str = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":87
 *             Function_str = self.Function.__name__
 *         else:
 *             Function_str = self.Function             # <<<<<<<<<<<<<<
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)
 * 
 */
    __pyx_t_1 = __pyx_v_self->Function;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_Function_str = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":88
 *         else:
 *             Function_str = self.Function
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)             # <<<<<<<<<<<<<<
 * 
 * def makePyFlowFunctionWrapper(kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_makePyFlowFunctionWrapper); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_kwargs, __pyx_v_self->kwargs) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Function, __pyx_v_Function_str) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":83
 * 
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         if not isinstance(self.Function,str):
 *             Function_str = self.Function.__name__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.PyFlowFunctionWrapper.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Function_str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":29
 * cdef class PyFlowFunctionWrapper(FlowFunction):
 *     cdef dict kwargs
 *     cdef public object Function             # <<<<<<<<<<<<<<
 * 
 *     cpdef double call(self, FlowPath FP) except *
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 29);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Function);
  __pyx_r = __pyx_v_self->Function;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 29);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->Function);
  __Pyx_DECREF(__pyx_v_self->Function);
  __pyx_v_self->Function = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 29);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Function);
  __Pyx_DECREF(__pyx_v_self->Function);
  __pyx_v_self->Function = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":90
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)
 * 
 * def makePyFlowFunctionWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return PyFlowFunctionWrapper(**kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_1makePyFlowFunctionWrapper(PyObject *__pyx_self, PyObject *__pyx_v_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_makePyFlowFunctionWrapper[] = "makePyFlowFunctionWrapper(kwds)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_11flow_models_1makePyFlowFunctionWrapper = {"makePyFlowFunctionWrapper", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_1makePyFlowFunctionWrapper, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_makePyFlowFunctionWrapper};
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_1makePyFlowFunctionWrapper(PyObject *__pyx_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makePyFlowFunctionWrapper (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_makePyFlowFunctionWrapper(__pyx_self, ((PyObject *)__pyx_v_kwds));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_makePyFlowFunctionWrapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("makePyFlowFunctionWrapper", 0);
  __Pyx_TraceCall("makePyFlowFunctionWrapper", __pyx_f[0], 90);

  /* "PDSim\flow\flow_models.pyx":92
 * def makePyFlowFunctionWrapper(kwds):
 *     # A stub function to rebuild for pickling
 *     return PyFlowFunctionWrapper(**kwds)             # <<<<<<<<<<<<<<
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_kwds == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (likely(PyDict_Check(__pyx_v_kwds))) {
    __pyx_t_1 = __pyx_v_kwds;
    __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwds, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":90
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)
 * 
 * def makePyFlowFunctionWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return PyFlowFunctionWrapper(**kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.flow.flow_models.makePyFlowFunctionWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":100
 *     """
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Returns the mass flow rate from the isentropic nozzle model
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_1call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 100);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_1call)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_FP)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_FP));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_FP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_FP));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":105
 *         """
 *         return IsentropicNozzle(FP.A,
 *                                 FP.State_up,             # <<<<<<<<<<<<<<
 *                                 FP.State_down)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_FP->State_up);
  __Pyx_INCREF(__pyx_t_1);

  /* "PDSim\flow\flow_models.pyx":106
 *         return IsentropicNozzle(FP.A,
 *                                 FP.State_up,
 *                                 FP.State_down)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_FP->State_down);
  __Pyx_INCREF(__pyx_t_2);

  /* "PDSim\flow\flow_models.pyx":104
 *         Returns the mass flow rate from the isentropic nozzle model
 *         """
 *         return IsentropicNozzle(FP.A,             # <<<<<<<<<<<<<<
 *                                 FP.State_up,
 *                                 FP.State_down)
 */
  __pyx_r = __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(__pyx_v_FP->A, ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1), ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_2), 0, NULL);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":100
 *     """
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Returns the mass flow rate from the isentropic nozzle model
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzleWrapper.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_1call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call[] = "IsentropicNozzleWrapper.call(self, FlowPath FP) -> double\n\n        Returns the mass flow rate from the isentropic nozzle model\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_1call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FP), __pyx_ptype_5PDSim_4flow_4flow_FlowPath, 1, "FP", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(((struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_FP));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 100);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call(__pyx_v_self, __pyx_v_FP, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzleWrapper.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":108
 *                                 FP.State_down)
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         cdef int Nvalues = 1
 *         self.resize(Nvalues)
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_2__init__(((struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_2__init__(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self) {
  int __pyx_v_Nvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 108);

  /* "PDSim\flow\flow_models.pyx":109
 * 
 *     def __init__(self):
 *         cdef int Nvalues = 1             # <<<<<<<<<<<<<<
 *         self.resize(Nvalues)
 * 
 */
  __pyx_v_Nvalues = 1;

  /* "PDSim\flow\flow_models.pyx":110
 *     def __init__(self):
 *         cdef int Nvalues = 1
 *         self.resize(Nvalues)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), __pyx_v_Nvalues, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":108
 *                                 FP.State_down)
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         cdef int Nvalues = 1
 *         self.resize(Nvalues)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzleWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":112
 *         self.resize(Nvalues)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_4__reduce__[] = "IsentropicNozzleWrapper.__reduce__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_4__reduce__(((struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_4__reduce__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__reduce__", 0);
  __Pyx_TraceCall("__reduce__", __pyx_f[0], 112);

  /* "PDSim\flow\flow_models.pyx":113
 * 
 *     def __reduce__(self):
 *         return makeIsentropicNozzleWrapper, ({},)             # <<<<<<<<<<<<<<
 * 
 * def makeIsentropicNozzleWrapper(kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_makeIsentropicNozzleWrapper); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":112
 *         self.resize(Nvalues)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzleWrapper.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":115
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 * def makeIsentropicNozzleWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return IsentropicNozzleWrapper()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_3makeIsentropicNozzleWrapper(PyObject *__pyx_self, PyObject *__pyx_v_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_2makeIsentropicNozzleWrapper[] = "makeIsentropicNozzleWrapper(kwds)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_11flow_models_3makeIsentropicNozzleWrapper = {"makeIsentropicNozzleWrapper", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_3makeIsentropicNozzleWrapper, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_2makeIsentropicNozzleWrapper};
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_3makeIsentropicNozzleWrapper(PyObject *__pyx_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeIsentropicNozzleWrapper (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_2makeIsentropicNozzleWrapper(__pyx_self, ((PyObject *)__pyx_v_kwds));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_2makeIsentropicNozzleWrapper(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("makeIsentropicNozzleWrapper", 0);
  __Pyx_TraceCall("makeIsentropicNozzleWrapper", __pyx_f[0], 115);

  /* "PDSim\flow\flow_models.pyx":117
 * def makeIsentropicNozzleWrapper(kwds):
 *     # A stub function to rebuild for pickling
 *     return IsentropicNozzleWrapper()             # <<<<<<<<<<<<<<
 * 
 * cdef class FlowFunction(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":115
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 * def makeIsentropicNozzleWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return IsentropicNozzleWrapper()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.makeIsentropicNozzleWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":146
 * 
 *     """
 *     def __init__(self, Nvalues = 1):             # <<<<<<<<<<<<<<
 *         self.resize(Nvalues)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Nvalues = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Nvalues,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nvalues);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Nvalues = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction___init__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), __pyx_v_Nvalues);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_Nvalues) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 146);

  /* "PDSim\flow\flow_models.pyx":147
 *     """
 *     def __init__(self, Nvalues = 1):
 *         self.resize(Nvalues)             # <<<<<<<<<<<<<<
 * 
 *     cpdef resize(self, int Nflows):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_Nvalues); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self->__pyx_vtab)->resize(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":146
 * 
 *     """
 *     def __init__(self, Nvalues = 1):             # <<<<<<<<<<<<<<
 *         self.resize(Nvalues)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":149
 *         self.resize(Nvalues)
 * 
 *     cpdef resize(self, int Nflows):             # <<<<<<<<<<<<<<
 *         """ Resize the storage arraym """
 *         self.flows = arraym()
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_3resize(PyObject *__pyx_v_self, PyObject *__pyx_arg_Nflows); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_resize(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, int __pyx_v_Nflows, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("resize", 0);
  __Pyx_TraceCall("resize", __pyx_f[0], 149);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_3resize)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_Nflows); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":151
 *     cpdef resize(self, int Nflows):
 *         """ Resize the storage arraym """
 *         self.flows = arraym()             # <<<<<<<<<<<<<<
 *         self.flows.set_size(Nflows)
 *         self.Nflows = Nflows
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->flows);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->flows));
  __pyx_v_self->flows = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":152
 *         """ Resize the storage arraym """
 *         self.flows = arraym()
 *         self.flows.set_size(Nflows)             # <<<<<<<<<<<<<<
 *         self.Nflows = Nflows
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->flows->__pyx_vtab)->set_size(__pyx_v_self->flows, __pyx_v_Nflows, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":153
 *         self.flows = arraym()
 *         self.flows.set_size(Nflows)
 *         self.Nflows = Nflows             # <<<<<<<<<<<<<<
 * 
 *     cpdef double call(self, FlowPath FP) except *:
 */
  __pyx_v_self->Nflows = __pyx_v_Nflows;

  /* "PDSim\flow\flow_models.pyx":149
 *         self.resize(Nvalues)
 * 
 *     cpdef resize(self, int Nflows):             # <<<<<<<<<<<<<<
 *         """ Resize the storage arraym """
 *         self.flows = arraym()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_3resize(PyObject *__pyx_v_self, PyObject *__pyx_arg_Nflows); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_12FlowFunction_2resize[] = "FlowFunction.resize(self, int Nflows)\n Resize the storage arraym ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_3resize(PyObject *__pyx_v_self, PyObject *__pyx_arg_Nflows) {
  int __pyx_v_Nflows;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  assert(__pyx_arg_Nflows); {
    __pyx_v_Nflows = __Pyx_PyInt_As_int(__pyx_arg_Nflows); if (unlikely((__pyx_v_Nflows == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_2resize(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), ((int)__pyx_v_Nflows));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_2resize(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, int __pyx_v_Nflows) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("resize", 0);
  __Pyx_TraceCall("resize", __pyx_f[0], 149);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_resize(__pyx_v_self, __pyx_v_Nflows, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":155
 *         self.Nflows = Nflows
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 155);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5call)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_FP)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_FP));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_FP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_FP));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":156
 * 
 *     cpdef double call(self, FlowPath FP) except *:
 *         pass             # <<<<<<<<<<<<<<
 * 
 * cpdef double pow(double x, double y):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":155
 *         self.Nflows = Nflows
 * 
 *     cpdef double call(self, FlowPath FP) except *:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_12FlowFunction_4call[] = "FlowFunction.call(self, FlowPath FP) -> double";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5call(PyObject *__pyx_v_self, PyObject *__pyx_v_FP) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FP), __pyx_ptype_5PDSim_4flow_4flow_FlowPath, 1, "FP", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_4call(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_FP));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_4call(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 155);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_call(__pyx_v_self, __pyx_v_FP, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":24
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 *     cpdef public arraym flows             # <<<<<<<<<<<<<<
 *     cpdef public int Nflows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 24);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->flows));
  __pyx_r = ((PyObject *)__pyx_v_self->flows);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 24);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->flows);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->flows));
  __pyx_v_self->flows = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.flows.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_5flows_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 24);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->flows);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->flows));
  __pyx_v_self->flows = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":25
 *     cpdef resize(self, int Nvalues)
 *     cpdef public arraym flows
 *     cpdef public int Nflows             # <<<<<<<<<<<<<<
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 25);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Nflows); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.Nflows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 25);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->Nflows = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.FlowFunction.Nflows.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":158
 *         pass
 * 
 * cpdef double pow(double x, double y):             # <<<<<<<<<<<<<<
 *     return x**y
 * 
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_5pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_pow(double __pyx_v_x, double __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("pow", 0);
  __Pyx_TraceCall("pow", __pyx_f[0], 158);

  /* "PDSim\flow\flow_models.pyx":159
 * 
 * cpdef double pow(double x, double y):
 *     return x**y             # <<<<<<<<<<<<<<
 * 
 * cpdef IsothermalWallTube(mdot,State1,State2,fixed,L,ID,OD=None,HTModel='Twall',Tmean=None,T_wall=None,Q_add = 0.0,alpha=None):
 */
  __pyx_r = pow(__pyx_v_x, __pyx_v_y);
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":158
 *         pass
 * 
 * cpdef double pow(double x, double y):             # <<<<<<<<<<<<<<
 *     return x**y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_5pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_4pow[] = "pow(double x, double y) -> double";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_5pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pow") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_4pow(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_4pow(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, double __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("pow", 0);
  __Pyx_TraceCall("pow", __pyx_f[0], 158);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_x, __pyx_v_y, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":161
 *     return x**y
 * 
 * cpdef IsothermalWallTube(mdot,State1,State2,fixed,L,ID,OD=None,HTModel='Twall',Tmean=None,T_wall=None,Q_add = 0.0,alpha=None):             # <<<<<<<<<<<<<<
 *     """
 *     In this tube model, one of the nodes is known (fixed), but the other is calculated based on heat transfer and pressure drop for a given mass flow rate
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_7IsothermalWallTube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_IsothermalWallTube(PyObject *__pyx_v_mdot, PyObject *__pyx_v_State1, PyObject *__pyx_v_State2, PyObject *__pyx_v_fixed, PyObject *__pyx_v_L, PyObject *__pyx_v_ID, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsothermalWallTube *__pyx_optional_args) {
  PyObject *__pyx_v_Tmean = ((PyObject *)Py_None);
  PyObject *__pyx_v_T_wall = ((PyObject *)Py_None);
  PyObject *__pyx_v_Q_add = ((PyObject *)__pyx_float_0_0);
  PyObject *__pyx_v_alpha = ((PyObject *)Py_None);
  PyObject *__pyx_v_Fluid = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_T1 = NULL;
  PyObject *__pyx_v_T2 = NULL;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_S = NULL;
  PyObject *__pyx_v_mu = NULL;
  PyObject *__pyx_v_cp = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_rho = NULL;
  PyObject *__pyx_v_Pr = NULL;
  PyObject *__pyx_v_InnerFlowArea = NULL;
  PyObject *__pyx_v_u = NULL;
  PyObject *__pyx_v_Re = NULL;
  PyObject *__pyx_v_e_D = NULL;
  double __pyx_v_A;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_Nu = NULL;
  PyObject *__pyx_v_G = NULL;
  PyObject *__pyx_v_dp_dz = NULL;
  PyObject *__pyx_v_DELTAP = NULL;
  PyObject *__pyx_v_T2_star = NULL;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_S_star = NULL;
  PyObject *__pyx_v_h2 = NULL;
  PyObject *__pyx_v_Q = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("IsothermalWallTube", 0);
  __Pyx_TraceCall("IsothermalWallTube", __pyx_f[0], 161);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 2) {
      __pyx_v_Tmean = __pyx_optional_args->Tmean;
      if (__pyx_optional_args->__pyx_n > 3) {
        __pyx_v_T_wall = __pyx_optional_args->T_wall;
        if (__pyx_optional_args->__pyx_n > 4) {
          __pyx_v_Q_add = __pyx_optional_args->Q_add;
          if (__pyx_optional_args->__pyx_n > 5) {
            __pyx_v_alpha = __pyx_optional_args->alpha;
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_Tmean);
  __Pyx_INCREF(__pyx_v_Q_add);
  __Pyx_INCREF(__pyx_v_alpha);

  /* "PDSim\flow\flow_models.pyx":203
 * 
 *     #Use the provided value for Tmean if it is a float or integer
 *     if not (isinstance(Tmean,float) or isinstance(Tmean,int)):             # <<<<<<<<<<<<<<
 *         if fixed==1:
 *             Fluid=State1.Fluid
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_Tmean); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_Tmean); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "PDSim\flow\flow_models.pyx":204
 *     #Use the provided value for Tmean if it is a float or integer
 *     if not (isinstance(Tmean,float) or isinstance(Tmean,int)):
 *         if fixed==1:             # <<<<<<<<<<<<<<
 *             Fluid=State1.Fluid
 *             Tmean=State1.T
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "PDSim\flow\flow_models.pyx":205
 *     if not (isinstance(Tmean,float) or isinstance(Tmean,int)):
 *         if fixed==1:
 *             Fluid=State1.Fluid             # <<<<<<<<<<<<<<
 *             Tmean=State1.T
 *         elif fixed==2:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_Fluid); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_Fluid = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":206
 *         if fixed==1:
 *             Fluid=State1.Fluid
 *             Tmean=State1.T             # <<<<<<<<<<<<<<
 *         elif fixed==2:
 *             Fluid=State2.Fluid
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_Tmean, __pyx_t_4);
      __pyx_t_4 = 0;
      goto __pyx_L6;
    }

    /* "PDSim\flow\flow_models.pyx":207
 *             Fluid=State1.Fluid
 *             Tmean=State1.T
 *         elif fixed==2:             # <<<<<<<<<<<<<<
 *             Fluid=State2.Fluid
 *             Tmean=State2.T
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "PDSim\flow\flow_models.pyx":208
 *             Tmean=State1.T
 *         elif fixed==2:
 *             Fluid=State2.Fluid             # <<<<<<<<<<<<<<
 *             Tmean=State2.T
 *         else:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_Fluid); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_Fluid = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":209
 *         elif fixed==2:
 *             Fluid=State2.Fluid
 *             Tmean=State2.T             # <<<<<<<<<<<<<<
 *         else:
 *             print 'fixed not provided'
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_Tmean, __pyx_t_4);
      __pyx_t_4 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "PDSim\flow\flow_models.pyx":211
 *             Tmean=State2.T
 *         else:
 *             print 'fixed not provided'             # <<<<<<<<<<<<<<
 *             #raise AttributeError
 * 
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_fixed_not_provided) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;

    /* "PDSim\flow\flow_models.pyx":214
 *             #raise AttributeError
 * 
 *         if fixed==1:             # <<<<<<<<<<<<<<
 *             p=State1.p
 *             T1=State1.T
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "PDSim\flow\flow_models.pyx":215
 * 
 *         if fixed==1:
 *             p=State1.p             # <<<<<<<<<<<<<<
 *             T1=State1.T
 *         elif fixed==2:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_p); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_p = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":216
 *         if fixed==1:
 *             p=State1.p
 *             T1=State1.T             # <<<<<<<<<<<<<<
 *         elif fixed==2:
 *             p=State2.p
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_T1 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7;
    }

    /* "PDSim\flow\flow_models.pyx":217
 *             p=State1.p
 *             T1=State1.T
 *         elif fixed==2:             # <<<<<<<<<<<<<<
 *             p=State2.p
 *             T2=State2.T
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "PDSim\flow\flow_models.pyx":218
 *             T1=State1.T
 *         elif fixed==2:
 *             p=State2.p             # <<<<<<<<<<<<<<
 *             T2=State2.T
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_p); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_p = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":219
 *         elif fixed==2:
 *             p=State2.p
 *             T2=State2.T             # <<<<<<<<<<<<<<
 * 
 *         if abs(mdot) < 1e-10:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_T2 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "PDSim\flow\flow_models.pyx":221
 *             T2=State2.T
 * 
 *         if abs(mdot) < 1e-10:             # <<<<<<<<<<<<<<
 *             return 0.0
 * 
 */
    __pyx_t_4 = PyNumber_Absolute(__pyx_v_mdot); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_float_1eneg_10, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "PDSim\flow\flow_models.pyx":222
 * 
 *         if abs(mdot) < 1e-10:
 *             return 0.0             # <<<<<<<<<<<<<<
 * 
 *         # Q_add needs to be in W
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_float_0_0);
      __pyx_r = __pyx_float_0_0;
      goto __pyx_L0;
    }

    /* "PDSim\flow\flow_models.pyx":225
 * 
 *         # Q_add needs to be in W
 *         Q_add *= 1000             # <<<<<<<<<<<<<<
 * 
 *         S=State(Fluid,{'T':Tmean,'P':p})
 */
    __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_v_Q_add, __pyx_int_1000); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_Q_add, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":227
 *         Q_add *= 1000
 * 
 *         S=State(Fluid,{'T':Tmean,'P':p})             # <<<<<<<<<<<<<<
 * 
 *         mu = S.visc  #kg/m-s
 */
    if (unlikely(!__pyx_v_Fluid)) { __Pyx_RaiseUnboundLocalError("Fluid"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_T, __pyx_v_Tmean) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(!__pyx_v_p)) { __Pyx_RaiseUnboundLocalError("p"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_P, __pyx_v_p) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_Fluid);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Fluid);
    __Pyx_GIVEREF(__pyx_v_Fluid);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8CoolProp_8CoolProp_State)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_S = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":229
 *         S=State(Fluid,{'T':Tmean,'P':p})
 * 
 *         mu = S.visc  #kg/m-s             # <<<<<<<<<<<<<<
 *         cp = S.cp*1000. #J/kg-K
 *         k = S.k*1000. #W/m-K
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_S), __pyx_n_s_visc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_mu = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":230
 * 
 *         mu = S.visc  #kg/m-s
 *         cp = S.cp*1000. #J/kg-K             # <<<<<<<<<<<<<<
 *         k = S.k*1000. #W/m-K
 *         rho = S.rho #kg/m^3
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_S), __pyx_n_s_cp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_float_1000_); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_cp = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "PDSim\flow\flow_models.pyx":231
 *         mu = S.visc  #kg/m-s
 *         cp = S.cp*1000. #J/kg-K
 *         k = S.k*1000. #W/m-K             # <<<<<<<<<<<<<<
 *         rho = S.rho #kg/m^3
 *         Pr = cp * mu / k #[-]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_S), __pyx_n_s_k); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_float_1000_); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_k = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":232
 *         cp = S.cp*1000. #J/kg-K
 *         k = S.k*1000. #W/m-K
 *         rho = S.rho #kg/m^3             # <<<<<<<<<<<<<<
 *         Pr = cp * mu / k #[-]
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_S), __pyx_n_s_rho); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_rho = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":233
 *         k = S.k*1000. #W/m-K
 *         rho = S.rho #kg/m^3
 *         Pr = cp * mu / k #[-]             # <<<<<<<<<<<<<<
 * 
 *         InnerFlowArea=pi*(ID**2)/4.0
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_cp, __pyx_v_mu); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_k); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_Pr = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "PDSim\flow\flow_models.pyx":235
 *         Pr = cp * mu / k #[-]
 * 
 *         InnerFlowArea=pi*(ID**2)/4.0             # <<<<<<<<<<<<<<
 *         u=mdot/(InnerFlowArea*rho)
 *         Re=rho*u*ID/mu
 */
    __pyx_t_4 = PyFloat_FromDouble(M_PI); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Power(__pyx_v_ID, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_float_4_0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_InnerFlowArea = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":236
 * 
 *         InnerFlowArea=pi*(ID**2)/4.0
 *         u=mdot/(InnerFlowArea*rho)             # <<<<<<<<<<<<<<
 *         Re=rho*u*ID/mu
 * 
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_InnerFlowArea, __pyx_v_rho); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_mdot, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_u = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "PDSim\flow\flow_models.pyx":237
 *         InnerFlowArea=pi*(ID**2)/4.0
 *         u=mdot/(InnerFlowArea*rho)
 *         Re=rho*u*ID/mu             # <<<<<<<<<<<<<<
 * 
 *         # Friction factor of Churchill (Darcy Friction factor where f_laminar=64/Re)
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_rho, __pyx_v_u); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_v_ID); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_mu); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_Re = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "PDSim\flow\flow_models.pyx":240
 * 
 *         # Friction factor of Churchill (Darcy Friction factor where f_laminar=64/Re)
 *         e_D = 0             # <<<<<<<<<<<<<<
 *         A = ((-2.457 * log( (7.0 / Re)**(0.9) + 0.27 * e_D)))**16
 *         B = (37530.0 / Re)**16
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_e_D = __pyx_int_0;

    /* "PDSim\flow\flow_models.pyx":241
 *         # Friction factor of Churchill (Darcy Friction factor where f_laminar=64/Re)
 *         e_D = 0
 *         A = ((-2.457 * log( (7.0 / Re)**(0.9) + 0.27 * e_D)))**16             # <<<<<<<<<<<<<<
 *         B = (37530.0 / Re)**16
 *         f = 8 * ((8/Re)**12.0 + 1 / (A + B)**(1.5))**(1/12)
 */
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_float_7_0, __pyx_v_Re); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Power(__pyx_t_6, __pyx_float_0_9, Py_None); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_float_0_27, __pyx_v_e_D); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_A = pow((-2.457 * log(__pyx_t_7)), 16.0);

    /* "PDSim\flow\flow_models.pyx":242
 *         e_D = 0
 *         A = ((-2.457 * log( (7.0 / Re)**(0.9) + 0.27 * e_D)))**16
 *         B = (37530.0 / Re)**16             # <<<<<<<<<<<<<<
 *         f = 8 * ((8/Re)**12.0 + 1 / (A + B)**(1.5))**(1/12)
 * 
 */
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_float_37530_0, __pyx_v_Re); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Power(__pyx_t_4, __pyx_int_16, Py_None); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_B = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "PDSim\flow\flow_models.pyx":243
 *         A = ((-2.457 * log( (7.0 / Re)**(0.9) + 0.27 * e_D)))**16
 *         B = (37530.0 / Re)**16
 *         f = 8 * ((8/Re)**12.0 + 1 / (A + B)**(1.5))**(1/12)             # <<<<<<<<<<<<<<
 * 
 *         # Heat Transfer coefficient of Gnielinski
 */
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_int_8, __pyx_v_Re); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyNumber_Power(__pyx_t_6, __pyx_float_12_0, Py_None); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_A); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_v_B); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Power(__pyx_t_5, __pyx_float_1_5, Py_None); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble((1.0 / 12.0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Power(__pyx_t_6, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_int_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_f = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":246
 * 
 *         # Heat Transfer coefficient of Gnielinski
 *         Nu = (f/8)*(Re-1000)*Pr/(1+12.7*sqrt(f/8)*(Pr**(0.66666)-1)) #[-]             # <<<<<<<<<<<<<<
 * 
 *         # alpha is not provided directly, use the correlation
 */
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_f, __pyx_int_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_Re, __pyx_int_1000); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_6, __pyx_v_Pr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_f, __pyx_int_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble((12.7 * sqrt(__pyx_t_7))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Power(__pyx_v_Pr, __pyx_float_0_66666, Py_None); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_int_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_Nu = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":249
 * 
 *         # alpha is not provided directly, use the correlation
 *         if alpha is None:             # <<<<<<<<<<<<<<
 *             alpha = k*Nu/ID #W/m^2-K
 *         # If the Reynolds number is very, very small, you will get a negative Nusselt number,
 */
    __pyx_t_2 = (__pyx_v_alpha == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PDSim\flow\flow_models.pyx":250
 *         # alpha is not provided directly, use the correlation
 *         if alpha is None:
 *             alpha = k*Nu/ID #W/m^2-K             # <<<<<<<<<<<<<<
 *         # If the Reynolds number is very, very small, you will get a negative Nusselt number,
 *         # so we limit the heat transfer coefficient to be positive
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_k, __pyx_v_Nu); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_ID); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_t_8);
      __pyx_t_8 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "PDSim\flow\flow_models.pyx":253
 *         # If the Reynolds number is very, very small, you will get a negative Nusselt number,
 *         # so we limit the heat transfer coefficient to be positive
 *         if alpha < 0:             # <<<<<<<<<<<<<<
 *             alpha = 0
 * 
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_alpha, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_1) {

      /* "PDSim\flow\flow_models.pyx":254
 *         # so we limit the heat transfer coefficient to be positive
 *         if alpha < 0:
 *             alpha = 0             # <<<<<<<<<<<<<<
 * 
 *         #Pressure gradient using Darcy friction factor
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_int_0);
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "PDSim\flow\flow_models.pyx":257
 * 
 *         #Pressure gradient using Darcy friction factor
 *         G = mdot/InnerFlowArea             # <<<<<<<<<<<<<<
 *         dp_dz = -f/rho*G**2/(2*ID)
 *         DELTAP = dp_dz*L
 */
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_mdot, __pyx_v_InnerFlowArea); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_G = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "PDSim\flow\flow_models.pyx":258
 *         #Pressure gradient using Darcy friction factor
 *         G = mdot/InnerFlowArea
 *         dp_dz = -f/rho*G**2/(2*ID)             # <<<<<<<<<<<<<<
 *         DELTAP = dp_dz*L
 * 
 */
    __pyx_t_8 = PyNumber_Negative(__pyx_v_f); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_v_rho); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Power(__pyx_v_G, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Multiply(__pyx_int_2, __pyx_v_ID); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_dp_dz = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":259
 *         G = mdot/InnerFlowArea
 *         dp_dz = -f/rho*G**2/(2*ID)
 *         DELTAP = dp_dz*L             # <<<<<<<<<<<<<<
 * 
 *         if fixed==1:
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_dp_dz, __pyx_v_L); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_DELTAP = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":261
 *         DELTAP = dp_dz*L
 * 
 *         if fixed==1:             # <<<<<<<<<<<<<<
 *             # The outlet temperature considering just the wall heat transfer
 *             T2_star = T_wall-(T_wall-T1)*exp(-pi*ID*L*alpha/(mdot*cp))
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "PDSim\flow\flow_models.pyx":263
 *         if fixed==1:
 *             # The outlet temperature considering just the wall heat transfer
 *             T2_star = T_wall-(T_wall-T1)*exp(-pi*ID*L*alpha/(mdot*cp))             # <<<<<<<<<<<<<<
 * 
 *             # Get the actual outlet enthalpy based on the additional heat input
 */
      if (unlikely(!__pyx_v_T1)) { __Pyx_RaiseUnboundLocalError("T1"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_T_wall, __pyx_v_T1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyFloat_FromDouble((-M_PI)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_8, __pyx_v_ID); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_v_L); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_8, __pyx_v_alpha); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_mdot, __pyx_v_cp); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyFloat_FromDouble(exp(__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Subtract(__pyx_v_T_wall, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_T2_star = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "PDSim\flow\flow_models.pyx":266
 * 
 *             # Get the actual outlet enthalpy based on the additional heat input
 *             S_star = State(Fluid,{'T':T2_star,'P':p + DELTAP/1000.0})             # <<<<<<<<<<<<<<
 * 
 *             h2 = S_star.h + Q_add/mdot/1000.0
 */
      if (unlikely(!__pyx_v_Fluid)) { __Pyx_RaiseUnboundLocalError("Fluid"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_T, __pyx_v_T2_star) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (unlikely(!__pyx_v_p)) { __Pyx_RaiseUnboundLocalError("p"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_DELTAP, __pyx_float_1000_0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyNumber_Add(__pyx_v_p, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_P, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_Fluid);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_Fluid);
      __Pyx_GIVEREF(__pyx_v_Fluid);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8CoolProp_8CoolProp_State)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_S_star = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "PDSim\flow\flow_models.pyx":268
 *             S_star = State(Fluid,{'T':T2_star,'P':p + DELTAP/1000.0})
 * 
 *             h2 = S_star.h + Q_add/mdot/1000.0             # <<<<<<<<<<<<<<
 * 
 *             State2.update({'H':h2,'P':p+DELTAP/1000})
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_S_star), __pyx_n_s_h); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_Q_add, __pyx_v_mdot); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_float_1000_0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_h2 = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "PDSim\flow\flow_models.pyx":270
 *             h2 = S_star.h + Q_add/mdot/1000.0
 * 
 *             State2.update({'H':h2,'P':p+DELTAP/1000})             # <<<<<<<<<<<<<<
 * 
 *             # Q is defined to be positive if heat transferred from wall to fluid
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_H, __pyx_v_h2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (unlikely(!__pyx_v_p)) { __Pyx_RaiseUnboundLocalError("p"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_DELTAP, __pyx_int_1000); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = PyNumber_Add(__pyx_v_p, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_P, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PDSim\flow\flow_models.pyx":275
 *             #
 *             # It only includes the term from the wall heat transfer
 *             Q=mdot*cp*(T2_star-T1)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_mdot, __pyx_v_cp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(!__pyx_v_T1)) { __Pyx_RaiseUnboundLocalError("T1"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_8 = PyNumber_Subtract(__pyx_v_T2_star, __pyx_v_T1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_Q = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L11;
    }
    /*else*/ {

      /* "PDSim\flow\flow_models.pyx":279
 *         else:
 *             #Get the wall heat transfer outlet temperature based on the additional heat input
 *             T2_star = T2 - Q_add/(mdot*cp)             # <<<<<<<<<<<<<<
 * 
 *             T1=T_wall-(T_wall-T2_star)/exp(-pi*ID*L*alpha/(mdot*cp))
 */
      if (unlikely(!__pyx_v_T2)) { __Pyx_RaiseUnboundLocalError("T2"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_4 = PyNumber_Multiply(__pyx_v_mdot, __pyx_v_cp); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_Q_add, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_T2, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_T2_star = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":281
 *             T2_star = T2 - Q_add/(mdot*cp)
 * 
 *             T1=T_wall-(T_wall-T2_star)/exp(-pi*ID*L*alpha/(mdot*cp))             # <<<<<<<<<<<<<<
 * 
 *             # Q is defined to be positive if heat transferred from wall to fluid
 */
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_T_wall, __pyx_v_T2_star); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyFloat_FromDouble((-M_PI)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_v_ID); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_5, __pyx_v_L); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_v_alpha); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_mdot, __pyx_v_cp); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyFloat_FromDouble(exp(__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Subtract(__pyx_v_T_wall, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_T1, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "PDSim\flow\flow_models.pyx":284
 * 
 *             # Q is defined to be positive if heat transferred from wall to fluid
 *             Q=mdot*cp*(T2_star-T1)             # <<<<<<<<<<<<<<
 * 
 *             State1.update({'T':T1,'P':p-DELTAP/1000})
 */
      __pyx_t_6 = PyNumber_Multiply(__pyx_v_mdot, __pyx_v_cp); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyNumber_Subtract(__pyx_v_T2_star, __pyx_v_T1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_Q = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PDSim\flow\flow_models.pyx":286
 *             Q=mdot*cp*(T2_star-T1)
 * 
 *             State1.update({'T':T1,'P':p-DELTAP/1000})             # <<<<<<<<<<<<<<
 * 
 * #        print 'T1',T1
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_T, __pyx_v_T1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (unlikely(!__pyx_v_p)) { __Pyx_RaiseUnboundLocalError("p"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_DELTAP, __pyx_int_1000); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyNumber_Subtract(__pyx_v_p, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_P, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L11:;

    /* "PDSim\flow\flow_models.pyx":299
 * #        print 'Q', Q
 * 
 *         return Q/1000.0             # <<<<<<<<<<<<<<
 * 
 * def rebuildValveModel(d):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_Q, __pyx_float_1000_0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":161
 *     return x**y
 * 
 * cpdef IsothermalWallTube(mdot,State1,State2,fixed,L,ID,OD=None,HTModel='Twall',Tmean=None,T_wall=None,Q_add = 0.0,alpha=None):             # <<<<<<<<<<<<<<
 *     """
 *     In this tube model, one of the nodes is known (fixed), but the other is calculated based on heat transfer and pressure drop for a given mass flow rate
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsothermalWallTube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Fluid);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_T1);
  __Pyx_XDECREF(__pyx_v_T2);
  __Pyx_XDECREF((PyObject *)__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_mu);
  __Pyx_XDECREF(__pyx_v_cp);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_rho);
  __Pyx_XDECREF(__pyx_v_Pr);
  __Pyx_XDECREF(__pyx_v_InnerFlowArea);
  __Pyx_XDECREF(__pyx_v_u);
  __Pyx_XDECREF(__pyx_v_Re);
  __Pyx_XDECREF(__pyx_v_e_D);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_Nu);
  __Pyx_XDECREF(__pyx_v_G);
  __Pyx_XDECREF(__pyx_v_dp_dz);
  __Pyx_XDECREF(__pyx_v_DELTAP);
  __Pyx_XDECREF(__pyx_v_T2_star);
  __Pyx_XDECREF((PyObject *)__pyx_v_S_star);
  __Pyx_XDECREF(__pyx_v_h2);
  __Pyx_XDECREF(__pyx_v_Q);
  __Pyx_XDECREF(__pyx_v_Tmean);
  __Pyx_XDECREF(__pyx_v_Q_add);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_7IsothermalWallTube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_6IsothermalWallTube[] = "IsothermalWallTube(mdot, State1, State2, fixed, L, ID, OD=None, HTModel='Twall', Tmean=None, T_wall=None, Q_add=0.0, alpha=None)\n\n    In this tube model, one of the nodes is known (fixed), but the other is calculated based on heat transfer and pressure drop for a given mass flow rate\n    \n    Assumes flow is turbulent and fully developed.  The flow is almost certainly fully turbulent, but it is unlikely to be truly fully developed\n    \n    Parameters\n    ----------\n    mdot : float\n        mass flow rate [kg/s]\n    State1 : :class:`State <CoolProp.State.State>` instance\n        State number 1 for the Tube\n    State2 : :class:`State <CoolProp.State.State>` instance\n        State number 2 for the Tube\n    fixed : int, ``1`` or ``2``\n        Which node is fixed\n    L : float\n        Length of tube [m]\n    ID : float \n        Internal diameter of tube [m]\n    OD : float, optional\n        Outer diameter of tube [m], not used if fixed wall temperature\n    HTModel : `'Twall'` or [other models] , optional\n        Key for what type of model is used for the heat transfer\n    Tmean : float, optional\n        Mean fluid temperature for evaluation of fluid properties [K]\n    T_wall : float, optional\n        Temperature of wall [K]\n    Q_add : float, optional\n        Additional amount of heat that will be added to the fluid in the tube [kW]\n        This term is not added to the amount of heat transfer returned from this function\n    alpha : float, optional\n        The heat transfer coefficient [kW/m2/K].  If not provided, calculated from correlations\n        \n    Returns\n    -------\n    Q : float\n        The amount of heat transfer [W], not including ``Q_add``\n        \n    ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_7IsothermalWallTube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mdot = 0;
  PyObject *__pyx_v_State1 = 0;
  PyObject *__pyx_v_State2 = 0;
  PyObject *__pyx_v_fixed = 0;
  PyObject *__pyx_v_L = 0;
  PyObject *__pyx_v_ID = 0;
  PyObject *__pyx_v_OD = 0;
  PyObject *__pyx_v_HTModel = 0;
  PyObject *__pyx_v_Tmean = 0;
  PyObject *__pyx_v_T_wall = 0;
  PyObject *__pyx_v_Q_add = 0;
  PyObject *__pyx_v_alpha = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsothermalWallTube (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mdot,&__pyx_n_s_State1,&__pyx_n_s_State2,&__pyx_n_s_fixed,&__pyx_n_s_L,&__pyx_n_s_ID,&__pyx_n_s_OD,&__pyx_n_s_HTModel,&__pyx_n_s_Tmean,&__pyx_n_s_T_wall,&__pyx_n_s_Q_add,&__pyx_n_s_alpha,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)__pyx_n_s_Twall);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)__pyx_float_0_0);
    values[11] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mdot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fixed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_OD);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_HTModel);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tmean);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_T_wall);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Q_add);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "IsothermalWallTube") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mdot = values[0];
    __pyx_v_State1 = values[1];
    __pyx_v_State2 = values[2];
    __pyx_v_fixed = values[3];
    __pyx_v_L = values[4];
    __pyx_v_ID = values[5];
    __pyx_v_OD = values[6];
    __pyx_v_HTModel = values[7];
    __pyx_v_Tmean = values[8];
    __pyx_v_T_wall = values[9];
    __pyx_v_Q_add = values[10];
    __pyx_v_alpha = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IsothermalWallTube", 0, 6, 12, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsothermalWallTube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_6IsothermalWallTube(__pyx_self, __pyx_v_mdot, __pyx_v_State1, __pyx_v_State2, __pyx_v_fixed, __pyx_v_L, __pyx_v_ID, __pyx_v_OD, __pyx_v_HTModel, __pyx_v_Tmean, __pyx_v_T_wall, __pyx_v_Q_add, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_6IsothermalWallTube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mdot, PyObject *__pyx_v_State1, PyObject *__pyx_v_State2, PyObject *__pyx_v_fixed, PyObject *__pyx_v_L, PyObject *__pyx_v_ID, PyObject *__pyx_v_OD, PyObject *__pyx_v_HTModel, PyObject *__pyx_v_Tmean, PyObject *__pyx_v_T_wall, PyObject *__pyx_v_Q_add, PyObject *__pyx_v_alpha) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsothermalWallTube __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("IsothermalWallTube", 0);
  __Pyx_TraceCall("IsothermalWallTube", __pyx_f[0], 161);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.OD = __pyx_v_OD;
  __pyx_t_2.HTModel = __pyx_v_HTModel;
  __pyx_t_2.Tmean = __pyx_v_Tmean;
  __pyx_t_2.T_wall = __pyx_v_T_wall;
  __pyx_t_2.Q_add = __pyx_v_Q_add;
  __pyx_t_2.alpha = __pyx_v_alpha;
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_IsothermalWallTube(__pyx_v_mdot, __pyx_v_State1, __pyx_v_State2, __pyx_v_fixed, __pyx_v_L, __pyx_v_ID, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsothermalWallTube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":301
 *         return Q/1000.0
 * 
 * def rebuildValveModel(d):             # <<<<<<<<<<<<<<
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_9rebuildValveModel(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_8rebuildValveModel[] = "rebuildValveModel(d)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_11flow_models_9rebuildValveModel = {"rebuildValveModel", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_9rebuildValveModel, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_8rebuildValveModel};
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_9rebuildValveModel(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rebuildValveModel (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_8rebuildValveModel(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_8rebuildValveModel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_VM = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("rebuildValveModel", 0);
  __Pyx_TraceCall("rebuildValveModel", __pyx_f[0], 301);

  /* "PDSim\flow\flow_models.pyx":302
 * 
 * def rebuildValveModel(d):
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),             # <<<<<<<<<<<<<<
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":303
 * def rebuildValveModel(d):
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),             # <<<<<<<<<<<<<<
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":304
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),             # <<<<<<<<<<<<<<
 *                           d.pop('key_up'),d.pop('key_down'))
 *     for item in d:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":305
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))             # <<<<<<<<<<<<<<
 *     for item in d:
 *         setattr(VM,item,d[item])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":302
 * 
 * def rebuildValveModel(d):
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),             # <<<<<<<<<<<<<<
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),
 */
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_VM = ((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "PDSim\flow\flow_models.pyx":306
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))
 *     for item in d:             # <<<<<<<<<<<<<<
 *         setattr(VM,item,d[item])
 *     return VM
 */
  if (likely(PyList_CheckExact(__pyx_v_d)) || PyTuple_CheckExact(__pyx_v_d)) {
    __pyx_t_12 = __pyx_v_d; __Pyx_INCREF(__pyx_t_12); __pyx_t_13 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_d); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_14 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_12))) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_14(__pyx_t_12);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim\flow\flow_models.pyx":307
 *                           d.pop('key_up'),d.pop('key_down'))
 *     for item in d:
 *         setattr(VM,item,d[item])             # <<<<<<<<<<<<<<
 *     return VM
 * 
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_v_item); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = PyObject_SetAttr(((PyObject *)__pyx_v_VM), __pyx_v_item, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PDSim\flow\flow_models.pyx":306
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))
 *     for item in d:             # <<<<<<<<<<<<<<
 *         setattr(VM,item,d[item])
 *     return VM
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PDSim\flow\flow_models.pyx":308
 *     for item in d:
 *         setattr(VM,item,d[item])
 *     return VM             # <<<<<<<<<<<<<<
 * 
 * cdef class ValveModel(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_VM));
  __pyx_r = ((PyObject *)__pyx_v_VM);
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":301
 *         return Q/1000.0
 * 
 * def rebuildValveModel(d):             # <<<<<<<<<<<<<<
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PDSim.flow.flow_models.rebuildValveModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_VM);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":398
 *                    rho_valve=cython.double,E=cython.double,x_stopper=cython.double,
 *                    key_up=cython.bytes,key_down=cython.bytes)
 *     def __init__(self, d_valve, d_port, C_D, h_valve, a_valve,             # <<<<<<<<<<<<<<
 *                  l_valve, rho_valve, E, x_stopper, key_up, key_down):
 * 
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_d_valve;
  double __pyx_v_d_port;
  double __pyx_v_C_D;
  double __pyx_v_h_valve;
  double __pyx_v_a_valve;
  double __pyx_v_l_valve;
  double __pyx_v_rho_valve;
  double __pyx_v_E;
  double __pyx_v_x_stopper;
  PyObject *__pyx_v_key_up = 0;
  PyObject *__pyx_v_key_down = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d_valve,&__pyx_n_s_d_port,&__pyx_n_s_C_D,&__pyx_n_s_h_valve,&__pyx_n_s_a_valve,&__pyx_n_s_l_valve,&__pyx_n_s_rho_valve,&__pyx_n_s_E,&__pyx_n_s_x_stopper,&__pyx_n_s_key_up,&__pyx_n_s_key_down,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d_valve)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d_port)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_D)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h_valve)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a_valve)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l_valve)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_valve)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_E)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_stopper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key_up)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_d_valve = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_d_valve == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_d_port = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_d_port == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_C_D = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_C_D == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h_valve = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_h_valve == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_a_valve = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_a_valve == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_l_valve = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_l_valve == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rho_valve = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_rho_valve == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_E = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_E == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_stopper = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_x_stopper == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_key_up = ((PyObject*)values[9]);
    __pyx_v_key_down = ((PyObject*)values[10]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key_up), (&PyBytes_Type), 1, "key_up", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key_down), (&PyBytes_Type), 1, "key_down", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel___init__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), __pyx_v_d_valve, __pyx_v_d_port, __pyx_v_C_D, __pyx_v_h_valve, __pyx_v_a_valve, __pyx_v_l_valve, __pyx_v_rho_valve, __pyx_v_E, __pyx_v_x_stopper, __pyx_v_key_up, __pyx_v_key_down);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel___init__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, double __pyx_v_d_valve, double __pyx_v_d_port, double __pyx_v_C_D, double __pyx_v_h_valve, double __pyx_v_a_valve, double __pyx_v_l_valve, double __pyx_v_rho_valve, double __pyx_v_E, double __pyx_v_x_stopper, PyObject *__pyx_v_key_up, PyObject *__pyx_v_key_down) {
  double __pyx_v_I;
  double __pyx_v_k_valve;
  double __pyx_v_m_eff;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 398);

  /* "PDSim\flow\flow_models.pyx":402
 * 
 * 
 *         I=(d_valve*h_valve**3)/12  #Moment of Intertia for discharge valve,[m^4]             # <<<<<<<<<<<<<<
 *         k_valve=(6*E*I)/(a_valve**2*(3*l_valve-a_valve))    #Valve stiffness
 *         m_eff=(1/3)*rho_valve*l_valve*d_valve*h_valve      #Effective mass of valve reeds
 */
  __pyx_v_I = ((__pyx_v_d_valve * pow(__pyx_v_h_valve, 3.0)) / 12.0);

  /* "PDSim\flow\flow_models.pyx":403
 * 
 *         I=(d_valve*h_valve**3)/12  #Moment of Intertia for discharge valve,[m^4]
 *         k_valve=(6*E*I)/(a_valve**2*(3*l_valve-a_valve))    #Valve stiffness             # <<<<<<<<<<<<<<
 *         m_eff=(1/3)*rho_valve*l_valve*d_valve*h_valve      #Effective mass of valve reeds
 * 
 */
  __pyx_t_1 = ((6.0 * __pyx_v_E) * __pyx_v_I);
  __pyx_t_2 = (pow(__pyx_v_a_valve, 2.0) * ((3.0 * __pyx_v_l_valve) - __pyx_v_a_valve));
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_k_valve = (__pyx_t_1 / __pyx_t_2);

  /* "PDSim\flow\flow_models.pyx":404
 *         I=(d_valve*h_valve**3)/12  #Moment of Intertia for discharge valve,[m^4]
 *         k_valve=(6*E*I)/(a_valve**2*(3*l_valve-a_valve))    #Valve stiffness
 *         m_eff=(1/3)*rho_valve*l_valve*d_valve*h_valve      #Effective mass of valve reeds             # <<<<<<<<<<<<<<
 * 
 *         self.E = E
 */
  __pyx_v_m_eff = (((((1.0 / 3.0) * __pyx_v_rho_valve) * __pyx_v_l_valve) * __pyx_v_d_valve) * __pyx_v_h_valve);

  /* "PDSim\flow\flow_models.pyx":406
 *         m_eff=(1/3)*rho_valve*l_valve*d_valve*h_valve      #Effective mass of valve reeds
 * 
 *         self.E = E             # <<<<<<<<<<<<<<
 *         self.rho_valve = rho_valve
 *         self.a_valve = a_valve
 */
  __pyx_v_self->E = __pyx_v_E;

  /* "PDSim\flow\flow_models.pyx":407
 * 
 *         self.E = E
 *         self.rho_valve = rho_valve             # <<<<<<<<<<<<<<
 *         self.a_valve = a_valve
 *         self.l_valve = l_valve
 */
  __pyx_v_self->rho_valve = __pyx_v_rho_valve;

  /* "PDSim\flow\flow_models.pyx":408
 *         self.E = E
 *         self.rho_valve = rho_valve
 *         self.a_valve = a_valve             # <<<<<<<<<<<<<<
 *         self.l_valve = l_valve
 *         self.h_valve = h_valve
 */
  __pyx_v_self->a_valve = __pyx_v_a_valve;

  /* "PDSim\flow\flow_models.pyx":409
 *         self.rho_valve = rho_valve
 *         self.a_valve = a_valve
 *         self.l_valve = l_valve             # <<<<<<<<<<<<<<
 *         self.h_valve = h_valve
 *         self.d_valve = d_valve
 */
  __pyx_v_self->l_valve = __pyx_v_l_valve;

  /* "PDSim\flow\flow_models.pyx":410
 *         self.a_valve = a_valve
 *         self.l_valve = l_valve
 *         self.h_valve = h_valve             # <<<<<<<<<<<<<<
 *         self.d_valve = d_valve
 *         self.d_port = d_port
 */
  __pyx_v_self->h_valve = __pyx_v_h_valve;

  /* "PDSim\flow\flow_models.pyx":411
 *         self.l_valve = l_valve
 *         self.h_valve = h_valve
 *         self.d_valve = d_valve             # <<<<<<<<<<<<<<
 *         self.d_port = d_port
 *         self.A_valve = pi*d_valve**2/4.0
 */
  __pyx_v_self->d_valve = __pyx_v_d_valve;

  /* "PDSim\flow\flow_models.pyx":412
 *         self.h_valve = h_valve
 *         self.d_valve = d_valve
 *         self.d_port = d_port             # <<<<<<<<<<<<<<
 *         self.A_valve = pi*d_valve**2/4.0
 *         self.A_port = pi*d_port**2/4.0
 */
  __pyx_v_self->d_port = __pyx_v_d_port;

  /* "PDSim\flow\flow_models.pyx":413
 *         self.d_valve = d_valve
 *         self.d_port = d_port
 *         self.A_valve = pi*d_valve**2/4.0             # <<<<<<<<<<<<<<
 *         self.A_port = pi*d_port**2/4.0
 *         self.m_eff = m_eff
 */
  __pyx_v_self->A_valve = ((M_PI * pow(__pyx_v_d_valve, 2.0)) / 4.0);

  /* "PDSim\flow\flow_models.pyx":414
 *         self.d_port = d_port
 *         self.A_valve = pi*d_valve**2/4.0
 *         self.A_port = pi*d_port**2/4.0             # <<<<<<<<<<<<<<
 *         self.m_eff = m_eff
 *         self.C_D = C_D
 */
  __pyx_v_self->A_port = ((M_PI * pow(__pyx_v_d_port, 2.0)) / 4.0);

  /* "PDSim\flow\flow_models.pyx":415
 *         self.A_valve = pi*d_valve**2/4.0
 *         self.A_port = pi*d_port**2/4.0
 *         self.m_eff = m_eff             # <<<<<<<<<<<<<<
 *         self.C_D = C_D
 *         self.k_valve = k_valve
 */
  __pyx_v_self->m_eff = __pyx_v_m_eff;

  /* "PDSim\flow\flow_models.pyx":416
 *         self.A_port = pi*d_port**2/4.0
 *         self.m_eff = m_eff
 *         self.C_D = C_D             # <<<<<<<<<<<<<<
 *         self.k_valve = k_valve
 *         self.x_stopper = x_stopper
 */
  __pyx_v_self->C_D = __pyx_v_C_D;

  /* "PDSim\flow\flow_models.pyx":417
 *         self.m_eff = m_eff
 *         self.C_D = C_D
 *         self.k_valve = k_valve             # <<<<<<<<<<<<<<
 *         self.x_stopper = x_stopper
 *         self.key_up = key_up
 */
  __pyx_v_self->k_valve = __pyx_v_k_valve;

  /* "PDSim\flow\flow_models.pyx":418
 *         self.C_D = C_D
 *         self.k_valve = k_valve
 *         self.x_stopper = x_stopper             # <<<<<<<<<<<<<<
 *         self.key_up = key_up
 *         self.key_down = key_down
 */
  __pyx_v_self->x_stopper = __pyx_v_x_stopper;

  /* "PDSim\flow\flow_models.pyx":419
 *         self.k_valve = k_valve
 *         self.x_stopper = x_stopper
 *         self.key_up = key_up             # <<<<<<<<<<<<<<
 *         self.key_down = key_down
 *         self.x_tr = 0.25*(self.d_port**2/self.d_valve)
 */
  __Pyx_INCREF(__pyx_v_key_up);
  __Pyx_GIVEREF(__pyx_v_key_up);
  __Pyx_GOTREF(__pyx_v_self->key_up);
  __Pyx_DECREF(__pyx_v_self->key_up);
  __pyx_v_self->key_up = __pyx_v_key_up;

  /* "PDSim\flow\flow_models.pyx":420
 *         self.x_stopper = x_stopper
 *         self.key_up = key_up
 *         self.key_down = key_down             # <<<<<<<<<<<<<<
 *         self.x_tr = 0.25*(self.d_port**2/self.d_valve)
 * 
 */
  __Pyx_INCREF(__pyx_v_key_down);
  __Pyx_GIVEREF(__pyx_v_key_down);
  __Pyx_GOTREF(__pyx_v_self->key_down);
  __Pyx_DECREF(__pyx_v_self->key_down);
  __pyx_v_self->key_down = __pyx_v_key_down;

  /* "PDSim\flow\flow_models.pyx":421
 *         self.key_up = key_up
 *         self.key_down = key_down
 *         self.x_tr = 0.25*(self.d_port**2/self.d_valve)             # <<<<<<<<<<<<<<
 * 
 *         self. xv = empty_arraym(2)
 */
  __pyx_t_2 = pow(__pyx_v_self->d_port, 2.0);
  if (unlikely(__pyx_v_self->d_valve == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->x_tr = (0.25 * (__pyx_t_2 / __pyx_v_self->d_valve));

  /* "PDSim\flow\flow_models.pyx":423
 *         self.x_tr = 0.25*(self.d_port**2/self.d_valve)
 * 
 *         self. xv = empty_arraym(2)             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_States(self, Core):
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_5PDSim_4misc_9datatypes_empty_arraym(2, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->xv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->xv));
  __pyx_v_self->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PDSim\flow\flow_models.pyx":398
 *                    rho_valve=cython.double,E=cython.double,x_stopper=cython.double,
 *                    key_up=cython.bytes,key_down=cython.bytes)
 *     def __init__(self, d_valve, d_port, C_D, h_valve, a_valve,             # <<<<<<<<<<<<<<
 *                  l_valve, rho_valve, E, x_stopper, key_up, key_down):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":425
 *         self. xv = empty_arraym(2)
 * 
 *     cpdef get_States(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Core is the main model core, it contains information that
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3get_States(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_get_States(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_exists_keys = NULL;
  PyObject *__pyx_v_Tubes_Nodes = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_Statevar = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_States", 0);
  __Pyx_TraceCall("get_States", __pyx_f[0], 425);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_States); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3get_States)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_Core); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_Core);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_Core);
        __Pyx_GIVEREF(__pyx_v_Core);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":430
 *         is needed for the flow models
 *         """
 *         exists_keys=Core.CVs.exists_keys             # <<<<<<<<<<<<<<
 *         Tubes_Nodes=Core.Tubes.Nodes
 *         for key, Statevar in [(self.key_up,'State_up'),(self.key_down,'State_down')]:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exists_keys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_exists_keys = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":431
 *         """
 *         exists_keys=Core.CVs.exists_keys
 *         Tubes_Nodes=Core.Tubes.Nodes             # <<<<<<<<<<<<<<
 *         for key, Statevar in [(self.key_up,'State_up'),(self.key_down,'State_down')]:
 *             ## Update the pointers to the states for the ends of the flow path
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Nodes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Tubes_Nodes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":432
 *         exists_keys=Core.CVs.exists_keys
 *         Tubes_Nodes=Core.Tubes.Nodes
 *         for key, Statevar in [(self.key_up,'State_up'),(self.key_down,'State_down')]:             # <<<<<<<<<<<<<<
 *             ## Update the pointers to the states for the ends of the flow path
 *             if key in exists_keys:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->key_up);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->key_up);
  __Pyx_GIVEREF(__pyx_v_self->key_up);
  __Pyx_INCREF(__pyx_n_s_State_up);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_State_up);
  __Pyx_GIVEREF(__pyx_n_s_State_up);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->key_down);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->key_down);
  __Pyx_GIVEREF(__pyx_v_self->key_down);
  __Pyx_INCREF(__pyx_n_s_State_down);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_State_down);
  __Pyx_GIVEREF(__pyx_n_s_State_down);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_6 >= 2) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_Statevar, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "PDSim\flow\flow_models.pyx":434
 *         for key, Statevar in [(self.key_up,'State_up'),(self.key_down,'State_down')]:
 *             ## Update the pointers to the states for the ends of the flow path
 *             if key in exists_keys:             # <<<<<<<<<<<<<<
 *                 setattr(self,Statevar,Core.CVs[key].State)
 *             elif key in Tubes_Nodes:
 */
    __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_key, __pyx_v_exists_keys, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "PDSim\flow\flow_models.pyx":435
 *             ## Update the pointers to the states for the ends of the flow path
 *             if key in exists_keys:
 *                 setattr(self,Statevar,Core.CVs[key].State)             # <<<<<<<<<<<<<<
 *             elif key in Tubes_Nodes:
 *                 setattr(self,Statevar,Tubes_Nodes[key])
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_State); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_Statevar, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }

    /* "PDSim\flow\flow_models.pyx":436
 *             if key in exists_keys:
 *                 setattr(self,Statevar,Core.CVs[key].State)
 *             elif key in Tubes_Nodes:             # <<<<<<<<<<<<<<
 *                 setattr(self,Statevar,Tubes_Nodes[key])
 * 
 */
    __pyx_t_8 = (__Pyx_PySequence_Contains(__pyx_v_key, __pyx_v_Tubes_Nodes, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {

      /* "PDSim\flow\flow_models.pyx":437
 *                 setattr(self,Statevar,Core.CVs[key].State)
 *             elif key in Tubes_Nodes:
 *                 setattr(self,Statevar,Tubes_Nodes[key])             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
      __pyx_t_3 = PyObject_GetItem(__pyx_v_Tubes_Nodes, __pyx_v_key); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_Statevar, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "PDSim\flow\flow_models.pyx":432
 *         exists_keys=Core.CVs.exists_keys
 *         Tubes_Nodes=Core.Tubes.Nodes
 *         for key, Statevar in [(self.key_up,'State_up'),(self.key_down,'State_down')]:             # <<<<<<<<<<<<<<
 *             ## Update the pointers to the states for the ends of the flow path
 *             if key in exists_keys:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":425
 *         self. xv = empty_arraym(2)
 * 
 *     cpdef get_States(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Core is the main model core, it contains information that
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.get_States", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exists_keys);
  __Pyx_XDECREF(__pyx_v_Tubes_Nodes);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_Statevar);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3get_States(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_2get_States[] = "ValveModel.get_States(self, Core)\n\n        Core is the main model core, it contains information that \n        is needed for the flow models\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3get_States(PyObject *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_States (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2get_States(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_Core));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2get_States(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_States", 0);
  __Pyx_TraceCall("get_States", __pyx_f[0], 425);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_get_States(__pyx_v_self, __pyx_v_Core, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.get_States", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":440
 * 
 *     @cython.cdivision(True)
 *     cdef _pressure_dominant(self, arraym f, double x, double xdot, double rho, double V, double deltap):             # <<<<<<<<<<<<<<
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 */

static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__pressure_dominant(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_f, double __pyx_v_x, double __pyx_v_xdot, double __pyx_v_rho, double __pyx_v_V, double __pyx_v_deltap) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("_pressure_dominant", 0);
  __Pyx_TraceCall("_pressure_dominant", __pyx_f[0], 440);

  /* "PDSim\flow\flow_models.pyx":441
 *     @cython.cdivision(True)
 *     cdef _pressure_dominant(self, arraym f, double x, double xdot, double rho, double V, double deltap):
 *         f.set_index(0, xdot) #dxdt             # <<<<<<<<<<<<<<
 *         if abs(V-xdot) > 0:
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 */
  ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 0, __pyx_v_xdot, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":442
 *     cdef _pressure_dominant(self, arraym f, double x, double xdot, double rho, double V, double deltap):
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:             # <<<<<<<<<<<<<<
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         else:
 */
  __pyx_t_1 = ((fabs((__pyx_v_V - __pyx_v_xdot)) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":443
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt             # <<<<<<<<<<<<<<
 *         else:
 *             f.set_index(1, (deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 1, ((((((((((__pyx_v_V - __pyx_v_xdot) / fabs((__pyx_v_V - __pyx_v_xdot))) * 0.5) * __pyx_v_self->C_D) * __pyx_v_rho) * pow((__pyx_v_V - __pyx_v_xdot), 2.0)) * __pyx_v_self->A_valve) + (__pyx_v_deltap * __pyx_v_self->A_valve)) - (__pyx_v_self->k_valve * __pyx_v_x)) / __pyx_v_self->m_eff), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":445
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         else:
 *             f.set_index(1, (deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 1, (((__pyx_v_deltap * __pyx_v_self->A_valve) - (__pyx_v_self->k_valve * __pyx_v_x)) / __pyx_v_self->m_eff), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":446
 *         else:
 *             f.set_index(1, (deltap*self.A_valve-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         return             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":440
 * 
 *     @cython.cdivision(True)
 *     cdef _pressure_dominant(self, arraym f, double x, double xdot, double rho, double V, double deltap):             # <<<<<<<<<<<<<<
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel._pressure_dominant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":449
 * 
 *     @cython.cdivision(True)
 *     cdef _flux_dominant(self, arraym f, double x, double xdot, double rho, double V):             # <<<<<<<<<<<<<<
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 */

static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__flux_dominant(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_f, double __pyx_v_x, double __pyx_v_xdot, double __pyx_v_rho, double __pyx_v_V) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("_flux_dominant", 0);
  __Pyx_TraceCall("_flux_dominant", __pyx_f[0], 449);

  /* "PDSim\flow\flow_models.pyx":450
 *     @cython.cdivision(True)
 *     cdef _flux_dominant(self, arraym f, double x, double xdot, double rho, double V):
 *         f.set_index(0, xdot) #dxdt             # <<<<<<<<<<<<<<
 *         if abs(V-xdot) > 0:
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+(V-xdot)/abs(V-xdot)*rho*(V-xdot)**2*self.A_port-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 */
  ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 0, __pyx_v_xdot, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":451
 *     cdef _flux_dominant(self, arraym f, double x, double xdot, double rho, double V):
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:             # <<<<<<<<<<<<<<
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+(V-xdot)/abs(V-xdot)*rho*(V-xdot)**2*self.A_port-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         else:
 */
  __pyx_t_1 = ((fabs((__pyx_v_V - __pyx_v_xdot)) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":452
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+(V-xdot)/abs(V-xdot)*rho*(V-xdot)**2*self.A_port-self.k_valve*x)/(self.m_eff)) #d(xdot)dt             # <<<<<<<<<<<<<<
 *         else:
 *             f.set_index(1, (-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 1, ((((((((((__pyx_v_V - __pyx_v_xdot) / fabs((__pyx_v_V - __pyx_v_xdot))) * 0.5) * __pyx_v_self->C_D) * __pyx_v_rho) * pow((__pyx_v_V - __pyx_v_xdot), 2.0)) * __pyx_v_self->A_valve) + (((((__pyx_v_V - __pyx_v_xdot) / fabs((__pyx_v_V - __pyx_v_xdot))) * __pyx_v_rho) * pow((__pyx_v_V - __pyx_v_xdot), 2.0)) * __pyx_v_self->A_port)) - (__pyx_v_self->k_valve * __pyx_v_x)) / __pyx_v_self->m_eff), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":454
 *             f.set_index(1, ((V-xdot)/abs(V-xdot)*0.5*self.C_D*rho*(V-xdot)**2*self.A_valve+(V-xdot)/abs(V-xdot)*rho*(V-xdot)**2*self.A_port-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         else:
 *             f.set_index(1, (-self.k_valve*x)/(self.m_eff)) #d(xdot)dt             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->set_index(__pyx_v_f, 1, (((-__pyx_v_self->k_valve) * __pyx_v_x) / __pyx_v_self->m_eff), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":455
 *         else:
 *             f.set_index(1, (-self.k_valve*x)/(self.m_eff)) #d(xdot)dt
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_xv(self, arraym xv):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":449
 * 
 *     @cython.cdivision(True)
 *     cdef _flux_dominant(self, arraym f, double x, double xdot, double rho, double V):             # <<<<<<<<<<<<<<
 *         f.set_index(0, xdot) #dxdt
 *         if abs(V-xdot) > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel._flux_dominant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":457
 *         return
 * 
 *     cpdef set_xv(self, arraym xv):             # <<<<<<<<<<<<<<
 *         self.xv = xv.copy()
 *         #If valve opening is less than zero, just use zero (the valve is closed)
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5set_xv(PyObject *__pyx_v_self, PyObject *__pyx_v_xv); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_set_xv(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_xv, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("set_xv", 0);
  __Pyx_TraceCall("set_xv", __pyx_f[0], 457);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_xv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5set_xv)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_xv)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_xv));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_xv));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_xv));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":458
 * 
 *     cpdef set_xv(self, arraym xv):
 *         self.xv = xv.copy()             # <<<<<<<<<<<<<<
 *         #If valve opening is less than zero, just use zero (the valve is closed)
 *         if self.xv.get_index(0) < -1e-15 and self.xv.get_index(1) < 1e-15:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_xv->__pyx_vtab)->copy(__pyx_v_xv, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->xv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->xv));
  __pyx_v_self->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":460
 *         self.xv = xv.copy()
 *         #If valve opening is less than zero, just use zero (the valve is closed)
 *         if self.xv.get_index(0) < -1e-15 and self.xv.get_index(1) < 1e-15:             # <<<<<<<<<<<<<<
 *             #print 'closed, desired position is',self.xv.get_index(0),' and velocity is',self.xv.get_index(1)
 *             self.xv.set_index(0, 0.0)
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = ((__pyx_t_7 < -1e-15) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 1, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = ((__pyx_t_7 < 1e-15) != 0);
  __pyx_t_6 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\flow\flow_models.pyx":462
 *         if self.xv.get_index(0) < -1e-15 and self.xv.get_index(1) < 1e-15:
 *             #print 'closed, desired position is',self.xv.get_index(0),' and velocity is',self.xv.get_index(1)
 *             self.xv.set_index(0, 0.0)             # <<<<<<<<<<<<<<
 *             self.xv.set_index(1, 0.0)
 *         #If it predicts a valve opening greater than max opening, just use the max opening
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->set_index(__pyx_v_self->xv, 0, 0.0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PDSim\flow\flow_models.pyx":463
 *             #print 'closed, desired position is',self.xv.get_index(0),' and velocity is',self.xv.get_index(1)
 *             self.xv.set_index(0, 0.0)
 *             self.xv.set_index(1, 0.0)             # <<<<<<<<<<<<<<
 *         #If it predicts a valve opening greater than max opening, just use the max opening
 *         elif self.xv.get_index(0) > self.x_stopper:
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->set_index(__pyx_v_self->xv, 1, 0.0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "PDSim\flow\flow_models.pyx":465
 *             self.xv.set_index(1, 0.0)
 *         #If it predicts a valve opening greater than max opening, just use the max opening
 *         elif self.xv.get_index(0) > self.x_stopper:             # <<<<<<<<<<<<<<
 *             self.xv.set_index(0, self.x_stopper)
 *             self.xv.set_index(1, 0.0)
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((__pyx_t_7 > __pyx_v_self->x_stopper) != 0);
  if (__pyx_t_6) {

    /* "PDSim\flow\flow_models.pyx":466
 *         #If it predicts a valve opening greater than max opening, just use the max opening
 *         elif self.xv.get_index(0) > self.x_stopper:
 *             self.xv.set_index(0, self.x_stopper)             # <<<<<<<<<<<<<<
 *             self.xv.set_index(1, 0.0)
 *         print self.xv,'set_xv',xv
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->set_index(__pyx_v_self->xv, 0, __pyx_v_self->x_stopper, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PDSim\flow\flow_models.pyx":467
 *         elif self.xv.get_index(0) > self.x_stopper:
 *             self.xv.set_index(0, self.x_stopper)
 *             self.xv.set_index(1, 0.0)             # <<<<<<<<<<<<<<
 *         print self.xv,'set_xv',xv
 * 
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->set_index(__pyx_v_self->xv, 1, 0.0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":468
 *             self.xv.set_index(0, self.x_stopper)
 *             self.xv.set_index(1, 0.0)
 *         print self.xv,'set_xv',xv             # <<<<<<<<<<<<<<
 * 
 *     cpdef double A(self):
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->xv));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->xv));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->xv));
  __Pyx_INCREF(__pyx_n_s_set_xv);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_set_xv);
  __Pyx_GIVEREF(__pyx_n_s_set_xv);
  __Pyx_INCREF(((PyObject *)__pyx_v_xv));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_xv));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_xv));
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":457
 *         return
 * 
 *     cpdef set_xv(self, arraym xv):             # <<<<<<<<<<<<<<
 *         self.xv = xv.copy()
 *         #If valve opening is less than zero, just use zero (the valve is closed)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.set_xv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5set_xv(PyObject *__pyx_v_self, PyObject *__pyx_v_xv); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_4set_xv[] = "ValveModel.set_xv(self, arraym xv)";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5set_xv(PyObject *__pyx_v_self, PyObject *__pyx_v_xv) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_xv (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xv), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "xv", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4set_xv(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_xv));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4set_xv(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_xv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("set_xv", 0);
  __Pyx_TraceCall("set_xv", __pyx_f[0], 457);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_set_xv(__pyx_v_self, __pyx_v_xv, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.set_xv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":470
 *         print self.xv,'set_xv',xv
 * 
 *     cpdef double A(self):             # <<<<<<<<<<<<<<
 *         if self.xv is None:
 *             print 'self.xv is None'
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_A(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_x;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("A", 0);
  __Pyx_TraceCall("A", __pyx_f[0], 470);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":471
 * 
 *     cpdef double A(self):
 *         if self.xv is None:             # <<<<<<<<<<<<<<
 *             print 'self.xv is None'
 *         cdef double x = self.xv.get_index(0)
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_self->xv) == Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\flow\flow_models.pyx":472
 *     cpdef double A(self):
 *         if self.xv is None:
 *             print 'self.xv is None'             # <<<<<<<<<<<<<<
 *         cdef double x = self.xv.get_index(0)
 *         if x >= self.x_tr:
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_self_xv_is_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":473
 *         if self.xv is None:
 *             print 'self.xv is None'
 *         cdef double x = self.xv.get_index(0)             # <<<<<<<<<<<<<<
 *         if x >= self.x_tr:
 *             return self.A_port
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_x = __pyx_t_5;

  /* "PDSim\flow\flow_models.pyx":474
 *             print 'self.xv is None'
 *         cdef double x = self.xv.get_index(0)
 *         if x >= self.x_tr:             # <<<<<<<<<<<<<<
 *             return self.A_port
 *         else:
 */
  __pyx_t_7 = ((__pyx_v_x >= __pyx_v_self->x_tr) != 0);
  if (__pyx_t_7) {

    /* "PDSim\flow\flow_models.pyx":475
 *         cdef double x = self.xv.get_index(0)
 *         if x >= self.x_tr:
 *             return self.A_port             # <<<<<<<<<<<<<<
 *         else:
 *             return pi*x*self.d_valve
 */
    __pyx_r = __pyx_v_self->A_port;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":477
 *             return self.A_port
 *         else:
 *             return pi*x*self.d_valve             # <<<<<<<<<<<<<<
 * 
 *     cpdef double flow_velocity(self, State State_up, State State_down):
 */
    __pyx_r = ((M_PI * __pyx_v_x) * __pyx_v_self->d_valve);
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":470
 *         print self.xv,'set_xv',xv
 * 
 *     cpdef double A(self):             # <<<<<<<<<<<<<<
 *         if self.xv is None:
 *             print 'self.xv is None'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("PDSim.flow.flow_models.ValveModel.A", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_6A[] = "ValveModel.A(self) -> double";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("A", 0);
  __Pyx_TraceCall("A", __pyx_f[0], 470);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_A(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.A", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":479
 *             return pi*x*self.d_valve
 * 
 *     cpdef double flow_velocity(self, State State_up, State State_down):             # <<<<<<<<<<<<<<
 *         """
 *         For a given set of states, and a known valve lift, first
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9flow_velocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_10ValveModel_flow_velocity(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, int __pyx_skip_dispatch) {
  double __pyx_v_A;
  double __pyx_v_x;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("flow_velocity", 0);
  __Pyx_TraceCall("flow_velocity", __pyx_f[0], 479);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flow_velocity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9flow_velocity)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_State_up));
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_State_up));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_State_up));
      __Pyx_INCREF(((PyObject *)__pyx_v_State_down));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_State_down));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_State_down));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":485
 *         calculate the flow velocity
 *         """
 *         cdef double A = self.A(), x = self.xv.get_index(0)             # <<<<<<<<<<<<<<
 *         if A > 0:
 *             if x > self.x_tr:
 */
  __pyx_v_A = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->A(__pyx_v_self, 0);
  __pyx_t_7 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_x = __pyx_t_7;

  /* "PDSim\flow\flow_models.pyx":486
 *         """
 *         cdef double A = self.A(), x = self.xv.get_index(0)
 *         if A > 0:             # <<<<<<<<<<<<<<
 *             if x > self.x_tr:
 *                 return IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)
 */
  __pyx_t_8 = ((__pyx_v_A > 0.0) != 0);
  if (__pyx_t_8) {

    /* "PDSim\flow\flow_models.pyx":487
 *         cdef double A = self.A(), x = self.xv.get_index(0)
 *         if A > 0:
 *             if x > self.x_tr:             # <<<<<<<<<<<<<<
 *                 return IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)
 *             else:
 */
    __pyx_t_8 = ((__pyx_v_x > __pyx_v_self->x_tr) != 0);
    if (__pyx_t_8) {

      /* "PDSim\flow\flow_models.pyx":488
 *         if A > 0:
 *             if x > self.x_tr:
 *                 return IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)             # <<<<<<<<<<<<<<
 *             else:
 *                 return x/self.x_tr*IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)
 */
      __pyx_t_9.__pyx_n = 1;
      __pyx_t_9.other_output = OUTPUT_VELOCITY;
      __pyx_t_7 = __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(__pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, 0, &__pyx_t_9); 
      __pyx_r = __pyx_t_7;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "PDSim\flow\flow_models.pyx":490
 *                 return IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)
 *             else:
 *                 return x/self.x_tr*IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)             # <<<<<<<<<<<<<<
 *         else:
 *             return 0.0
 */
      if (unlikely(__pyx_v_self->x_tr == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_9.__pyx_n = 1;
      __pyx_t_9.other_output = OUTPUT_VELOCITY;
      __pyx_t_7 = __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(__pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, 0, &__pyx_t_9); 
      __pyx_r = ((__pyx_v_x / __pyx_v_self->x_tr) * __pyx_t_7);
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":492
 *                 return x/self.x_tr*IsentropicNozzle(A, State_up, State_down, OUTPUT_VELOCITY)
 *         else:
 *             return 0.0             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
    __pyx_r = 0.0;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":479
 *             return pi*x*self.d_valve
 * 
 *     cpdef double flow_velocity(self, State State_up, State State_down):             # <<<<<<<<<<<<<<
 *         """
 *         For a given set of states, and a known valve lift, first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("PDSim.flow.flow_models.ValveModel.flow_velocity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9flow_velocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_8flow_velocity[] = "ValveModel.flow_velocity(self, State State_up, State State_down) -> double\n\n        For a given set of states, and a known valve lift, first\n        check whether it is within the valve lift range, and then\n        calculate the flow velocity\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9flow_velocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up = 0;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_velocity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_State_up,&__pyx_n_s_State_down,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_up)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_velocity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_velocity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[0]);
    __pyx_v_State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_velocity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.flow_velocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_up), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_up", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_down), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_down", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8flow_velocity(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), __pyx_v_State_up, __pyx_v_State_down);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8flow_velocity(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("flow_velocity", 0);
  __Pyx_TraceCall("flow_velocity", __pyx_f[0], 479);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_flow_velocity(__pyx_v_self, __pyx_v_State_up, __pyx_v_State_down, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.flow_velocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":495
 * 
 *     @cython.cdivision(True)
 *     cpdef arraym derivs(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Return the position and velocity as an arraym for the valve
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_11derivs(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_derivs(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core, int __pyx_skip_dispatch) {
  double __pyx_v_omega;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_f = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_out_array = 0;
  double __pyx_v_x;
  double __pyx_v_xdot;
  double __pyx_v_rho;
  double __pyx_v_p_high;
  double __pyx_v_p_low;
  double __pyx_v_deltap;
  double __pyx_v_V;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("derivs", 0);
  __Pyx_TraceCall("derivs", __pyx_f[0], 495);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_derivs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_11derivs)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_Core); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_Core);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_Core);
        __Pyx_GIVEREF(__pyx_v_Core);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":509
 *         """
 *         cdef double omega
 *         cdef arraym f = empty_arraym(2)             # <<<<<<<<<<<<<<
 *         cdef arraym out_array = empty_arraym(2)
 *         x = self.xv.get_index(0)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4misc_9datatypes_empty_arraym(2, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_f = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":510
 *         cdef double omega
 *         cdef arraym f = empty_arraym(2)
 *         cdef arraym out_array = empty_arraym(2)             # <<<<<<<<<<<<<<
 *         x = self.xv.get_index(0)
 *         xdot = self.xv.get_index(1)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4misc_9datatypes_empty_arraym(2, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_array = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":511
 *         cdef arraym f = empty_arraym(2)
 *         cdef arraym out_array = empty_arraym(2)
 *         x = self.xv.get_index(0)             # <<<<<<<<<<<<<<
 *         xdot = self.xv.get_index(1)
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_x = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":512
 *         cdef arraym out_array = empty_arraym(2)
 *         x = self.xv.get_index(0)
 *         xdot = self.xv.get_index(1)             # <<<<<<<<<<<<<<
 * 
 *         self.get_States(Core)
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->xv->__pyx_vtab)->get_index(__pyx_v_self->xv, 1, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_xdot = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":514
 *         xdot = self.xv.get_index(1)
 * 
 *         self.get_States(Core)             # <<<<<<<<<<<<<<
 * 
 *         rho = self.State_up.get_rho()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->get_States(__pyx_v_self, __pyx_v_Core, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":516
 *         self.get_States(Core)
 * 
 *         rho = self.State_up.get_rho()             # <<<<<<<<<<<<<<
 *         p_high = self.State_up.get_p()
 *         p_low = self.State_down.get_p()
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_up->__pyx_vtab)->get_rho(__pyx_v_self->State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rho = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":517
 * 
 *         rho = self.State_up.get_rho()
 *         p_high = self.State_up.get_p()             # <<<<<<<<<<<<<<
 *         p_low = self.State_down.get_p()
 *         deltap = (p_high - p_low)*1000
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_up->__pyx_vtab)->get_p(__pyx_v_self->State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p_high = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":518
 *         rho = self.State_up.get_rho()
 *         p_high = self.State_up.get_p()
 *         p_low = self.State_down.get_p()             # <<<<<<<<<<<<<<
 *         deltap = (p_high - p_low)*1000
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_down->__pyx_vtab)->get_p(__pyx_v_self->State_down, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p_low = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":519
 *         p_high = self.State_up.get_p()
 *         p_low = self.State_down.get_p()
 *         deltap = (p_high - p_low)*1000             # <<<<<<<<<<<<<<
 * 
 *         if deltap > 0:
 */
  __pyx_v_deltap = ((__pyx_v_p_high - __pyx_v_p_low) * 1000.0);

  /* "PDSim\flow\flow_models.pyx":521
 *         deltap = (p_high - p_low)*1000
 * 
 *         if deltap > 0:             # <<<<<<<<<<<<<<
 *             V = self.flow_velocity(self.State_up, self.State_down)
 *         else:
 */
  __pyx_t_7 = ((__pyx_v_deltap > 0.0) != 0);
  if (__pyx_t_7) {

    /* "PDSim\flow\flow_models.pyx":522
 * 
 *         if deltap > 0:
 *             V = self.flow_velocity(self.State_up, self.State_down)             # <<<<<<<<<<<<<<
 *         else:
 *             V = -self.flow_velocity(self.State_down, self.State_up)
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State_up);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)__pyx_v_self->State_down);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_V = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->flow_velocity(__pyx_v_self, ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1), ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_2), 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":524
 *             V = self.flow_velocity(self.State_up, self.State_down)
 *         else:
 *             V = -self.flow_velocity(self.State_down, self.State_up)             # <<<<<<<<<<<<<<
 * 
 *         if x <= self.x_tr:
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->State_down);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State_up);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_V = (-((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->flow_velocity(__pyx_v_self, ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_2), ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1), 0));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":526
 *             V = -self.flow_velocity(self.State_down, self.State_up)
 * 
 *         if x <= self.x_tr:             # <<<<<<<<<<<<<<
 *             self._pressure_dominant(f,x,xdot,rho,V,deltap)
 *         else:
 */
  __pyx_t_7 = ((__pyx_v_x <= __pyx_v_self->x_tr) != 0);
  if (__pyx_t_7) {

    /* "PDSim\flow\flow_models.pyx":527
 * 
 *         if x <= self.x_tr:
 *             self._pressure_dominant(f,x,xdot,rho,V,deltap)             # <<<<<<<<<<<<<<
 *         else:
 *             self._flux_dominant(f,x,xdot,rho,V)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->_pressure_dominant(__pyx_v_self, __pyx_v_f, __pyx_v_x, __pyx_v_xdot, __pyx_v_rho, __pyx_v_V, __pyx_v_deltap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":529
 *             self._pressure_dominant(f,x,xdot,rho,V,deltap)
 *         else:
 *             self._flux_dominant(f,x,xdot,rho,V)             # <<<<<<<<<<<<<<
 * 
 *         print deltap, p_high, p_low, x, xdot, V, f,'valves'
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->_flux_dominant(__pyx_v_self, __pyx_v_f, __pyx_v_x, __pyx_v_xdot, __pyx_v_rho, __pyx_v_V); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "PDSim\flow\flow_models.pyx":531
 *             self._flux_dominant(f,x,xdot,rho,V)
 * 
 *         print deltap, p_high, p_low, x, xdot, V, f,'valves'             # <<<<<<<<<<<<<<
 * 
 *         omega = Core.omega
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_deltap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_high); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_low); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_xdot); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_V); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_f));
  PyTuple_SET_ITEM(__pyx_t_9, 6, ((PyObject *)__pyx_v_f));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_f));
  __Pyx_INCREF(__pyx_n_s_valves);
  PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_n_s_valves);
  __Pyx_GIVEREF(__pyx_n_s_valves);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  if (__Pyx_Print(0, __pyx_t_9, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "PDSim\flow\flow_models.pyx":533
 *         print deltap, p_high, p_low, x, xdot, V, f,'valves'
 * 
 *         omega = Core.omega             # <<<<<<<<<<<<<<
 *         out_array.set_index(0, f.get_index(0)/omega)
 *         out_array.set_index(1, f.get_index(1)/omega)
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_omega); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_omega = __pyx_t_6;

  /* "PDSim\flow\flow_models.pyx":534
 * 
 *         omega = Core.omega
 *         out_array.set_index(0, f.get_index(0)/omega)             # <<<<<<<<<<<<<<
 *         out_array.set_index(1, f.get_index(1)/omega)
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->get_index(__pyx_v_f, 0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_out_array->__pyx_vtab)->set_index(__pyx_v_out_array, 0, (__pyx_t_6 / __pyx_v_omega), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":535
 *         omega = Core.omega
 *         out_array.set_index(0, f.get_index(0)/omega)
 *         out_array.set_index(1, f.get_index(1)/omega)             # <<<<<<<<<<<<<<
 * 
 *         if abs(x) < 1e-15 and xdot < -1e-12:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_f->__pyx_vtab)->get_index(__pyx_v_f, 1, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_out_array->__pyx_vtab)->set_index(__pyx_v_out_array, 1, (__pyx_t_6 / __pyx_v_omega), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":537
 *         out_array.set_index(1, f.get_index(1)/omega)
 * 
 *         if abs(x) < 1e-15 and xdot < -1e-12:             # <<<<<<<<<<<<<<
 *             print 'stationary valve'
 *             out_array.set_index(0, 0.0)
 */
  __pyx_t_10 = ((fabs(__pyx_v_x) < 1e-15) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_7 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_xdot < -1e-12) != 0);
  __pyx_t_7 = __pyx_t_10;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_7) {

    /* "PDSim\flow\flow_models.pyx":538
 * 
 *         if abs(x) < 1e-15 and xdot < -1e-12:
 *             print 'stationary valve'             # <<<<<<<<<<<<<<
 *             out_array.set_index(0, 0.0)
 *             out_array.set_index(1, 0.0)
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_stationary_valve) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PDSim\flow\flow_models.pyx":539
 *         if abs(x) < 1e-15 and xdot < -1e-12:
 *             print 'stationary valve'
 *             out_array.set_index(0, 0.0)             # <<<<<<<<<<<<<<
 *             out_array.set_index(1, 0.0)
 * 
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_out_array->__pyx_vtab)->set_index(__pyx_v_out_array, 0, 0.0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PDSim\flow\flow_models.pyx":540
 *             print 'stationary valve'
 *             out_array.set_index(0, 0.0)
 *             out_array.set_index(1, 0.0)             # <<<<<<<<<<<<<<
 * 
 *         return out_array #[dxdtheta, d(xdot)_dtheta]
 */
    ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_out_array->__pyx_vtab)->set_index(__pyx_v_out_array, 1, 0.0, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "PDSim\flow\flow_models.pyx":542
 *             out_array.set_index(1, 0.0)
 * 
 *         return out_array #[dxdtheta, d(xdot)_dtheta]             # <<<<<<<<<<<<<<
 * 
 *     cpdef dict __cdict__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_out_array));
  __pyx_r = __pyx_v_out_array;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":495
 * 
 *     @cython.cdivision(True)
 *     cpdef arraym derivs(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Return the position and velocity as an arraym for the valve
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_array);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_11derivs(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_10derivs[] = "ValveModel.derivs(self, Core) -> arraym\n\n        Return the position and velocity as an arraym for the valve\n        \n        Parameters\n        ----------\n        Core : :class:`PDSimCore <PDSim.core.core.PDSimCore>` instance\n        \n        Returns\n        -------\n        out_array : :class:`arraym <PDSim.misc.datatypes.arraym>` instance\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_11derivs(PyObject *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("derivs (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10derivs(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_Core));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10derivs(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("derivs", 0);
  __Pyx_TraceCall("derivs", __pyx_f[0], 495);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_derivs(__pyx_v_self, __pyx_v_Core, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":544
 *         return out_array #[dxdtheta, d(xdot)_dtheta]
 * 
 *     cpdef dict __cdict__(self):             # <<<<<<<<<<<<<<
 *         items=['A_port','A_valve','d_valve','h_valve','d_port','m_eff','C_D','a_valve','l_valve',
 *                'rho_valve','k_valve','x_stopper','key_up','key_down','xv','State_up', 'State_down',
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_13__cdict__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_11flow_models_10ValveModel___cdict__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_items = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__cdict__", 0);
  __Pyx_TraceCall("__cdict__", __pyx_f[0], 544);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cdict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_13__cdict__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\flow\flow_models.pyx":545
 * 
 *     cpdef dict __cdict__(self):
 *         items=['A_port','A_valve','d_valve','h_valve','d_port','m_eff','C_D','a_valve','l_valve',             # <<<<<<<<<<<<<<
 *                'rho_valve','k_valve','x_stopper','key_up','key_down','xv','State_up', 'State_down',
 *                'E']
 */
  __pyx_t_1 = PyList_New(18); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_A_port);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_A_port);
  __Pyx_GIVEREF(__pyx_n_s_A_port);
  __Pyx_INCREF(__pyx_n_s_A_valve);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_A_valve);
  __Pyx_GIVEREF(__pyx_n_s_A_valve);
  __Pyx_INCREF(__pyx_n_s_d_valve);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_d_valve);
  __Pyx_GIVEREF(__pyx_n_s_d_valve);
  __Pyx_INCREF(__pyx_n_s_h_valve);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_h_valve);
  __Pyx_GIVEREF(__pyx_n_s_h_valve);
  __Pyx_INCREF(__pyx_n_s_d_port);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_d_port);
  __Pyx_GIVEREF(__pyx_n_s_d_port);
  __Pyx_INCREF(__pyx_n_s_m_eff);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_m_eff);
  __Pyx_GIVEREF(__pyx_n_s_m_eff);
  __Pyx_INCREF(__pyx_n_s_C_D);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_C_D);
  __Pyx_GIVEREF(__pyx_n_s_C_D);
  __Pyx_INCREF(__pyx_n_s_a_valve);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_a_valve);
  __Pyx_GIVEREF(__pyx_n_s_a_valve);
  __Pyx_INCREF(__pyx_n_s_l_valve);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_l_valve);
  __Pyx_GIVEREF(__pyx_n_s_l_valve);
  __Pyx_INCREF(__pyx_n_s_rho_valve);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_rho_valve);
  __Pyx_GIVEREF(__pyx_n_s_rho_valve);
  __Pyx_INCREF(__pyx_n_s_k_valve);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_k_valve);
  __Pyx_GIVEREF(__pyx_n_s_k_valve);
  __Pyx_INCREF(__pyx_n_s_x_stopper);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_x_stopper);
  __Pyx_GIVEREF(__pyx_n_s_x_stopper);
  __Pyx_INCREF(__pyx_n_s_key_up);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_key_up);
  __Pyx_GIVEREF(__pyx_n_s_key_up);
  __Pyx_INCREF(__pyx_n_s_key_down);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_key_down);
  __Pyx_GIVEREF(__pyx_n_s_key_down);
  __Pyx_INCREF(__pyx_n_s_xv);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_xv);
  __Pyx_GIVEREF(__pyx_n_s_xv);
  __Pyx_INCREF(__pyx_n_s_State_up);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_State_up);
  __Pyx_GIVEREF(__pyx_n_s_State_up);
  __Pyx_INCREF(__pyx_n_s_State_down);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_State_down);
  __Pyx_GIVEREF(__pyx_n_s_State_down);
  __Pyx_INCREF(__pyx_n_s_E);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_E);
  __Pyx_GIVEREF(__pyx_n_s_E);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":548
 *                'rho_valve','k_valve','x_stopper','key_up','key_down','xv','State_up', 'State_down',
 *                'E']
 *         return {item:getattr(self,item) for item in items}             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    PyObject *__pyx_7genexpr__pyx_v_item = NULL;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      #endif
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_item, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_7genexpr__pyx_v_item); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_item, (PyObject*)__pyx_t_3))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_item);
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_item);
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":544
 *         return out_array #[dxdtheta, d(xdot)_dtheta]
 * 
 *     cpdef dict __cdict__(self):             # <<<<<<<<<<<<<<
 *         items=['A_port','A_valve','d_valve','h_valve','d_port','m_eff','C_D','a_valve','l_valve',
 *                'rho_valve','k_valve','x_stopper','key_up','key_down','xv','State_up', 'State_down',
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__cdict__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_13__cdict__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_12__cdict__[] = "ValveModel.__cdict__(self) -> dict";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_13__cdict__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cdict__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_12__cdict__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_12__cdict__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__cdict__", 0);
  __Pyx_TraceCall("__cdict__", __pyx_f[0], 544);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_10ValveModel___cdict__(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__cdict__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":550
 *         return {item:getattr(self,item) for item in items}
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return a representation of Valve Model for outputting to screen
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_15__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_14__repr__[] = "\n        Return a representation of Valve Model for outputting to screen\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4flow_11flow_models_10ValveModel_14__repr__;
#endif
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_15__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_14__repr__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_14__repr__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 550);

  /* "PDSim\flow\flow_models.pyx":554
 *         Return a representation of Valve Model for outputting to screen
 *         """
 *         s=''             # <<<<<<<<<<<<<<
 *         for item in self.__cdict__():
 *             s += item+' : '+str(getattr(self,item))+'\n'
 */
  __Pyx_INCREF(__pyx_kp_s__16);
  __pyx_v_s = __pyx_kp_s__16;

  /* "PDSim\flow\flow_models.pyx":555
 *         """
 *         s=''
 *         for item in self.__cdict__():             # <<<<<<<<<<<<<<
 *             s += item+' : '+str(getattr(self,item))+'\n'
 *         return s
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->__pyx___cdict__(__pyx_v_self, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_t_5, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_6, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "PDSim\flow\flow_models.pyx":556
 *         s=''
 *         for item in self.__cdict__():
 *             s += item+' : '+str(getattr(self,item))+'\n'             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_t_6 = PyNumber_Add(__pyx_v_item, __pyx_kp_s__17); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__18); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_8);
    __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\flow\flow_models.pyx":557
 *         for item in self.__cdict__():
 *             s += item+' : '+str(getattr(self,item))+'\n'
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":550
 *         return {item:getattr(self,item) for item in items}
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return a representation of Valve Model for outputting to screen
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":559
 *         return s
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return rebuildValveModel,(self.__cdict__(),)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_17__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_16__reduce__[] = "ValveModel.__reduce__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_17__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_16__reduce__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_16__reduce__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__reduce__", 0);
  __Pyx_TraceCall("__reduce__", __pyx_f[0], 559);

  /* "PDSim\flow\flow_models.pyx":560
 * 
 *     def __reduce__(self):
 *         return rebuildValveModel,(self.__cdict__(),)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_rebuildValveModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self->__pyx_vtab)->__pyx___cdict__(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":559
 *         return s
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return rebuildValveModel,(self.__cdict__(),)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":39
 * 
 * cdef class ValveModel(object):
 *     cdef public double E,A_port,A_valve,d_valve,l_valve,a_valve,h_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper             # <<<<<<<<<<<<<<
 *     cdef public bytes key_up, key_down
 *     cdef public State State_up, State_down
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->E); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.E.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_1E_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->E = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.E.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.A_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6A_port_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->A_port = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.A_port.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.A_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->A_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.A_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->d_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.d_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->d_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.d_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->l_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.l_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->l_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.l_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->a_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.a_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->a_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.a_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.h_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->h_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.h_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->rho_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.rho_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->rho_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.rho_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->d_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.d_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6d_port_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->d_port = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.d_port.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->m_eff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.m_eff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->m_eff = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.m_eff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->C_D); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.C_D.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_3C_D_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->C_D = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.C_D.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->k_valve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.k_valve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->k_valve = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.k_valve.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x_stopper); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.x_stopper.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->x_stopper = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.x_stopper.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":40
 * cdef class ValveModel(object):
 *     cdef public double E,A_port,A_valve,d_valve,l_valve,a_valve,h_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public bytes key_up, key_down             # <<<<<<<<<<<<<<
 *     cdef public State State_up, State_down
 *     cdef public arraym xv
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->key_up);
  __pyx_r = __pyx_v_self->key_up;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40);
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->key_up);
  __Pyx_DECREF(__pyx_v_self->key_up);
  __pyx_v_self->key_up = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.key_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_6key_up_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 40);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->key_up);
  __Pyx_DECREF(__pyx_v_self->key_up);
  __pyx_v_self->key_up = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->key_down);
  __pyx_r = __pyx_v_self->key_down;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40);
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->key_down);
  __Pyx_DECREF(__pyx_v_self->key_down);
  __pyx_v_self->key_down = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.key_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8key_down_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 40);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->key_down);
  __Pyx_DECREF(__pyx_v_self->key_down);
  __pyx_v_self->key_down = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":41
 *     cdef public double E,A_port,A_valve,d_valve,l_valve,a_valve,h_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public bytes key_up, key_down
 *     cdef public State State_up, State_down             # <<<<<<<<<<<<<<
 *     cdef public arraym xv
 *     cdef public double x_tr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 41);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_r = ((PyObject *)__pyx_v_self->State_up);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 41);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State_up);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.State_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_8State_up_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 41);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State_up);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 41);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_r = ((PyObject *)__pyx_v_self->State_down);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 41);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State_down);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.State_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_10State_down_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 41);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State_down);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":42
 *     cdef public bytes key_up, key_down
 *     cdef public State State_up, State_down
 *     cdef public arraym xv             # <<<<<<<<<<<<<<
 *     cdef public double x_tr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 42);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->xv));
  __pyx_r = ((PyObject *)__pyx_v_self->xv);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 42);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->xv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->xv));
  __pyx_v_self->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.xv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_4__del__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_2xv_4__del__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 42);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->xv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->xv));
  __pyx_v_self->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pxd":43
 *     cdef public State State_up, State_down
 *     cdef public arraym xv
 *     cdef public double x_tr             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_xv(self, arraym xv)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr___get__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr___get__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 43);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x_tr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.x_tr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_2__set__(((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_2__set__(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 43);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->x_tr = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.ValveModel.x_tr.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":563
 * 
 * @cython.cdivision(True)
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output = -1):             # <<<<<<<<<<<<<<
 *     """
 *     The mass flow rate is calculated by using isentropic flow model
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_11IsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle *__pyx_optional_args) {
  int __pyx_v_other_output = ((int)-1);
  double __pyx_v_T_up;
  double __pyx_v_T_down;
  double __pyx_v_mdot;
  double __pyx_v_cp;
  double __pyx_v_R;
  double __pyx_v_cv;
  double __pyx_v_k;
  double __pyx_v_p_up;
  double __pyx_v_p_down;
  double __pyx_v_c;
  double __pyx_v_rho_up;
  double __pyx_v_pr;
  double __pyx_v_pr_crit;
  double __pyx_v_rho_down;
  double __pyx_v_v;
  double __pyx_v_Ma;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("IsentropicNozzle", 0);
  __Pyx_TraceCall("IsentropicNozzle", __pyx_f[0], 563);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_other_output = __pyx_optional_args->other_output;
    }
  }

  /* "PDSim\flow\flow_models.pyx":589
 *     cython.declare(T_up = cython.double, T_down = cython.double, mdot = cython.double)
 *     # Since ideal, R=cp-cv, and k=cp/cv
 *     cp = State_up.get_cp0()             # <<<<<<<<<<<<<<
 *     R = 8314.472/State_up.get_MM() #[J/kg/K]
 *     cv = cp-R/1000.0 #[kJ/kg/K]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_cp0(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cp = __pyx_t_1;

  /* "PDSim\flow\flow_models.pyx":590
 *     # Since ideal, R=cp-cv, and k=cp/cv
 *     cp = State_up.get_cp0()
 *     R = 8314.472/State_up.get_MM() #[J/kg/K]             # <<<<<<<<<<<<<<
 *     cv = cp-R/1000.0 #[kJ/kg/K]
 *     k = cp / cv
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_MM(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_R = (8314.472 / __pyx_t_1);

  /* "PDSim\flow\flow_models.pyx":591
 *     cp = State_up.get_cp0()
 *     R = 8314.472/State_up.get_MM() #[J/kg/K]
 *     cv = cp-R/1000.0 #[kJ/kg/K]             # <<<<<<<<<<<<<<
 *     k = cp / cv
 * 
 */
  __pyx_v_cv = (__pyx_v_cp - (__pyx_v_R / 1000.0));

  /* "PDSim\flow\flow_models.pyx":592
 *     R = 8314.472/State_up.get_MM() #[J/kg/K]
 *     cv = cp-R/1000.0 #[kJ/kg/K]
 *     k = cp / cv             # <<<<<<<<<<<<<<
 * 
 *     p_up=State_up.get_p()
 */
  __pyx_v_k = (__pyx_v_cp / __pyx_v_cv);

  /* "PDSim\flow\flow_models.pyx":594
 *     k = cp / cv
 * 
 *     p_up=State_up.get_p()             # <<<<<<<<<<<<<<
 *     T_up=State_up.get_T()
 *     p_down=State_down.get_p()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_p(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p_up = __pyx_t_1;

  /* "PDSim\flow\flow_models.pyx":595
 * 
 *     p_up=State_up.get_p()
 *     T_up=State_up.get_T()             # <<<<<<<<<<<<<<
 *     p_down=State_down.get_p()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_T(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_T_up = __pyx_t_1;

  /* "PDSim\flow\flow_models.pyx":596
 *     p_up=State_up.get_p()
 *     T_up=State_up.get_T()
 *     p_down=State_down.get_p()             # <<<<<<<<<<<<<<
 * 
 *     # Speed of sound
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_down->__pyx_vtab)->get_p(__pyx_v_State_down, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p_down = __pyx_t_1;

  /* "PDSim\flow\flow_models.pyx":599
 * 
 *     # Speed of sound
 *     c=(k*R*T_up)**0.5             # <<<<<<<<<<<<<<
 *     # Upstream density
 *     rho_up=p_up*1000.0/(R*T_up)
 */
  __pyx_v_c = pow(((__pyx_v_k * __pyx_v_R) * __pyx_v_T_up), 0.5);

  /* "PDSim\flow\flow_models.pyx":601
 *     c=(k*R*T_up)**0.5
 *     # Upstream density
 *     rho_up=p_up*1000.0/(R*T_up)             # <<<<<<<<<<<<<<
 *     pr=p_down/p_up
 *     pr_crit=(1+(k-1)/2)**(k/(1-k))
 */
  __pyx_v_rho_up = ((__pyx_v_p_up * 1000.0) / (__pyx_v_R * __pyx_v_T_up));

  /* "PDSim\flow\flow_models.pyx":602
 *     # Upstream density
 *     rho_up=p_up*1000.0/(R*T_up)
 *     pr=p_down/p_up             # <<<<<<<<<<<<<<
 *     pr_crit=(1+(k-1)/2)**(k/(1-k))
 * 
 */
  __pyx_v_pr = (__pyx_v_p_down / __pyx_v_p_up);

  /* "PDSim\flow\flow_models.pyx":603
 *     rho_up=p_up*1000.0/(R*T_up)
 *     pr=p_down/p_up
 *     pr_crit=(1+(k-1)/2)**(k/(1-k))             # <<<<<<<<<<<<<<
 * 
 *     if pr > pr_crit:
 */
  __pyx_v_pr_crit = pow((1.0 + ((__pyx_v_k - 1.0) / 2.0)), (__pyx_v_k / (1.0 - __pyx_v_k)));

  /* "PDSim\flow\flow_models.pyx":605
 *     pr_crit=(1+(k-1)/2)**(k/(1-k))
 * 
 *     if pr > pr_crit:             # <<<<<<<<<<<<<<
 *         # Mass flow rate if not choked [kg/s]
 *         mdot=A*p_up*1000.0/(R*T_up)**0.5*(2*k/(k-1.0)*pr**(2.0/k)*(1-pr**((k-1.0)/k)))**0.5
 */
  __pyx_t_2 = ((__pyx_v_pr > __pyx_v_pr_crit) != 0);
  if (__pyx_t_2) {

    /* "PDSim\flow\flow_models.pyx":607
 *     if pr > pr_crit:
 *         # Mass flow rate if not choked [kg/s]
 *         mdot=A*p_up*1000.0/(R*T_up)**0.5*(2*k/(k-1.0)*pr**(2.0/k)*(1-pr**((k-1.0)/k)))**0.5             # <<<<<<<<<<<<<<
 *         # Throat temperature [K]
 *         T_down=T_up*(p_down/p_up)**((k-1.0)/k)
 */
    __pyx_v_mdot = ((((__pyx_v_A * __pyx_v_p_up) * 1000.0) / pow((__pyx_v_R * __pyx_v_T_up), 0.5)) * pow(((((2.0 * __pyx_v_k) / (__pyx_v_k - 1.0)) * pow(__pyx_v_pr, (2.0 / __pyx_v_k))) * (1.0 - pow(__pyx_v_pr, ((__pyx_v_k - 1.0) / __pyx_v_k)))), 0.5));

    /* "PDSim\flow\flow_models.pyx":609
 *         mdot=A*p_up*1000.0/(R*T_up)**0.5*(2*k/(k-1.0)*pr**(2.0/k)*(1-pr**((k-1.0)/k)))**0.5
 *         # Throat temperature [K]
 *         T_down=T_up*(p_down/p_up)**((k-1.0)/k)             # <<<<<<<<<<<<<<
 *         # Throat density [kg/m3]
 *         rho_down=p_down*1000.0/(R*T_down)
 */
    __pyx_v_T_down = (__pyx_v_T_up * pow((__pyx_v_p_down / __pyx_v_p_up), ((__pyx_v_k - 1.0) / __pyx_v_k)));

    /* "PDSim\flow\flow_models.pyx":611
 *         T_down=T_up*(p_down/p_up)**((k-1.0)/k)
 *         # Throat density [kg/m3]
 *         rho_down=p_down*1000.0/(R*T_down)             # <<<<<<<<<<<<<<
 *         # Velocity at throat
 *         v=mdot/(rho_down*A)
 */
    __pyx_v_rho_down = ((__pyx_v_p_down * 1000.0) / (__pyx_v_R * __pyx_v_T_down));

    /* "PDSim\flow\flow_models.pyx":613
 *         rho_down=p_down*1000.0/(R*T_down)
 *         # Velocity at throat
 *         v=mdot/(rho_down*A)             # <<<<<<<<<<<<<<
 *         # Mach number
 *         Ma=v/c
 */
    __pyx_v_v = (__pyx_v_mdot / (__pyx_v_rho_down * __pyx_v_A));

    /* "PDSim\flow\flow_models.pyx":615
 *         v=mdot/(rho_down*A)
 *         # Mach number
 *         Ma=v/c             # <<<<<<<<<<<<<<
 *     else:
 *         # Mass flow rate if choked
 */
    __pyx_v_Ma = (__pyx_v_v / __pyx_v_c);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":618
 *     else:
 *         # Mass flow rate if choked
 *         mdot=A*rho_up*(k*R*T_up)**0.5*(1.+(k-1.)/2.)**((1+k)/(2*(1-k)))             # <<<<<<<<<<<<<<
 *         # Velocity at throat
 *         v=c
 */
    __pyx_v_mdot = (((__pyx_v_A * __pyx_v_rho_up) * pow(((__pyx_v_k * __pyx_v_R) * __pyx_v_T_up), 0.5)) * pow((1. + ((__pyx_v_k - 1.) / 2.)), ((1.0 + __pyx_v_k) / (2.0 * (1.0 - __pyx_v_k)))));

    /* "PDSim\flow\flow_models.pyx":620
 *         mdot=A*rho_up*(k*R*T_up)**0.5*(1.+(k-1.)/2.)**((1+k)/(2*(1-k)))
 *         # Velocity at throat
 *         v=c             # <<<<<<<<<<<<<<
 *         # Mach Number
 *         Ma=1.0
 */
    __pyx_v_v = __pyx_v_c;

    /* "PDSim\flow\flow_models.pyx":622
 *         v=c
 *         # Mach Number
 *         Ma=1.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_Ma = 1.0;
  }
  __pyx_L3:;

  /* "PDSim\flow\flow_models.pyx":625
 * 
 * 
 *     if other_output < 0:             # <<<<<<<<<<<<<<
 *         return mdot
 *     elif other_output == OUTPUT_VELOCITY:
 */
  __pyx_t_2 = ((__pyx_v_other_output < 0) != 0);
  if (__pyx_t_2) {

    /* "PDSim\flow\flow_models.pyx":626
 * 
 *     if other_output < 0:
 *         return mdot             # <<<<<<<<<<<<<<
 *     elif other_output == OUTPUT_VELOCITY:
 *         return v
 */
    __pyx_r = __pyx_v_mdot;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":627
 *     if other_output < 0:
 *         return mdot
 *     elif other_output == OUTPUT_VELOCITY:             # <<<<<<<<<<<<<<
 *         return v
 *     elif other_output == OUTPUT_MA:
 */
  __pyx_t_2 = ((__pyx_v_other_output == OUTPUT_VELOCITY) != 0);
  if (__pyx_t_2) {

    /* "PDSim\flow\flow_models.pyx":628
 *         return mdot
 *     elif other_output == OUTPUT_VELOCITY:
 *         return v             # <<<<<<<<<<<<<<
 *     elif other_output == OUTPUT_MA:
 *         return Ma
 */
    __pyx_r = __pyx_v_v;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":629
 *     elif other_output == OUTPUT_VELOCITY:
 *         return v
 *     elif other_output == OUTPUT_MA:             # <<<<<<<<<<<<<<
 *         return Ma
 * 
 */
  __pyx_t_2 = ((__pyx_v_other_output == OUTPUT_MA) != 0);
  if (__pyx_t_2) {

    /* "PDSim\flow\flow_models.pyx":630
 *         return v
 *     elif other_output == OUTPUT_MA:
 *         return Ma             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
    __pyx_r = __pyx_v_Ma;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":563
 * 
 * @cython.cdivision(True)
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output = -1):             # <<<<<<<<<<<<<<
 *     """
 *     The mass flow rate is calculated by using isentropic flow model
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("PDSim.flow.flow_models.IsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_11IsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_10IsentropicNozzle[] = "IsentropicNozzle(double A, State State_up, State State_down, int other_output=-1) -> double\n\n    The mass flow rate is calculated by using isentropic flow model\n    \n    Parameters\n    ----------\n    \n    A : double\n        Throat area of the nozzle [m\\ :math:`^2`\\ ]\n    State_up : :class:`State <CoolProp.State.State>` instance\n        Upstream ``State`` instance\n    State_down : :class:`State <CoolProp.State.State>` instance\n        Downstream ``State`` instance\n    other_output : int\n        Default is to return the mass flow rate, can over-ride by passing ``flow_models.OUTPUT_VELOCITY`` or ``flow_models.OUTPUT_MA`` instead\n        \n    Returns\n    -------\n    out : double\n        Default is to return the mass flow rate, can over-ride by passing flags in the other_output variable\n    \n    ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_11IsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_A;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up = 0;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down = 0;
  int __pyx_v_other_output;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsentropicNozzle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_State_up,&__pyx_n_s_State_down,&__pyx_n_s_other_output,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_up)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsentropicNozzle", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("IsentropicNozzle", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other_output);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "IsentropicNozzle") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[1]);
    __pyx_v_State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[2]);
    if (values[3]) {
      __pyx_v_other_output = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_other_output == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_other_output = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IsentropicNozzle", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_up), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_up", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_down), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_down", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_10IsentropicNozzle(__pyx_self, __pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, __pyx_v_other_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_10IsentropicNozzle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, int __pyx_v_other_output) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("IsentropicNozzle", 0);
  __Pyx_TraceCall("IsentropicNozzle", __pyx_f[0], 563);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.other_output = __pyx_v_other_output;
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(__pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, 0, &__pyx_t_2); 
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow_models.IsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\flow\flow_models.pyx":633
 * 
 * @cython.cdivision(True)
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = -1.0, double ro = -1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Frictionally-corrected nozzle model - the so-called hybrid leakage model
 */

static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_13FrictionCorrectedIsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle(double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, double __pyx_v_delta, int __pyx_v_Type, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle *__pyx_optional_args) {
  double __pyx_v_t = __pyx_k__19;
  double __pyx_v_ro = __pyx_k__20;
  double __pyx_v_mdot;
  double __pyx_v_Re;
  double __pyx_v_v;
  double __pyx_v_mdot_ratio;
  double __pyx_v_Dh;
  double __pyx_v_mu;
  double __pyx_v_rho_up;
  double __pyx_v_Re_star;
  double __pyx_v_xi;
  double __pyx_v_Lstar;
  double __pyx_v_delta_star;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("FrictionCorrectedIsentropicNozzle", 0);
  __Pyx_TraceCall("FrictionCorrectedIsentropicNozzle", __pyx_f[0], 633);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_t = __pyx_optional_args->t;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_ro = __pyx_optional_args->ro;
      }
    }
  }

  /* "PDSim\flow\flow_models.pyx":670
 * 
 *     #Get the flow velocity and mass flow rate using the Isentropic nozzle model
 *     mdot = IsentropicNozzle(A, State_up, State_down)             # <<<<<<<<<<<<<<
 * 
 *     if abs(mdot) < 1e-12:
 */
  __pyx_v_mdot = __pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle(__pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, 0, NULL);

  /* "PDSim\flow\flow_models.pyx":672
 *     mdot = IsentropicNozzle(A, State_up, State_down)
 * 
 *     if abs(mdot) < 1e-12:             # <<<<<<<<<<<<<<
 *         return mdot
 *     #  Hydraulic diameter
 */
  __pyx_t_1 = ((fabs(__pyx_v_mdot) < 1e-12) != 0);
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":673
 * 
 *     if abs(mdot) < 1e-12:
 *         return mdot             # <<<<<<<<<<<<<<
 *     #  Hydraulic diameter
 *     Dh = 2 * delta
 */
    __pyx_r = __pyx_v_mdot;
    goto __pyx_L0;
  }

  /* "PDSim\flow\flow_models.pyx":675
 *         return mdot
 *     #  Hydraulic diameter
 *     Dh = 2 * delta             # <<<<<<<<<<<<<<
 * 
 *     #  Viscosity for Re
 */
  __pyx_v_Dh = (2.0 * __pyx_v_delta);

  /* "PDSim\flow\flow_models.pyx":678
 * 
 *     #  Viscosity for Re
 *     mu = State_up.get_visc()             # <<<<<<<<<<<<<<
 *     rho_up = State_up.get_rho()
 *     #  Reynolds number
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_visc(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mu = __pyx_t_2;

  /* "PDSim\flow\flow_models.pyx":679
 *     #  Viscosity for Re
 *     mu = State_up.get_visc()
 *     rho_up = State_up.get_rho()             # <<<<<<<<<<<<<<
 *     #  Reynolds number
 *     v = mdot/rho_up/A
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State_up->__pyx_vtab)->get_rho(__pyx_v_State_up, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rho_up = __pyx_t_2;

  /* "PDSim\flow\flow_models.pyx":681
 *     rho_up = State_up.get_rho()
 *     #  Reynolds number
 *     v = mdot/rho_up/A             # <<<<<<<<<<<<<<
 *     Re=rho_up*v*Dh/mu
 * 
 */
  __pyx_v_v = ((__pyx_v_mdot / __pyx_v_rho_up) / __pyx_v_A);

  /* "PDSim\flow\flow_models.pyx":682
 *     #  Reynolds number
 *     v = mdot/rho_up/A
 *     Re=rho_up*v*Dh/mu             # <<<<<<<<<<<<<<
 * 
 *     if (Type == <int>TYPE_RADIAL and t<=0):
 */
  __pyx_v_Re = (((__pyx_v_rho_up * __pyx_v_v) * __pyx_v_Dh) / __pyx_v_mu);

  /* "PDSim\flow\flow_models.pyx":684
 *     Re=rho_up*v*Dh/mu
 * 
 *     if (Type == <int>TYPE_RADIAL and t<=0):             # <<<<<<<<<<<<<<
 *         raise ValueError("Type 'radial' provided, but thickness of scroll [{0:g}] is not positive".format(t))
 *     elif (Type == <int>TYPE_RADIAL and Re > 1e-12):
 */
  __pyx_t_3 = ((__pyx_v_Type == ((int)TYPE_RADIAL)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_t <= 0.0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":685
 * 
 *     if (Type == <int>TYPE_RADIAL and t<=0):
 *         raise ValueError("Type 'radial' provided, but thickness of scroll [{0:g}] is not positive".format(t))             # <<<<<<<<<<<<<<
 *     elif (Type == <int>TYPE_RADIAL and Re > 1e-12):
 *         Re_star=Re_star_radial
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_radial_provided_but_thickne, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PDSim\flow\flow_models.pyx":686
 *     if (Type == <int>TYPE_RADIAL and t<=0):
 *         raise ValueError("Type 'radial' provided, but thickness of scroll [{0:g}] is not positive".format(t))
 *     elif (Type == <int>TYPE_RADIAL and Re > 1e-12):             # <<<<<<<<<<<<<<
 *         Re_star=Re_star_radial
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 */
  __pyx_t_3 = ((__pyx_v_Type == ((int)TYPE_RADIAL)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_Re > 1e-12) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":687
 *         raise ValueError("Type 'radial' provided, but thickness of scroll [{0:g}] is not positive".format(t))
 *     elif (Type == <int>TYPE_RADIAL and Re > 1e-12):
 *         Re_star=Re_star_radial             # <<<<<<<<<<<<<<
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=t/0.005
 */
    __pyx_v_Re_star = __pyx_v_5PDSim_4flow_11flow_models_Re_star_radial;

    /* "PDSim\flow\flow_models.pyx":688
 *     elif (Type == <int>TYPE_RADIAL and Re > 1e-12):
 *         Re_star=Re_star_radial
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))             # <<<<<<<<<<<<<<
 *         Lstar=t/0.005
 *         delta_star=delta/10e-6
 */
    __pyx_v_xi = (1.0 / (1.0 + exp((-0.01 * (__pyx_v_Re - __pyx_v_Re_star)))));

    /* "PDSim\flow\flow_models.pyx":689
 *         Re_star=Re_star_radial
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=t/0.005             # <<<<<<<<<<<<<<
 *         delta_star=delta/10e-6
 *         mdot_ratio=ar_0*pow(Lstar,ar_1)/(ar_2*delta_star+ar_3)*(xi*(ar_4*pow(Re,ar_5)+ar_6)+(1-xi)*(ar_7*pow(Re,ar_8)+ar_9))+ar_10
 */
    __pyx_v_Lstar = (__pyx_v_t / 0.005);

    /* "PDSim\flow\flow_models.pyx":690
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=t/0.005
 *         delta_star=delta/10e-6             # <<<<<<<<<<<<<<
 *         mdot_ratio=ar_0*pow(Lstar,ar_1)/(ar_2*delta_star+ar_3)*(xi*(ar_4*pow(Re,ar_5)+ar_6)+(1-xi)*(ar_7*pow(Re,ar_8)+ar_9))+ar_10
 *     elif (Type == <int>TYPE_FLANK and ro <= 0):
 */
    __pyx_v_delta_star = (__pyx_v_delta / 10e-6);

    /* "PDSim\flow\flow_models.pyx":691
 *         Lstar=t/0.005
 *         delta_star=delta/10e-6
 *         mdot_ratio=ar_0*pow(Lstar,ar_1)/(ar_2*delta_star+ar_3)*(xi*(ar_4*pow(Re,ar_5)+ar_6)+(1-xi)*(ar_7*pow(Re,ar_8)+ar_9))+ar_10             # <<<<<<<<<<<<<<
 *     elif (Type == <int>TYPE_FLANK and ro <= 0):
 *         raise ValueError("Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive".format(ro))
 */
    __pyx_v_mdot_ratio = ((((__pyx_v_5PDSim_4flow_11flow_models_ar_0 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Lstar, __pyx_v_5PDSim_4flow_11flow_models_ar_1, 0)) / ((__pyx_v_5PDSim_4flow_11flow_models_ar_2 * __pyx_v_delta_star) + __pyx_v_5PDSim_4flow_11flow_models_ar_3)) * ((__pyx_v_xi * ((__pyx_v_5PDSim_4flow_11flow_models_ar_4 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Re, __pyx_v_5PDSim_4flow_11flow_models_ar_5, 0)) + __pyx_v_5PDSim_4flow_11flow_models_ar_6)) + ((1.0 - __pyx_v_xi) * ((__pyx_v_5PDSim_4flow_11flow_models_ar_7 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Re, __pyx_v_5PDSim_4flow_11flow_models_ar_8, 0)) + __pyx_v_5PDSim_4flow_11flow_models_ar_9)))) + __pyx_v_5PDSim_4flow_11flow_models_ar_10);
    goto __pyx_L4;
  }

  /* "PDSim\flow\flow_models.pyx":692
 *         delta_star=delta/10e-6
 *         mdot_ratio=ar_0*pow(Lstar,ar_1)/(ar_2*delta_star+ar_3)*(xi*(ar_4*pow(Re,ar_5)+ar_6)+(1-xi)*(ar_7*pow(Re,ar_8)+ar_9))+ar_10
 *     elif (Type == <int>TYPE_FLANK and ro <= 0):             # <<<<<<<<<<<<<<
 *         raise ValueError("Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive".format(ro))
 *     elif (Type == <int>TYPE_FLANK and Re > 1e-12):
 */
  __pyx_t_3 = ((__pyx_v_Type == ((int)TYPE_FLANK)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_ro <= 0.0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":693
 *         mdot_ratio=ar_0*pow(Lstar,ar_1)/(ar_2*delta_star+ar_3)*(xi*(ar_4*pow(Re,ar_5)+ar_6)+(1-xi)*(ar_7*pow(Re,ar_8)+ar_9))+ar_10
 *     elif (Type == <int>TYPE_FLANK and ro <= 0):
 *         raise ValueError("Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive".format(ro))             # <<<<<<<<<<<<<<
 *     elif (Type == <int>TYPE_FLANK and Re > 1e-12):
 *         Re_star=Re_star_flank
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_flank_provided_but_orbiting, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_ro); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PDSim\flow\flow_models.pyx":694
 *     elif (Type == <int>TYPE_FLANK and ro <= 0):
 *         raise ValueError("Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive".format(ro))
 *     elif (Type == <int>TYPE_FLANK and Re > 1e-12):             # <<<<<<<<<<<<<<
 *         Re_star=Re_star_flank
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 */
  __pyx_t_3 = ((__pyx_v_Type == ((int)TYPE_FLANK)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_Re > 1e-12) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":695
 *         raise ValueError("Type 'flank' provided, but orbiting radius of scroll [{0:g}] is not positive".format(ro))
 *     elif (Type == <int>TYPE_FLANK and Re > 1e-12):
 *         Re_star=Re_star_flank             # <<<<<<<<<<<<<<
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=ro/0.005
 */
    __pyx_v_Re_star = __pyx_v_5PDSim_4flow_11flow_models_Re_star_flank;

    /* "PDSim\flow\flow_models.pyx":696
 *     elif (Type == <int>TYPE_FLANK and Re > 1e-12):
 *         Re_star=Re_star_flank
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))             # <<<<<<<<<<<<<<
 *         Lstar=ro/0.005
 *         delta_star=delta/10e-6
 */
    __pyx_v_xi = (1.0 / (1.0 + exp((-0.01 * (__pyx_v_Re - __pyx_v_Re_star)))));

    /* "PDSim\flow\flow_models.pyx":697
 *         Re_star=Re_star_flank
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=ro/0.005             # <<<<<<<<<<<<<<
 *         delta_star=delta/10e-6
 *         mdot_ratio=af_0*pow(Lstar,af_1)/(af_2*delta_star+af_3)*(xi*(af_4*pow(Re,af_5)+af_6)+(1-xi)*(af_7*pow(Re,af_8)+af_9))+af_10
 */
    __pyx_v_Lstar = (__pyx_v_ro / 0.005);

    /* "PDSim\flow\flow_models.pyx":698
 *         xi=1.0/(1.0+exp(-0.01*(Re-Re_star)))
 *         Lstar=ro/0.005
 *         delta_star=delta/10e-6             # <<<<<<<<<<<<<<
 *         mdot_ratio=af_0*pow(Lstar,af_1)/(af_2*delta_star+af_3)*(xi*(af_4*pow(Re,af_5)+af_6)+(1-xi)*(af_7*pow(Re,af_8)+af_9))+af_10
 *     elif (Type == <int>TYPE_DISABLED and Re > 1e-12):
 */
    __pyx_v_delta_star = (__pyx_v_delta / 10e-6);

    /* "PDSim\flow\flow_models.pyx":699
 *         Lstar=ro/0.005
 *         delta_star=delta/10e-6
 *         mdot_ratio=af_0*pow(Lstar,af_1)/(af_2*delta_star+af_3)*(xi*(af_4*pow(Re,af_5)+af_6)+(1-xi)*(af_7*pow(Re,af_8)+af_9))+af_10             # <<<<<<<<<<<<<<
 *     elif (Type == <int>TYPE_DISABLED and Re > 1e-12):
 *         mdot_ratio = 1.0
 */
    __pyx_v_mdot_ratio = ((((__pyx_v_5PDSim_4flow_11flow_models_af_0 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Lstar, __pyx_v_5PDSim_4flow_11flow_models_af_1, 0)) / ((__pyx_v_5PDSim_4flow_11flow_models_af_2 * __pyx_v_delta_star) + __pyx_v_5PDSim_4flow_11flow_models_af_3)) * ((__pyx_v_xi * ((__pyx_v_5PDSim_4flow_11flow_models_af_4 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Re, __pyx_v_5PDSim_4flow_11flow_models_af_5, 0)) + __pyx_v_5PDSim_4flow_11flow_models_af_6)) + ((1.0 - __pyx_v_xi) * ((__pyx_v_5PDSim_4flow_11flow_models_af_7 * __pyx_f_5PDSim_4flow_11flow_models_pow(__pyx_v_Re, __pyx_v_5PDSim_4flow_11flow_models_af_8, 0)) + __pyx_v_5PDSim_4flow_11flow_models_af_9)))) + __pyx_v_5PDSim_4flow_11flow_models_af_10);
    goto __pyx_L4;
  }

  /* "PDSim\flow\flow_models.pyx":700
 *         delta_star=delta/10e-6
 *         mdot_ratio=af_0*pow(Lstar,af_1)/(af_2*delta_star+af_3)*(xi*(af_4*pow(Re,af_5)+af_6)+(1-xi)*(af_7*pow(Re,af_8)+af_9))+af_10
 *     elif (Type == <int>TYPE_DISABLED and Re > 1e-12):             # <<<<<<<<<<<<<<
 *         mdot_ratio = 1.0
 *     else:
 */
  __pyx_t_3 = ((__pyx_v_Type == ((int)TYPE_DISABLED)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_Re > 1e-12) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PDSim\flow\flow_models.pyx":701
 *         mdot_ratio=af_0*pow(Lstar,af_1)/(af_2*delta_star+af_3)*(xi*(af_4*pow(Re,af_5)+af_6)+(1-xi)*(af_7*pow(Re,af_8)+af_9))+af_10
 *     elif (Type == <int>TYPE_DISABLED and Re > 1e-12):
 *         mdot_ratio = 1.0             # <<<<<<<<<<<<<<
 *     else:
 *         mdot_ratio = 1.0
 */
    __pyx_v_mdot_ratio = 1.0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "PDSim\flow\flow_models.pyx":703
 *         mdot_ratio = 1.0
 *     else:
 *         mdot_ratio = 1.0             # <<<<<<<<<<<<<<
 *     mdot = mdot/mdot_ratio
 *     return mdot
 */
    __pyx_v_mdot_ratio = 1.0;
  }
  __pyx_L4:;

  /* "PDSim\flow\flow_models.pyx":704
 *     else:
 *         mdot_ratio = 1.0
 *     mdot = mdot/mdot_ratio             # <<<<<<<<<<<<<<
 *     return mdot
 * 
 */
  __pyx_v_mdot = (__pyx_v_mdot / __pyx_v_mdot_ratio);

  /* "PDSim\flow\flow_models.pyx":705
 *         mdot_ratio = 1.0
 *     mdot = mdot/mdot_ratio
 *     return mdot             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_mdot;
  goto __pyx_L0;

  /* "PDSim\flow\flow_models.pyx":633
 * 
 * @cython.cdivision(True)
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = -1.0, double ro = -1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Frictionally-corrected nozzle model - the so-called hybrid leakage model
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("PDSim.flow.flow_models.FrictionCorrectedIsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_13FrictionCorrectedIsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_11flow_models_12FrictionCorrectedIsentropicNozzle[] = "FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t=-1.0, double ro=-1.0) -> double\n\n    Frictionally-corrected nozzle model - the so-called hybrid leakage model\n    \n    Parameters\n    ----------\n    A : float\n        Flow area at the minimum area [\\ :math:`m^2`\\ ], equal to :math:`\\delta_{flank}h` for flank, \n        and :math:`s_r\\delta_{radial}` for radial leakage.  Intended for scroll\n        compressor, but can be used with other compressors\n    State_up : :class:`State <CoolProp.State.State>` instance\n        The State instance corresponding to the upstream side of the flow path\n    State_down : :class:`State <CoolProp.State.State>` instance\n        The State instance corresponding to the downstream side of the flow path\n    delta : float\n        Gap width in meters\n    Type : int\n        One of ``flow_models.TYPE_RADIAL`` or ``flow_models.TYPE_FLANK``\n    t : float\n        Scroll wrap thickness in m\n    ro : float\n        Orbiting radius in m\n        \n    Notes\n    -----\n    If Type is ``flow_models.TYPE_RADIAL``, t must be provided\n    \n    If Type is ``flow_models.TYPE_FLANK``, ro must be provided\n        \n    Implements the frictionally-corrected method of \n    Bell, I, Groll, E, Braun, J. E, & W. Travis, H. (in press, 2013). A computationally efficient hybrid leakage model for positive displacement compressors and expanders. International Journal of Refrigeration. \n    \n    ";
static PyObject *__pyx_pw_5PDSim_4flow_11flow_models_13FrictionCorrectedIsentropicNozzle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_A;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up = 0;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down = 0;
  double __pyx_v_delta;
  int __pyx_v_Type;
  double __pyx_v_t;
  double __pyx_v_ro;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrictionCorrectedIsentropicNozzle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_State_up,&__pyx_n_s_State_down,&__pyx_n_s_delta,&__pyx_n_s_Type,&__pyx_n_s_t,&__pyx_n_s_ro,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_up)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FrictionCorrectedIsentropicNozzle", 0, 5, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_State_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FrictionCorrectedIsentropicNozzle", 0, 5, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FrictionCorrectedIsentropicNozzle", 0, 5, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FrictionCorrectedIsentropicNozzle", 0, 5, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ro);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FrictionCorrectedIsentropicNozzle") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[1]);
    __pyx_v_State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[2]);
    __pyx_v_delta = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_delta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_Type = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_Type == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[5]) {
      __pyx_v_t = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_t = __pyx_k__19;
    }
    if (values[6]) {
      __pyx_v_ro = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_ro == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_ro = __pyx_k__20;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrictionCorrectedIsentropicNozzle", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow_models.FrictionCorrectedIsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_up), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_up", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_State_down), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "State_down", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4flow_11flow_models_12FrictionCorrectedIsentropicNozzle(__pyx_self, __pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, __pyx_v_delta, __pyx_v_Type, __pyx_v_t, __pyx_v_ro);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_11flow_models_12FrictionCorrectedIsentropicNozzle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_up, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State_down, double __pyx_v_delta, int __pyx_v_Type, double __pyx_v_t, double __pyx_v_ro) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("FrictionCorrectedIsentropicNozzle", 0);
  __Pyx_TraceCall("FrictionCorrectedIsentropicNozzle", __pyx_f[0], 633);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.t = __pyx_v_t;
  __pyx_t_2.ro = __pyx_v_ro;
  __pyx_t_1 = __pyx_f_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle(__pyx_v_A, __pyx_v_State_up, __pyx_v_State_down, __pyx_v_delta, __pyx_v_Type, 0, &__pyx_t_2); 
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow_models.FrictionCorrectedIsentropicNozzle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\misc\datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

static CYTHON_INLINE PyObject *__pyx_f_5PDSim_4misc_9datatypes_check_dims(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("check_dims", 0);
  __Pyx_TraceCall("check_dims", __pyx_f[2], 41);

  /* "PDSim\misc\datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __pyx_t_1 = ((__pyx_v_x->N != __pyx_v_y->N) != 0);
  if (__pyx_t_1) {

    /* "PDSim\misc\datatypes.pxd":43
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))             # <<<<<<<<<<<<<<
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x->N); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_and); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_y->N); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PDSim\misc\datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.misc.datatypes.check_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }
  __Pyx_TraceCall("__getbuffer__", __pyx_f[3], 197);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":247
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":249
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":251
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":254
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":256
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":257
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":258
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":259
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":261
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":262
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":263
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":264
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":265
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":266
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":267
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":268
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":269
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":270
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":271
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":272
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":273
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":274
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":275
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":276
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":279
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":280
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":281
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":283
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":284
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":285
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":286
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":289
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);
  __Pyx_TraceCall("__releasebuffer__", __pyx_f[3], 291);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":292
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":293
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":294
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":295
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 771);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 774);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 777);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 780);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 783);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);
  __Pyx_TraceCall("_util_dtypestring", __pyx_f[3], 786);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":793
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":794
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":798
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":799
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":801
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":804
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":805
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":816
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":817
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":818
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":819
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":821
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":823
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":824
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":825
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":829
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":830
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":831
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":832
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":833
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":834
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":835
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":836
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":837
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":838
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":839
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":840
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":841
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":842
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":843
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":844
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":845
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":847
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":848
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":852
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":853
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 969);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":971
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":972
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":974
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":975
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":976
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":977
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 979);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":980
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":981
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":983
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_vtable_5PDSim_4flow_11flow_models_FlowFunction;

static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_FlowFunction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;
  p->flows = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4flow_11flow_models_FlowFunction(PyObject *o) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->flows);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4flow_11flow_models_FlowFunction(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)o;
  if (p->flows) {
    e = (*v)(((PyObject*)p->flows), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4flow_11flow_models_FlowFunction(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)o;
  tmp = ((PyObject*)p->flows);
  p->flows = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_12FlowFunction_flows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_12FlowFunction_flows(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5flows_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_12FlowFunction_Nflows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_12FlowFunction_Nflows(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_6Nflows_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5PDSim_4flow_11flow_models_FlowFunction[] = {
  {"resize", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_3resize, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_12FlowFunction_2resize},
  {"call", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_5call, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_12FlowFunction_4call},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4flow_11flow_models_FlowFunction[] = {
  {(char *)"flows", __pyx_getprop_5PDSim_4flow_11flow_models_12FlowFunction_flows, __pyx_setprop_5PDSim_4flow_11flow_models_12FlowFunction_flows, __pyx_k_flows_PDSim_misc_datatypes_array, 0},
  {(char *)"Nflows", __pyx_getprop_5PDSim_4flow_11flow_models_12FlowFunction_Nflows, __pyx_setprop_5PDSim_4flow_11flow_models_12FlowFunction_Nflows, __pyx_k_Nflows_int, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_11flow_models_FlowFunction = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow_models.FlowFunction", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_11flow_models_FlowFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "FlowFunction(Nvalues=1)\n\n    A wrapper to contain the function that will be called\n    \n    Two methods are provided, call(FP) and __call__(FP).  The special method\n     __call__(FP) allows an instance of FlowFunction to be called \n     directly like:: \n     \n         FFW = FlowFunction()\n         FFW(FP)\n         \n     or you can call the call() method like::\n     \n         FFW.call(FP)\n         \n     Having both methods allows cython functions to stay at the C++ layer since they\n     can call the .call() function with defined argument types and not\n     need to come back to python layer for speed \n     \n     See also PyFlowFunctionWrapper\n     \n     Returns\n     -------\n     mdot : float\n         The mass flow rate in kg/s\n     \n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_11flow_models_FlowFunction, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_11flow_models_FlowFunction, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_11flow_models_FlowFunction, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4flow_11flow_models_FlowFunction, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4flow_11flow_models_12FlowFunction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_11flow_models_FlowFunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper __pyx_vtable_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;

static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *p;
  PyObject *o = __pyx_tp_new_5PDSim_4flow_11flow_models_FlowFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction*)__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
  p->kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->Function = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper(PyObject *o) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->kwargs);
  Py_CLEAR(p->Function);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5PDSim_4flow_11flow_models_FlowFunction(o);
}

static int __pyx_tp_traverse_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)o;
  e = __pyx_tp_traverse_5PDSim_4flow_11flow_models_FlowFunction(o, v, a); if (e) return e;
  if (p->kwargs) {
    e = (*v)(p->kwargs, a); if (e) return e;
  }
  if (p->Function) {
    e = (*v)(p->Function, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *)o;
  __pyx_tp_clear_5PDSim_4flow_11flow_models_FlowFunction(o);
  tmp = ((PyObject*)p->kwargs);
  p->kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Function);
  p->Function = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_Function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_Function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_8Function_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_3call, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_2call},
  {"__reduce__", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_5__reduce__, METH_NOARGS, __pyx_doc_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_4__reduce__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper[] = {
  {(char *)"Function", __pyx_getprop_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_Function, __pyx_setprop_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_Function, __pyx_k_Function_object, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow_models.PyFlowFunctionWrapper", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "PyFlowFunctionWrapper(Function, kwargs, Nflows=1)\n\n    This class is defined in order to wrap python functions for ease-of-use.\n    \n    In this way, functions defined at the python level can still be used by the Cython code\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper __pyx_vtable_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;

static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *p;
  PyObject *o = __pyx_tp_new_5PDSim_4flow_11flow_models_FlowFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction*)__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
  return o;
}

static PyMethodDef __pyx_methods_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_1call, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call},
  {"__reduce__", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_5__reduce__, METH_NOARGS, __pyx_doc_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_4__reduce__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow_models.IsentropicNozzleWrapper", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_11flow_models_FlowFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "IsentropicNozzleWrapper()\n\n    A wrapper that can be added to call the isentropic nozzle model\n    if the flow area is constant\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_11flow_models_FlowFunction, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_11flow_models_FlowFunction, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel;

static PyObject *__pyx_tp_new_5PDSim_4flow_11flow_models_ValveModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel;
  p->key_up = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->key_down = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4flow_11flow_models_ValveModel(PyObject *o) {
  struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->key_up);
  Py_CLEAR(p->key_down);
  Py_CLEAR(p->State_up);
  Py_CLEAR(p->State_down);
  Py_CLEAR(p->xv);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4flow_11flow_models_ValveModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)o;
  if (p->State_up) {
    e = (*v)(((PyObject*)p->State_up), a); if (e) return e;
  }
  if (p->State_down) {
    e = (*v)(((PyObject*)p->State_down), a); if (e) return e;
  }
  if (p->xv) {
    e = (*v)(((PyObject*)p->xv), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4flow_11flow_models_ValveModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *p = (struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *)o;
  tmp = ((PyObject*)p->State_up);
  p->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State_down);
  p->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->xv);
  p->xv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_E(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_E(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1E_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_A_port(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_A_port(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6A_port_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_A_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_A_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_d_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_d_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7d_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_l_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_l_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7l_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_a_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_a_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7a_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_h_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_h_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7h_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_rho_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_rho_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9rho_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_d_port(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_d_port(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6d_port_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_m_eff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_m_eff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5m_eff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_C_D(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_C_D(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3C_D_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_k_valve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_k_valve(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7k_valve_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_x_stopper(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_x_stopper(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9x_stopper_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_key_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_key_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_6key_up_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_key_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_key_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8key_down_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_State_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_State_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_8State_up_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_State_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_State_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_10State_down_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_xv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_xv(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_2xv_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_x_tr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_x_tr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_4x_tr_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5PDSim_4flow_11flow_models_ValveModel[] = {
  {"get_States", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_3get_States, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_2get_States},
  {"set_xv", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_5set_xv, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_4set_xv},
  {"A", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_7A, METH_NOARGS, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_6A},
  {"flow_velocity", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_9flow_velocity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_8flow_velocity},
  {"derivs", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_11derivs, METH_O, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_10derivs},
  {"__cdict__", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_13__cdict__, METH_NOARGS, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_12__cdict__},
  {"__reduce__", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_17__reduce__, METH_NOARGS, __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_16__reduce__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4flow_11flow_models_ValveModel[] = {
  {(char *)"E", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_E, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_E, __pyx_k_E_double, 0},
  {(char *)"A_port", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_A_port, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_A_port, __pyx_k_A_port_double, 0},
  {(char *)"A_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_A_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_A_valve, __pyx_k_A_valve_double, 0},
  {(char *)"d_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_d_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_d_valve, __pyx_k_d_valve_double, 0},
  {(char *)"l_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_l_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_l_valve, __pyx_k_l_valve_double, 0},
  {(char *)"a_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_a_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_a_valve, __pyx_k_a_valve_double, 0},
  {(char *)"h_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_h_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_h_valve, __pyx_k_h_valve_double, 0},
  {(char *)"rho_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_rho_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_rho_valve, __pyx_k_rho_valve_double, 0},
  {(char *)"d_port", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_d_port, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_d_port, __pyx_k_d_port_double, 0},
  {(char *)"m_eff", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_m_eff, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_m_eff, __pyx_k_m_eff_double, 0},
  {(char *)"C_D", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_C_D, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_C_D, __pyx_k_C_D_double, 0},
  {(char *)"k_valve", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_k_valve, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_k_valve, __pyx_k_k_valve_double, 0},
  {(char *)"x_stopper", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_x_stopper, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_x_stopper, __pyx_k_x_stopper_double, 0},
  {(char *)"key_up", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_key_up, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_key_up, __pyx_k_key_up_bytes, 0},
  {(char *)"key_down", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_key_down, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_key_down, __pyx_k_key_down_bytes, 0},
  {(char *)"State_up", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_State_up, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_State_up, __pyx_k_State_up_CoolProp_CoolProp_State, 0},
  {(char *)"State_down", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_State_down, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_State_down, __pyx_k_State_down_CoolProp_CoolProp_Sta, 0},
  {(char *)"xv", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_xv, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_xv, __pyx_k_xv_PDSim_misc_datatypes_arraym, 0},
  {(char *)"x_tr", __pyx_getprop_5PDSim_4flow_11flow_models_10ValveModel_x_tr, __pyx_setprop_5PDSim_4flow_11flow_models_10ValveModel_x_tr, __pyx_k_x_tr_double, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_11flow_models_ValveModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow_models.ValveModel", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_11flow_models_ValveModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_15__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "ValveModel(double d_valve, double d_port, double C_D, double h_valve, double a_valve, double l_valve, double rho_valve, double E, double x_stopper, bytes key_up, bytes key_down)\n\n    \n    .. plot::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        \n        fig=plt.figure()\n        ax1=fig.add_subplot(111)\n        ax1.fill(np.r_[0.2,0.4,0.4,0.2,0.2],np.r_[0,0,1,1,0],'grey')\n        ax1.text(0.41,0.66,r'$\\leftarrow p_{low}A_{valve}$',size=20,ha='left',va='center')\n        ax1.text(0.41,0.33,r'$\\leftarrow k_{valve}x$',size=20,ha='left',va='center')\n        ax1.text(0.19,0.66,r'$p_{high}A_{valve}\\rightarrow$',size=20,ha='right',va='center')\n        ax1.text(0.19,0.33,r'$\\frac{1}{2}C_D\\rho (V-\\dot x)^2 A_{valve}\\rightarrow$',size=20,ha='right',va='center')\n        ax1.set_xlim(0.1-1,0.1+1)\n        ax1.axis('equal')\n        ax1.axis('off')\n        ax1.set_title('Pressure-dominant Free-body-diagram')\n        plt.show()\n    \n    Pressure-dominant Regime\n    \n    .. math::\n    \n        M_{valve}\\ddot x_{valve}+k_{valve}x_{valve} = (p_{high}-p_{low}) A_{valve}+\\frac{1}{2}C_D\\rho (V-\\dot x_{valve})^2A_{valve}\n        \n    Two variables are :math:`x_2=\\dot x_{valve}` and :math:`x_1=x_{valve}` where :math:`\\ddot x_{valve}=\\frac{d}{dt}[\\dot x_{valve}]` or :math:`\\ddot x_{valve}=\\dot x_2`.  Thus the system of derivatives is\n    \n    .. math::\n    \n        \\mathbf f_{valves}=\\frac{d}{dt}\\left[ \\begin{array}{c} \\dot x_{valve} \\\\ x_{valve} \\end{array} \\right]=\\left[ \\begin{array}{c} \\frac{d}{dt}[\\dot x_{valve}] \\\\ \\frac{d}{dt}[x_{valve}] \\end{array} \\right]\n    \n    Thus the system of equations is given by\n    \n    .. math::\n    \n        \\dot x_1 = x_2\n        \n        M_{valve}\\dot x_2+k_{valve}x_1 = (p_{high}-p_{low}) A_{valve}+\\frac{1}{2}C_D\\rho (V-x_2)^2A_{valve}\n    \n    which yields the solution for the derivatives of :math:`x_1` and :math:`x_2` of\n    \n    .. math::\n    \n        \\dot x_1 = x_2\n        \n        \\dot x_2 = \\dfrac{(p_{high}-p_{low}) A_{valve}+\\frac{1}{2}C_D\\rho (V-x_2)^2A_{valve}-k_{valve}x_1}{M_{valve}}\n        \n    .. plot::\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        \n        fig=plt.figure()\n        ax1=fig.add_subplot(111)\n        ax1.fill(np.r_[0.2,0.4,0.4,0.2,0.2],np.r_[0,0,1,1,0],'grey')\n        ax1.text(0.41,0.66,r'$\\leftarrow p_{low}A_{valve}$',size=20,ha='left',va='center')\n        ax1.text(0.41,0.33,r'$\\leftarrow k_{valve}x$',size=20,ha='left',va='center')\n        ax1.text(0.19,0.8,r'$p_{low}A_{valve} \\rightarrow$',size=20,ha='right',va='center')\n        ax1.text(0.19,0.5,r'$\\frac{1}{2}C_D\\rho (V-\\dot x)^2 A_{valve} \\rightarrow$',size=20,ha='right',va='center')\n        ax1.text(0.19,0.2,r'$\\rho (V-\\dot x)^2 A_{port} \\rightarrow$',size=20,ha='right',va='center')\n        ax1.set_xlim(0.1-1,0.1+1)\n        ax1.axis('equal')\n        ax1.axis('off')\n        ax1.set_title('Mass-flux-dominant Free-body-diagram')\n        plt.show()\n    \n    And if mass-flux-dominated, force balance given by\n    \n    .. math::\n    \n        M_{valve}\\ddot x_{valve}+k_{valve}x_{valve} = \\frac{1}{2}C_D\\rho (\\mathbf V-\\dot x_{valve})^2 A_{valve}+\\rho (\\mathbf V-\\dot x_{valve})^2 A_{port}\n    \n    Which yields the solution for the system of derivatives of \n    \n    .. math::\n    \n        \\dot x_1 = x_2\n        \n        \\dot x_2= \\dfrac{\\frac{1}{2}C_D\\rho (\\mathbf V-x_2)^2 A_{valve}+\\rho (\\mathbf V-x_2)^2 A_{port}-k_{valve}x_1}{M_{valve}}\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_11flow_models_ValveModel, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_11flow_models_ValveModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_11flow_models_ValveModel, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4flow_11flow_models_ValveModel, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4flow_11flow_models_10ValveModel_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_11flow_models_ValveModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"pow", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_5pow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_11flow_models_4pow},
  {"IsothermalWallTube", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_7IsothermalWallTube, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_11flow_models_6IsothermalWallTube},
  {"IsentropicNozzle", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_11IsentropicNozzle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_11flow_models_10IsentropicNozzle},
  {"FrictionCorrectedIsentropicNozzle", (PyCFunction)__pyx_pw_5PDSim_4flow_11flow_models_13FrictionCorrectedIsentropicNozzle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_11flow_models_12FrictionCorrectedIsentropicNozzle},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "flow_models",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_A_port, __pyx_k_A_port, sizeof(__pyx_k_A_port), 0, 0, 1, 1},
  {&__pyx_n_s_A_valve, __pyx_k_A_valve, sizeof(__pyx_k_A_valve), 0, 0, 1, 1},
  {&__pyx_n_s_CVs, __pyx_k_CVs, sizeof(__pyx_k_CVs), 0, 0, 1, 1},
  {&__pyx_n_s_C_D, __pyx_k_C_D, sizeof(__pyx_k_C_D), 0, 0, 1, 1},
  {&__pyx_kp_s_C_Users_dziviani_Documents_Pytho, __pyx_k_C_Users_dziviani_Documents_Pytho, sizeof(__pyx_k_C_Users_dziviani_Documents_Pytho), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_k_Cannot_apply_unary_operator_to_a, sizeof(__pyx_k_Cannot_apply_unary_operator_to_a), 0, 0, 1, 0},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_Fluid, __pyx_k_Fluid, sizeof(__pyx_k_Fluid), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_Function, __pyx_k_Function, sizeof(__pyx_k_Function), 0, 0, 1, 1},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_HTModel, __pyx_k_HTModel, sizeof(__pyx_k_HTModel), 0, 0, 1, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_Nflows, __pyx_k_Nflows, sizeof(__pyx_k_Nflows), 0, 0, 1, 1},
  {&__pyx_n_s_Nodes, __pyx_k_Nodes, sizeof(__pyx_k_Nodes), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_Nvalues, __pyx_k_Nvalues, sizeof(__pyx_k_Nvalues), 0, 0, 1, 1},
  {&__pyx_n_s_OD, __pyx_k_OD, sizeof(__pyx_k_OD), 0, 0, 1, 1},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_PDSim_flow_flow_models, __pyx_k_PDSim_flow_flow_models, sizeof(__pyx_k_PDSim_flow_flow_models), 0, 0, 1, 1},
  {&__pyx_n_s_Q_add, __pyx_k_Q_add, sizeof(__pyx_k_Q_add), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_State, __pyx_k_State, sizeof(__pyx_k_State), 0, 0, 1, 1},
  {&__pyx_n_s_State1, __pyx_k_State1, sizeof(__pyx_k_State1), 0, 0, 1, 1},
  {&__pyx_n_s_State2, __pyx_k_State2, sizeof(__pyx_k_State2), 0, 0, 1, 1},
  {&__pyx_n_s_State_down, __pyx_k_State_down, sizeof(__pyx_k_State_down), 0, 0, 1, 1},
  {&__pyx_n_s_State_up, __pyx_k_State_up, sizeof(__pyx_k_State_up), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_T_wall, __pyx_k_T_wall, sizeof(__pyx_k_T_wall), 0, 0, 1, 1},
  {&__pyx_kp_s_The_size_of_your_returned_flow_v, __pyx_k_The_size_of_your_returned_flow_v, sizeof(__pyx_k_The_size_of_your_returned_flow_v), 0, 0, 1, 0},
  {&__pyx_n_s_Tmean, __pyx_k_Tmean, sizeof(__pyx_k_Tmean), 0, 0, 1, 1},
  {&__pyx_n_s_Tubes, __pyx_k_Tubes, sizeof(__pyx_k_Tubes), 0, 0, 1, 1},
  {&__pyx_n_s_Twall, __pyx_k_Twall, sizeof(__pyx_k_Twall), 0, 0, 1, 1},
  {&__pyx_n_s_Type, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 0, 1, 1},
  {&__pyx_kp_s_Type_flank_provided_but_orbiting, __pyx_k_Type_flank_provided_but_orbiting, sizeof(__pyx_k_Type_flank_provided_but_orbiting), 0, 0, 1, 0},
  {&__pyx_kp_s_Type_radial_provided_but_thickne, __pyx_k_Type_radial_provided_but_thickne, sizeof(__pyx_k_Type_radial_provided_but_thickne), 0, 0, 1, 0},
  {&__pyx_n_s_VM, __pyx_k_VM, sizeof(__pyx_k_VM), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_n_s_a_valve, __pyx_k_a_valve, sizeof(__pyx_k_a_valve), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_kp_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 0},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_cdict, __pyx_k_cdict, sizeof(__pyx_k_cdict), 0, 0, 1, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_d_port, __pyx_k_d_port, sizeof(__pyx_k_d_port), 0, 0, 1, 1},
  {&__pyx_n_s_d_valve, __pyx_k_d_valve, sizeof(__pyx_k_d_valve), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_derivs, __pyx_k_derivs, sizeof(__pyx_k_derivs), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exists_keys, __pyx_k_exists_keys, sizeof(__pyx_k_exists_keys), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 1},
  {&__pyx_kp_s_fixed_not_provided, __pyx_k_fixed_not_provided, sizeof(__pyx_k_fixed_not_provided), 0, 0, 1, 0},
  {&__pyx_n_s_flow_velocity, __pyx_k_flow_velocity, sizeof(__pyx_k_flow_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_States, __pyx_k_get_States, sizeof(__pyx_k_get_States), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_h_valve, __pyx_k_h_valve, sizeof(__pyx_k_h_valve), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_s_is_not_equal_to_specified_size, __pyx_k_is_not_equal_to_specified_size, sizeof(__pyx_k_is_not_equal_to_specified_size), 0, 0, 1, 0},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_k_valve, __pyx_k_k_valve, sizeof(__pyx_k_k_valve), 0, 0, 1, 1},
  {&__pyx_n_s_key_down, __pyx_k_key_down, sizeof(__pyx_k_key_down), 0, 0, 1, 1},
  {&__pyx_n_s_key_up, __pyx_k_key_up, sizeof(__pyx_k_key_up), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_kwds, __pyx_k_kwds, sizeof(__pyx_k_kwds), 0, 0, 1, 1},
  {&__pyx_n_s_l_valve, __pyx_k_l_valve, sizeof(__pyx_k_l_valve), 0, 0, 1, 1},
  {&__pyx_n_s_m_eff, __pyx_k_m_eff, sizeof(__pyx_k_m_eff), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makeIsentropicNozzleWrapper, __pyx_k_makeIsentropicNozzleWrapper, sizeof(__pyx_k_makeIsentropicNozzleWrapper), 0, 0, 1, 1},
  {&__pyx_n_s_makePyFlowFunctionWrapper, __pyx_k_makePyFlowFunctionWrapper, sizeof(__pyx_k_makePyFlowFunctionWrapper), 0, 0, 1, 1},
  {&__pyx_n_s_mdot, __pyx_k_mdot, sizeof(__pyx_k_mdot), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_other_output, __pyx_k_other_output, sizeof(__pyx_k_other_output), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rebuildValveModel, __pyx_k_rebuildValveModel, sizeof(__pyx_k_rebuildValveModel), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_rho_valve, __pyx_k_rho_valve, sizeof(__pyx_k_rho_valve), 0, 0, 1, 1},
  {&__pyx_n_s_ro, __pyx_k_ro, sizeof(__pyx_k_ro), 0, 0, 1, 1},
  {&__pyx_kp_s_self_xv_is_None, __pyx_k_self_xv_is_None, sizeof(__pyx_k_self_xv_is_None), 0, 0, 1, 0},
  {&__pyx_n_s_set_xv, __pyx_k_set_xv, sizeof(__pyx_k_set_xv), 0, 0, 1, 1},
  {&__pyx_kp_s_stationary_valve, __pyx_k_stationary_valve, sizeof(__pyx_k_stationary_valve), 0, 0, 1, 0},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_valves, __pyx_k_valves, sizeof(__pyx_k_valves), 0, 0, 1, 1},
  {&__pyx_n_s_visc, __pyx_k_visc, sizeof(__pyx_k_visc), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x_stopper, __pyx_k_x_stopper, sizeof(__pyx_k_x_stopper), 0, 0, 1, 1},
  {&__pyx_n_s_xv, __pyx_k_xv, sizeof(__pyx_k_xv), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PDSim\flow\flow_models.pyx":302
 * 
 * def rebuildValveModel(d):
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),             # <<<<<<<<<<<<<<
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_d_valve); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_d_port); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_s_C_D); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_h_valve); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "PDSim\flow\flow_models.pyx":303
 * def rebuildValveModel(d):
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),             # <<<<<<<<<<<<<<
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_a_valve); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_l_valve); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_rho_valve); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "PDSim\flow\flow_models.pyx":304
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),             # <<<<<<<<<<<<<<
 *                           d.pop('key_up'),d.pop('key_down'))
 *     for item in d:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_E); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_x_stopper); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "PDSim\flow\flow_models.pyx":305
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 *                           d.pop('E'),d.pop('x_stopper'),
 *                           d.pop('key_up'),d.pop('key_down'))             # <<<<<<<<<<<<<<
 *     for item in d:
 *         setattr(VM,item,d[item])
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_key_up); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_key_down); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "PDSim\flow\flow_models.pyx":90
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)
 * 
 * def makePyFlowFunctionWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return PyFlowFunctionWrapper(**kwds)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_kwds); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_dziviani_Documents_Pytho, __pyx_n_s_makePyFlowFunctionWrapper, 90, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":115
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 * def makeIsentropicNozzleWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return IsentropicNozzleWrapper()
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_kwds); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_dziviani_Documents_Pytho, __pyx_n_s_makeIsentropicNozzleWrapper, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\flow\flow_models.pyx":301
 *         return Q/1000.0
 * 
 * def rebuildValveModel(d):             # <<<<<<<<<<<<<<
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 */
  __pyx_tuple__29 = PyTuple_Pack(3, __pyx_n_s_d, __pyx_n_s_VM, __pyx_n_s_item); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_dziviani_Documents_Pytho, __pyx_n_s_rebuildValveModel, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_5 = PyFloat_FromDouble(1.5); if (unlikely(!__pyx_float_1_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_7_0 = PyFloat_FromDouble(7.0); if (unlikely(!__pyx_float_7_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_0_27 = PyFloat_FromDouble(0.27); if (unlikely(!__pyx_float_0_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_12_0 = PyFloat_FromDouble(12.0); if (unlikely(!__pyx_float_12_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1000_ = PyFloat_FromDouble(1000.); if (unlikely(!__pyx_float_1000_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1eneg_10 = PyFloat_FromDouble(1e-10); if (unlikely(!__pyx_float_1eneg_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1000_0 = PyFloat_FromDouble(1000.0); if (unlikely(!__pyx_float_1000_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_0_66666 = PyFloat_FromDouble(0.66666); if (unlikely(!__pyx_float_0_66666)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_37530_0 = PyFloat_FromDouble(37530.0); if (unlikely(!__pyx_float_37530_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initflow_models(void); /*proto*/
PyMODINIT_FUNC initflow_models(void)
#else
PyMODINIT_FUNC PyInit_flow_models(void); /*proto*/
PyMODINIT_FUNC PyInit_flow_models(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_flow_models(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("flow_models", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_PDSim__flow__flow_models) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "PDSim.flow.flow_models")) {
      if (unlikely(PyDict_SetItemString(modules, "PDSim.flow.flow_models", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("IsentropicNozzle", (void (*)(void))__pyx_f_5PDSim_4flow_11flow_models_IsentropicNozzle, "double (double, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle *__pyx_optional_args)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("FrictionCorrectedIsentropicNozzle", (void (*)(void))__pyx_f_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle, "double (double, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, double, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle *__pyx_optional_args)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction = &__pyx_vtable_5PDSim_4flow_11flow_models_FlowFunction;
  __pyx_vtable_5PDSim_4flow_11flow_models_FlowFunction.call = (double (*)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_call;
  __pyx_vtable_5PDSim_4flow_11flow_models_FlowFunction.resize = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_12FlowFunction_resize;
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_11flow_models_FlowFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4flow_11flow_models_FlowFunction.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_11flow_models_FlowFunction.tp_dict, __pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "FlowFunction", (PyObject *)&__pyx_type_5PDSim_4flow_11flow_models_FlowFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = &__pyx_type_5PDSim_4flow_11flow_models_FlowFunction;
  __pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = &__pyx_vtable_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
  __pyx_vtable_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper.__pyx_base = *__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;
  __pyx_vtable_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper.__pyx_base.call = (double (*)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_21PyFlowFunctionWrapper_call;
  __pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper.tp_base = __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction;
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper.tp_dict, __pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyFlowFunctionWrapper", (PyObject *)&__pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = &__pyx_type_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
  __pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = &__pyx_vtable_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
  __pyx_vtable_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper.__pyx_base = *__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;
  __pyx_vtable_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper.__pyx_base.call = (double (*)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_23IsentropicNozzleWrapper_call;
  __pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper.tp_base = __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction;
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper.tp_dict, __pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "IsentropicNozzleWrapper", (PyObject *)&__pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = &__pyx_type_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
  __pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel = &__pyx_vtable_5PDSim_4flow_11flow_models_ValveModel;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.set_xv = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_set_xv;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.A = (double (*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_A;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.get_States = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_get_States;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel._pressure_dominant = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double, double))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__pressure_dominant;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel._flux_dominant = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel__flux_dominant;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.flow_velocity = (double (*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_flow_velocity;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.derivs = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel_derivs;
  __pyx_vtable_5PDSim_4flow_11flow_models_ValveModel.__pyx___cdict__ = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_11flow_models_10ValveModel___cdict__;
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_11flow_models_ValveModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4flow_11flow_models_ValveModel.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4flow_11flow_models_ValveModel, "__repr__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4flow_11flow_models_10ValveModel_14__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4flow_11flow_models_10ValveModel_14__repr__.doc = __pyx_doc_5PDSim_4flow_11flow_models_10ValveModel_14__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4flow_11flow_models_10ValveModel_14__repr__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_11flow_models_ValveModel.tp_dict, __pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ValveModel", (PyObject *)&__pyx_type_5PDSim_4flow_11flow_models_ValveModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = &__pyx_type_5PDSim_4flow_11flow_models_ValveModel;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = __Pyx_ImportType("CoolProp.CoolProp", "PyPhaseEnvelopeData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = __Pyx_ImportType("CoolProp.CoolProp", "PyGuessesStructure", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = __Pyx_ImportType("CoolProp.CoolProp", "PyCriticalState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_AbstractState = __Pyx_ImportType("CoolProp.CoolProp", "AbstractState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_AbstractState)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8CoolProp_8CoolProp_AbstractState = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_AbstractState->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_State = __Pyx_ImportType("CoolProp.CoolProp", "State", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_State), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_State)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8CoolProp_8CoolProp_State = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_State*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_State->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_State)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = __Pyx_ImportType("PDSim.misc.datatypes", "AnnotatedValue", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_Collector = __Pyx_ImportType("PDSim.misc.datatypes", "Collector", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_Collector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4misc_9datatypes_Collector = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_Collector->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_listm = __Pyx_ImportType("PDSim.misc.datatypes", "listm", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_listm), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_listm)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_arraym = __Pyx_ImportType("PDSim.misc.datatypes", "arraym", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_arraym)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4misc_9datatypes_arraym = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_arraym->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = __Pyx_ImportType("PDSim.flow.flow", "FlowPathCollection", sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection), 1); if (unlikely(!__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection = (struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4flow_4flow_FlowPath = __Pyx_ImportType("PDSim.flow.flow", "FlowPath", sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath), 1); if (unlikely(!__pyx_ptype_5PDSim_4flow_4flow_FlowPath)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath = (struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_4flow_FlowPath->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_4flow_FlowPath)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("PDSim.misc.datatypes"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "empty_arraym", (void (**)(void))&__pyx_f_5PDSim_4misc_9datatypes_empty_arraym, "struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(int, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "PDSim\flow\flow_models.pyx":13
 * """
 * 
 * cdef public enum:             # <<<<<<<<<<<<<<
 *     TYPE_RADIAL
 *     TYPE_FLANK
 */
  __pyx_t_2 = PyInt_FromLong(TYPE_RADIAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItemString(__pyx_d, "TYPE_RADIAL", __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromLong(TYPE_FLANK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItemString(__pyx_d, "TYPE_FLANK", __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromLong(TYPE_DISABLED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItemString(__pyx_d, "TYPE_DISABLED", __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":18
 *     TYPE_DISABLED
 * 
 * cdef public enum:             # <<<<<<<<<<<<<<
 *     OUTPUT_VELOCITY
 *     OUTPUT_MA
 */
  __pyx_t_2 = PyInt_FromLong(OUTPUT_VELOCITY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItemString(__pyx_d, "OUTPUT_VELOCITY", __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromLong(OUTPUT_MA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItemString(__pyx_d, "OUTPUT_MA", __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":22
 *     OUTPUT_MA
 * 
 * cdef double ar_0 = 25932.1070099             # <<<<<<<<<<<<<<
 * cdef double ar_1 = 0.914825434095
 * cdef double ar_2 = -177.588568125
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_0 = 25932.1070099;

  /* "PDSim\flow\flow_models.pyx":23
 * 
 * cdef double ar_0 = 25932.1070099
 * cdef double ar_1 = 0.914825434095             # <<<<<<<<<<<<<<
 * cdef double ar_2 = -177.588568125
 * cdef double ar_3 = -0.237052788124
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_1 = 0.914825434095;

  /* "PDSim\flow\flow_models.pyx":24
 * cdef double ar_0 = 25932.1070099
 * cdef double ar_1 = 0.914825434095
 * cdef double ar_2 = -177.588568125             # <<<<<<<<<<<<<<
 * cdef double ar_3 = -0.237052788124
 * cdef double ar_4 = -172347.610527
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_2 = -177.588568125;

  /* "PDSim\flow\flow_models.pyx":25
 * cdef double ar_1 = 0.914825434095
 * cdef double ar_2 = -177.588568125
 * cdef double ar_3 = -0.237052788124             # <<<<<<<<<<<<<<
 * cdef double ar_4 = -172347.610527
 * cdef double ar_5 = -12.0687599808
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_3 = -0.237052788124;

  /* "PDSim\flow\flow_models.pyx":26
 * cdef double ar_2 = -177.588568125
 * cdef double ar_3 = -0.237052788124
 * cdef double ar_4 = -172347.610527             # <<<<<<<<<<<<<<
 * cdef double ar_5 = -12.0687599808
 * cdef double ar_6 = -0.0128861161041
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_4 = -172347.610527;

  /* "PDSim\flow\flow_models.pyx":27
 * cdef double ar_3 = -0.237052788124
 * cdef double ar_4 = -172347.610527
 * cdef double ar_5 = -12.0687599808             # <<<<<<<<<<<<<<
 * cdef double ar_6 = -0.0128861161041
 * cdef double ar_7 = -151.202604262
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_5 = -12.0687599808;

  /* "PDSim\flow\flow_models.pyx":28
 * cdef double ar_4 = -172347.610527
 * cdef double ar_5 = -12.0687599808
 * cdef double ar_6 = -0.0128861161041             # <<<<<<<<<<<<<<
 * cdef double ar_7 = -151.202604262
 * cdef double ar_8 = -0.999674457769
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_6 = -0.0128861161041;

  /* "PDSim\flow\flow_models.pyx":29
 * cdef double ar_5 = -12.0687599808
 * cdef double ar_6 = -0.0128861161041
 * cdef double ar_7 = -151.202604262             # <<<<<<<<<<<<<<
 * cdef double ar_8 = -0.999674457769
 * cdef double ar_9 = 0.0161435039267
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_7 = -151.202604262;

  /* "PDSim\flow\flow_models.pyx":30
 * cdef double ar_6 = -0.0128861161041
 * cdef double ar_7 = -151.202604262
 * cdef double ar_8 = -0.999674457769             # <<<<<<<<<<<<<<
 * cdef double ar_9 = 0.0161435039267
 * cdef double ar_10 = 0.825533456725
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_8 = -0.999674457769;

  /* "PDSim\flow\flow_models.pyx":31
 * cdef double ar_7 = -151.202604262
 * cdef double ar_8 = -0.999674457769
 * cdef double ar_9 = 0.0161435039267             # <<<<<<<<<<<<<<
 * cdef double ar_10 = 0.825533456725
 * cdef double Re_star_radial = 5243.58194594
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_9 = 0.0161435039267;

  /* "PDSim\flow\flow_models.pyx":32
 * cdef double ar_8 = -0.999674457769
 * cdef double ar_9 = 0.0161435039267
 * cdef double ar_10 = 0.825533456725             # <<<<<<<<<<<<<<
 * cdef double Re_star_radial = 5243.58194594
 * 
 */
  __pyx_v_5PDSim_4flow_11flow_models_ar_10 = 0.825533456725;

  /* "PDSim\flow\flow_models.pyx":33
 * cdef double ar_9 = 0.0161435039267
 * cdef double ar_10 = 0.825533456725
 * cdef double Re_star_radial = 5243.58194594             # <<<<<<<<<<<<<<
 * 
 * cdef double af_0 = -2.63970395918
 */
  __pyx_v_5PDSim_4flow_11flow_models_Re_star_radial = 5243.58194594;

  /* "PDSim\flow\flow_models.pyx":35
 * cdef double Re_star_radial = 5243.58194594
 * 
 * cdef double af_0 = -2.63970395918             # <<<<<<<<<<<<<<
 * cdef double af_1 = -0.567164431229
 * cdef double af_2 = 0.83655499929
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_0 = -2.63970395918;

  /* "PDSim\flow\flow_models.pyx":36
 * 
 * cdef double af_0 = -2.63970395918
 * cdef double af_1 = -0.567164431229             # <<<<<<<<<<<<<<
 * cdef double af_2 = 0.83655499929
 * cdef double af_3 = 0.810567167521
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_1 = -0.567164431229;

  /* "PDSim\flow\flow_models.pyx":37
 * cdef double af_0 = -2.63970395918
 * cdef double af_1 = -0.567164431229
 * cdef double af_2 = 0.83655499929             # <<<<<<<<<<<<<<
 * cdef double af_3 = 0.810567167521
 * cdef double af_4 = 6174.02825667
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_2 = 0.83655499929;

  /* "PDSim\flow\flow_models.pyx":38
 * cdef double af_1 = -0.567164431229
 * cdef double af_2 = 0.83655499929
 * cdef double af_3 = 0.810567167521             # <<<<<<<<<<<<<<
 * cdef double af_4 = 6174.02825667
 * cdef double af_5 = -7.60907962464
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_3 = 0.810567167521;

  /* "PDSim\flow\flow_models.pyx":39
 * cdef double af_2 = 0.83655499929
 * cdef double af_3 = 0.810567167521
 * cdef double af_4 = 6174.02825667             # <<<<<<<<<<<<<<
 * cdef double af_5 = -7.60907962464
 * cdef double af_6 = -0.510200923053
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_4 = 6174.02825667;

  /* "PDSim\flow\flow_models.pyx":40
 * cdef double af_3 = 0.810567167521
 * cdef double af_4 = 6174.02825667
 * cdef double af_5 = -7.60907962464             # <<<<<<<<<<<<<<
 * cdef double af_6 = -0.510200923053
 * cdef double af_7 = -1205.17482697
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_5 = -7.60907962464;

  /* "PDSim\flow\flow_models.pyx":41
 * cdef double af_4 = 6174.02825667
 * cdef double af_5 = -7.60907962464
 * cdef double af_6 = -0.510200923053             # <<<<<<<<<<<<<<
 * cdef double af_7 = -1205.17482697
 * cdef double af_8 = -1.02938914174
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_6 = -0.510200923053;

  /* "PDSim\flow\flow_models.pyx":42
 * cdef double af_5 = -7.60907962464
 * cdef double af_6 = -0.510200923053
 * cdef double af_7 = -1205.17482697             # <<<<<<<<<<<<<<
 * cdef double af_8 = -1.02938914174
 * cdef double af_9 = 0.689497785772
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_7 = -1205.17482697;

  /* "PDSim\flow\flow_models.pyx":43
 * cdef double af_6 = -0.510200923053
 * cdef double af_7 = -1205.17482697
 * cdef double af_8 = -1.02938914174             # <<<<<<<<<<<<<<
 * cdef double af_9 = 0.689497785772
 * cdef double af_10 = 1.09607735134
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_8 = -1.02938914174;

  /* "PDSim\flow\flow_models.pyx":44
 * cdef double af_7 = -1205.17482697
 * cdef double af_8 = -1.02938914174
 * cdef double af_9 = 0.689497785772             # <<<<<<<<<<<<<<
 * cdef double af_10 = 1.09607735134
 * cdef double Re_star_flank = 826.167177885
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_9 = 0.689497785772;

  /* "PDSim\flow\flow_models.pyx":45
 * cdef double af_8 = -1.02938914174
 * cdef double af_9 = 0.689497785772
 * cdef double af_10 = 1.09607735134             # <<<<<<<<<<<<<<
 * cdef double Re_star_flank = 826.167177885
 * 
 */
  __pyx_v_5PDSim_4flow_11flow_models_af_10 = 1.09607735134;

  /* "PDSim\flow\flow_models.pyx":46
 * cdef double af_9 = 0.689497785772
 * cdef double af_10 = 1.09607735134
 * cdef double Re_star_flank = 826.167177885             # <<<<<<<<<<<<<<
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):
 */
  __pyx_v_5PDSim_4flow_11flow_models_Re_star_flank = 826.167177885;

  /* "PDSim\flow\flow_models.pyx":90
 *         return makePyFlowFunctionWrapper, ({'kwargs': self.kwargs,'Function':Function_str},)
 * 
 * def makePyFlowFunctionWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return PyFlowFunctionWrapper(**kwds)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4flow_11flow_models_1makePyFlowFunctionWrapper, NULL, __pyx_n_s_PDSim_flow_flow_models); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makePyFlowFunctionWrapper, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":115
 *         return makeIsentropicNozzleWrapper, ({},)
 * 
 * def makeIsentropicNozzleWrapper(kwds):             # <<<<<<<<<<<<<<
 *     # A stub function to rebuild for pickling
 *     return IsentropicNozzleWrapper()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4flow_11flow_models_3makeIsentropicNozzleWrapper, NULL, __pyx_n_s_PDSim_flow_flow_models); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makeIsentropicNozzleWrapper, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":301
 *         return Q/1000.0
 * 
 * def rebuildValveModel(d):             # <<<<<<<<<<<<<<
 *     VM = ValveModel(d.pop('d_valve'),d.pop('d_port'),d.pop('C_D'),d.pop('h_valve'),
 *                           d.pop('a_valve'),d.pop('l_valve'),d.pop('rho_valve'),
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4flow_11flow_models_9rebuildValveModel, NULL, __pyx_n_s_PDSim_flow_flow_models); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rebuildValveModel, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\flow\flow_models.pyx":633
 * 
 * @cython.cdivision(True)
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = -1.0, double ro = -1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Frictionally-corrected nozzle model - the so-called hybrid leakage model
 */
  __pyx_k__19 = (-1.0);
  __pyx_k__20 = (-1.0);
  __pyx_k__19 = (-1.0);
  __pyx_k__20 = (-1.0);

  /* "PDSim\flow\flow_models.pyx":1
 * from __future__ import division             # <<<<<<<<<<<<<<
 * 
 * import cython
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "..\..\..\..\..\Python27\lib\site-packages\Cython\Includes\numpy\__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PDSim.flow.flow_models", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PDSim.flow.flow_models");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    return tstate->use_tracing && retval;
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
