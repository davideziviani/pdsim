/* Generated by Cython 0.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__PDSim__core__state_flooded
#define __PYX_HAVE_API__PDSim__core__state_flooded
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "DataStructures.h"
#include "PhaseEnvelope.h"
#include "AbstractState.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PDSim\\core\\state_flooded.pyx",
  "PDSim\\core\\state_flooded.pxd",
  "stringsource",
  "AbstractState.pxd",
};

/* "typedefs.pxd":1
 * ctypedef double CoolPropDbl             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_8CoolProp_8typedefs_CoolPropDbl;

/*--- Type declarations ---*/
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData;
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure;
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState;
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState;
struct __pyx_obj_8CoolProp_8CoolProp_State;
struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded;
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance;
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat;

/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":69
 * 
 *     ## Tangent plane distance
 *     cpdef double tangent_plane_distance(self, double T, double p, vector[double] w, double rhomolar_guess=*) except *             # <<<<<<<<<<<<<<
 * 
 *     ## ----------------------------------------
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance {
  int __pyx_n;
  double rhomolar_guess;
};

/* "CoolProp\CoolProp.pxd":40
 *     cpdef double get_dpdT(self) except *
 *     cpdef double get_speed_sound(self) except *
 *     cpdef get_Tsat(self, double Q = *)             # <<<<<<<<<<<<<<
 *     cpdef get_subcooling(self)
 *     cpdef get_superheat(self)
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat {
  int __pyx_n;
  double Q;
};

/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":14
 *     size_t
 * 
 * cdef class PyPhaseEnvelopeData:             # <<<<<<<<<<<<<<
 *     cpdef public bool TypeI
 *     cpdef public size_t iTsat_max, ipsat_max, icrit
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData {
  PyObject_HEAD
  bool TypeI;
  size_t iTsat_max;
  size_t ipsat_max;
  size_t icrit;
  PyObject *T;
  PyObject *p;
  PyObject *lnT;
  PyObject *lnp;
  PyObject *rhomolar_liq;
  PyObject *rhomolar_vap;
  PyObject *lnrhomolar_liq;
  PyObject *lnrhomolar_vap;
  PyObject *hmolar_liq;
  PyObject *hmolar_vap;
  PyObject *smolar_liq;
  PyObject *smolar_vap;
  PyObject *Q;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":19
 *     cpdef public list T, p, lnT, lnp, rhomolar_liq, rhomolar_vap, lnrhomolar_liq, lnrhomolar_vap, hmolar_liq, hmolar_vap, smolar_liq, smolar_vap, Q
 * 
 * cdef class PyGuessesStructure:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public double rhomolar_liq, rhomolar_vap
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  double rhomolar_liq;
  double rhomolar_vap;
  PyObject *x;
  PyObject *y;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":24
 *     cpdef public list x, y
 * 
 * cdef class PyCriticalState:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public bool stable
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  bool stable;
};


/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":28
 *     cpdef public bool stable
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtab;
  CoolProp::AbstractState *thisptr;
};


/* "CoolProp\CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */
struct __pyx_obj_8CoolProp_8CoolProp_State {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtab;
  struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *pAS;
  PyObject *Fluid;
  PyObject *phase;
  int iFluid;
  int iParam1;
  int iParam2;
  int iOutput;
  double T_;
  double rho_;
  double p_;
};


/* "PDSim\core\state_flooded.pxd":17
 *     int __LINE__
 * 
 * cdef class StateFlooded(State):             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly bytes Liq
 */
struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded {
  struct __pyx_obj_8CoolProp_8CoolProp_State __pyx_base;
  PyObject *Liq;
  double xL_;
  double alpha;
  PyObject *model;
};



/* "..\..\..\..\..\Python27\lib\site-packages\CoolProp\AbstractState.pxd":28
 *     cpdef public bool stable
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState {
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_with_guesses)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure *, int __pyx_skip_dispatch);
  PyObject *(*set_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_volu_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, std::string, int __pyx_skip_dispatch);
  std::string (*get_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_param_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  PyObject *(*change_EOS)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  CoolProp::phases (*phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*specify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::phases, int __pyx_skip_dispatch);
  PyObject *(*unspecify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmin)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*pmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Ttriple)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*all_critical_points)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*criticality_contour_values)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tangent_plane_distance)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, double, double, std::vector<double> , int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance *__pyx_optional_args);
  double (*T)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Q)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0molar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gas_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*delta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*viscosity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*conductivity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*conformal_state)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, int __pyx_skip_dispatch);
  PyObject *(*conductivity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*viscosity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*surface_tension)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Prandtl)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Bvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Cvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*PIP)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isothermal_compressibility)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isobaric_expansion_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fugacity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*fugacity_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*molar_mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*acentric_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*true_critical_point)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*trivial_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_liquid_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_vapor_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  PyObject *(*ideal_curve)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*second_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv_splined)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, double, int __pyx_skip_dispatch);
  double (*melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, double, int __pyx_skip_dispatch);
  bool (*has_melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*saturation_ancillary)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int, CoolProp::parameters, double, int __pyx_skip_dispatch);
  PyObject *(*build_phase_envelope)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData *(*get_phase_envelope_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_liquid)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_vapor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alpha0)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alphar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, double, int __pyx_skip_dispatch);
  double (*__pyx_fuse_0get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_1get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState;


/* "CoolProp\CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_State {
  PyObject *(*set_Fluid)(struct __pyx_obj_8CoolProp_8CoolProp_State *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*speed_test)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int, int __pyx_skip_dispatch);
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_State *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*update_ph)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_Trho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_State *(*copy)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*Props)(struct __pyx_obj_8CoolProp_8CoolProp_State *, CoolProp::parameters, int __pyx_skip_dispatch);
  long (*Phase)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_Q)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_T)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_p)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_h)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_rho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_s)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_u)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_visc)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cond)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp0)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cv)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_MM)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_dpdT)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_Tsat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat *__pyx_optional_args);
  PyObject *(*get_subcooling)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_superheat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtabptr_8CoolProp_8CoolProp_State;


/* "PDSim\core\state_flooded.pyx":34
 * cdef dict paras_inverse = {v:k for k,v in paras.iteritems()}
 * 
 * cdef class StateFlooded(State):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, object Ref, string Liq, double P, double T, double xL, string model):
 */

struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded {
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_State __pyx_base;
  PyObject *(*update_TrhoxL)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, double, double, double, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *(*copy2)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*VoidFrac)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*get_e)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*get_kstar)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*get_dudxL)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*get_cKe)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*get_cve)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*s_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*u_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*h_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*e_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*rho_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*cp_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*cv_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*mu_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*k_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*Pr_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*kstar_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*dudxL_mix)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*dpdT_const_V)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*T_crit)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*p_crit)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*s_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*u_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*h_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*rho_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*cp_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*mu_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*k_liq)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*cK_e)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
  double (*cv_e)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *__pyx_vtabptr_5PDSim_4core_13state_flooded_StateFlooded;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_CLEAR(__pyx_frame)
  #endif
  #define __Pyx_TraceDeclarations(codeobj)                            \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;                                          \
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  {   PyThreadState* tstate = PyThreadState_GET();                                   \
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&                       \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {    \
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
      }                                                                              \
  }
  #define __Pyx_TraceException()                                                           \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (tstate->use_tracing &&                                                           \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {          \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          PyObject *exc_info = __Pyx_GetExceptionTuple();                                  \
          if (exc_info) {                                                                  \
              if (CYTHON_TRACE && tstate->c_tracefunc)                                     \
                  tstate->c_tracefunc(                                                     \
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);      \
              tstate->c_profilefunc(                                                       \
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);        \
              Py_DECREF(exc_info);                                                         \
          }                                                                                \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
  #define __Pyx_TraceReturn(result)                                                       \
  if (likely(!__Pyx_use_tracing)); else {                                                 \
      PyThreadState* tstate = PyThreadState_GET();                                        \
      if (tstate->use_tracing) {                                                          \
          tstate->tracing++;                                                              \
          tstate->use_tracing = 0;                                                        \
          if (CYTHON_TRACE && tstate->c_tracefunc)                                        \
              tstate->c_tracefunc(                                                        \
                  tstate->c_traceobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);   \
          if (tstate->c_profilefunc)                                                      \
              tstate->c_profilefunc(                                                      \
                  tstate->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result); \
          CYTHON_FRAME_DEL;                                                               \
          tstate->use_tracing = 1;                                                        \
          tstate->tracing--;                                                              \
      }                                                                                   \
  }
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)
#endif
#if CYTHON_TRACE
  #define __Pyx_TraceLine(lineno)                                                          \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {                          \
          __pyx_frame->f_lineno = lineno;                                                 \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          tstate->c_tracefunc(tstate->c_traceobj, __pyx_frame, PyTrace_LINE, NULL);       \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
#else
  #define __Pyx_TraceLine(lineno)
#endif

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#define __Pyx_PyNumber_Power2(a, b) PyNumber_Power(a, b, Py_None)

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update_TrhoxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, double __pyx_v_T, double __pyx_v_rho, double __pyx_v_xL, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_params, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_copy2(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_e_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_VoidFrac(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_Pr_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_kstar_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dpdT_const_V(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dudxL_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cK_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_T_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_p_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_p(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_T(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_Q(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_rho(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_h(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_u(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_s(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cp(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cv(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_visc(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cond(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_kstar(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dpdT(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dudxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cKe(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cve(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'CoolProp.typedefs' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp.cAbstractState' */

/* Module declarations from 'CoolProp.CoolProp' */
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_AbstractState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_State = 0;

/* Module declarations from 'PDSim.core.state_flooded' */
static PyTypeObject *__pyx_ptype_5PDSim_4core_13state_flooded_StateFlooded = 0;
static PyObject *__pyx_v_5PDSim_4core_13state_flooded_paras = 0;
static PyObject *__pyx_v_5PDSim_4core_13state_flooded_paras_inverse = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "PDSim.core.state_flooded"
int __pyx_module_is_main_PDSim__core__state_flooded = 0;

/* Implementation of 'PDSim.core.state_flooded' */
static PyObject *__pyx_builtin_ValueError;
static int __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded___init__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_Ref, std::string __pyx_v_Liq, double __pyx_v_P, double __pyx_v_T, double __pyx_v_xL, std::string __pyx_v_model); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2update_TrhoxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, double __pyx_v_T, double __pyx_v_rho, double __pyx_v_xL); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4update(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_6copy2(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_8s_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_10s_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_12u_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_14u_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_16h_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_18h_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_20e_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_22rho_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_24rho_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_26cp_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_28cp_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_30cv_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_32mu_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_34mu_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_36VoidFrac(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_38k_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_40k_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_42Pr_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_44kstar_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_46dpdT_const_V(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_48dudxL_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_50cK_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_52cv_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_54T_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_56p_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_58get_p(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1p___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_60get_T(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1T___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_62get_Q(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1Q___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_64get_rho(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3rho___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_66get_h(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1h___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_68get_u(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1u___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_70get_s(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1s___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_72get_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1e___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_74get_cp(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cp___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_76get_cv(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cv___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_78get_visc(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4visc___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_80get_cond(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1k___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_82get_kstar(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5kstar___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_84get_dpdT(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_86get_dudxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_88get_cKe(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cKe___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_90get_cve(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cve___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3Liq___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3xL____get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5alpha___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_5PDSim_4core_13state_flooded_StateFlooded(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "?";
static char __pyx_k_A[] = "A";
static char __pyx_k_C[] = "C";
static char __pyx_k_D[] = "D";
static char __pyx_k_H[] = "H";
static char __pyx_k_L[] = "L";
static char __pyx_k_M[] = "M";
static char __pyx_k_O[] = "O";
static char __pyx_k_P[] = "P";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_S[] = "S";
static char __pyx_k_T[] = "T";
static char __pyx_k_U[] = "U";
static char __pyx_k_V[] = "V";
static char __pyx_k_C0[] = "C0";
static char __pyx_k__2[] = "::";
static char __pyx_k__4[] = "";
static char __pyx_k_xL[] = "xL";
static char __pyx_k_HEM[] = "HEM";
static char __pyx_k_Liq[] = "Liq";
static char __pyx_k_PAG[] = "PAG";
static char __pyx_k_PAO[] = "PAO";
static char __pyx_k_POE[] = "POE";
static char __pyx_k_Ref[] = "Ref";
static char __pyx_k_end[] = "end";
static char __pyx_k_log[] = "log";
static char __pyx_k_rho[] = "rho";
static char __pyx_k_Zivi[] = "Zivi";
static char __pyx_k_cK_e[] = "cK_e";
static char __pyx_k_cv_e[] = "cv_e";
static char __pyx_k_fabs[] = "fabs";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_math[] = "math";
static char __pyx_k_sqrt[] = "sqrt";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Water[] = "Water";
static char __pyx_k_copy2[] = "copy2";
static char __pyx_k_e_mix[] = "e_mix";
static char __pyx_k_floor[] = "floor";
static char __pyx_k_get_Q[] = "get_Q";
static char __pyx_k_get_T[] = "get_T";
static char __pyx_k_get_e[] = "get_e";
static char __pyx_k_get_h[] = "get_h";
static char __pyx_k_get_p[] = "get_p";
static char __pyx_k_get_s[] = "get_s";
static char __pyx_k_get_u[] = "get_u";
static char __pyx_k_h_liq[] = "h_liq";
static char __pyx_k_h_mix[] = "h_mix";
static char __pyx_k_isinf[] = "isinf";
static char __pyx_k_isnan[] = "isnan";
static char __pyx_k_k_liq[] = "k_liq";
static char __pyx_k_k_mix[] = "k_mix";
static char __pyx_k_model[] = "model";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_print[] = "print";
static char __pyx_k_s_liq[] = "s_liq";
static char __pyx_k_s_mix[] = "s_mix";
static char __pyx_k_scipy[] = "scipy";
static char __pyx_k_split[] = "split";
static char __pyx_k_u_liq[] = "u_liq";
static char __pyx_k_u_mix[] = "u_mix";
static char __pyx_k_Fauske[] = "Fauske";
static char __pyx_k_Pr_mix[] = "Pr_mix";
static char __pyx_k_T_crit[] = "T_crit";
static char __pyx_k_cp_liq[] = "cp_liq";
static char __pyx_k_cp_mix[] = "cp_mix";
static char __pyx_k_cv_mix[] = "cv_mix";
static char __pyx_k_fsolve[] = "fsolve";
static char __pyx_k_get_cp[] = "get_cp";
static char __pyx_k_get_cv[] = "get_cv";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_mu_liq[] = "mu_liq";
static char __pyx_k_mu_mix[] = "mu_mix";
static char __pyx_k_newton[] = "newton";
static char __pyx_k_p_crit[] = "p_crit";
static char __pyx_k_update[] = "update";
static char __pyx_k_Zerol60[] = "Zerol60";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_get_cKe[] = "get_cKe";
static char __pyx_k_get_cve[] = "get_cve";
static char __pyx_k_get_rho[] = "get_rho";
static char __pyx_k_rho_liq[] = "rho_liq";
static char __pyx_k_rho_mix[] = "rho_mix";
static char __pyx_k_ACD100FY[] = "ACD100FY";
static char __pyx_k_CoolProp[] = "CoolProp";
static char __pyx_k_VoidFrac[] = "VoidFrac";
static char __pyx_k_get_cond[] = "get_cond";
static char __pyx_k_get_dpdT[] = "get_dpdT";
static char __pyx_k_get_visc[] = "get_visc";
static char __pyx_k_optimize[] = "optimize";
static char __pyx_k_warnings[] = "warnings";
static char __pyx_k_dudxL_mix[] = "dudxL_mix";
static char __pyx_k_get_dudxL[] = "get_dudxL";
static char __pyx_k_get_kstar[] = "get_kstar";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_kstar_mix[] = "kstar_mix";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_The_quality[] = " The quality [-] ";
static char __pyx_k_Duratherm_LT[] = "Duratherm_LT";
static char __pyx_k_dpdT_const_V[] = "dpdT_const_V";
static char __pyx_k_e_m_is_a_NaN[] = "e_m is a NaN";
static char __pyx_k_update_TrhoxL[] = "update_TrhoxL";
static char __pyx_k_Invalid_liquid[] = "Invalid liquid:";
static char __pyx_k_scipy_optimize[] = "scipy.optimize";
static char __pyx_k_dpdt_v_is_a_NaN[] = "dpdt_v is a NaN";
static char __pyx_k_e_m_is_Infinite[] = "e_m is Infinite";
static char __pyx_k_The_pressure_kPa[] = " The pressure [kPa] ";
static char __pyx_k_CoolProp_CoolProp[] = "CoolProp.CoolProp";
static char __pyx_k_The_temperature_K[] = " The temperature [K] ";
static char __pyx_k_The_density_kg_m_3[] = " The density [kg/m^3] ";
static char __pyx_k_dpdt_v_is_Infinite[] = "dpdt_v is Infinite";
static char __pyx_k_The_viscosity_in_Pa_s[] = " The viscosity, in [Pa-s]";
static char __pyx_k_The_internal_energy_kJ_kg[] = " The internal energy [kJ/kg] ";
static char __pyx_k_The_specific_exergy_kJ_kg[] = " The specific exergy [kJ/kg] ";
static char __pyx_k_The_specific_enthalpy_kJ_kg[] = " The specific enthalpy [kJ/kg] ";
static char __pyx_k_dPdT_const_v_not_converging[] = "dPdT_const_v not converging";
static char __pyx_k_The_specific_enthalpy_kJ_kg_K[] = " The specific enthalpy [kJ/kg/K] ";
static char __pyx_k_The_thermal_conductivity_in_kW[] = " The thermal conductivity, in [kW/m/K]";
static char __pyx_k_The_specific_heat_at_constant_p[] = " The specific heat at constant pressure  [kJ/kg/K] ";
static char __pyx_k_The_specific_heat_at_constant_v[] = " The specific heat at constant volume  [kJ/kg/K] ";
static PyObject *__pyx_kp_b_;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_b_ACD100FY;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_C0;
static PyObject *__pyx_n_s_CoolProp;
static PyObject *__pyx_n_s_CoolProp_CoolProp;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_b_Duratherm_LT;
static PyObject *__pyx_n_s_Fauske;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_HEM;
static PyObject *__pyx_kp_b_Invalid_liquid;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_Liq;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_b_PAG;
static PyObject *__pyx_n_b_PAO;
static PyObject *__pyx_n_b_POE;
static PyObject *__pyx_n_s_Pr_mix;
static PyObject *__pyx_n_s_Q;
static PyObject *__pyx_n_s_Ref;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_T_crit;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VoidFrac;
static PyObject *__pyx_n_b_Water;
static PyObject *__pyx_n_b_Zerol60;
static PyObject *__pyx_n_s_Zivi;
static PyObject *__pyx_kp_b__2;
static PyObject *__pyx_kp_b__4;
static PyObject *__pyx_n_s_cK_e;
static PyObject *__pyx_n_s_copy2;
static PyObject *__pyx_n_s_cp_liq;
static PyObject *__pyx_n_s_cp_mix;
static PyObject *__pyx_n_s_cv_e;
static PyObject *__pyx_n_s_cv_mix;
static PyObject *__pyx_kp_s_dPdT_const_v_not_converging;
static PyObject *__pyx_n_s_dpdT_const_V;
static PyObject *__pyx_kp_s_dpdt_v_is_Infinite;
static PyObject *__pyx_kp_s_dpdt_v_is_a_NaN;
static PyObject *__pyx_n_s_dudxL_mix;
static PyObject *__pyx_kp_s_e_m_is_Infinite;
static PyObject *__pyx_kp_s_e_m_is_a_NaN;
static PyObject *__pyx_n_s_e_mix;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_fabs;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_fsolve;
static PyObject *__pyx_n_s_get_Q;
static PyObject *__pyx_n_s_get_T;
static PyObject *__pyx_n_s_get_cKe;
static PyObject *__pyx_n_s_get_cond;
static PyObject *__pyx_n_s_get_cp;
static PyObject *__pyx_n_s_get_cv;
static PyObject *__pyx_n_s_get_cve;
static PyObject *__pyx_n_s_get_dpdT;
static PyObject *__pyx_n_s_get_dudxL;
static PyObject *__pyx_n_s_get_e;
static PyObject *__pyx_n_s_get_h;
static PyObject *__pyx_n_s_get_kstar;
static PyObject *__pyx_n_s_get_p;
static PyObject *__pyx_n_s_get_rho;
static PyObject *__pyx_n_s_get_s;
static PyObject *__pyx_n_s_get_u;
static PyObject *__pyx_n_s_get_visc;
static PyObject *__pyx_n_s_h_liq;
static PyObject *__pyx_n_s_h_mix;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_isinf;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_k_liq;
static PyObject *__pyx_n_s_k_mix;
static PyObject *__pyx_n_s_kstar_mix;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_mu_liq;
static PyObject *__pyx_n_s_mu_mix;
static PyObject *__pyx_n_s_newton;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_optimize;
static PyObject *__pyx_n_s_p_crit;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_rho_liq;
static PyObject *__pyx_n_s_rho_mix;
static PyObject *__pyx_n_s_s_liq;
static PyObject *__pyx_n_s_s_mix;
static PyObject *__pyx_n_s_scipy;
static PyObject *__pyx_n_s_scipy_optimize;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_u_liq;
static PyObject *__pyx_n_s_u_mix;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_TrhoxL;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_xL;
static PyObject *__pyx_float_2_30;
static PyObject *__pyx_float_1_940;
static PyObject *__pyx_float_1094_3;
static PyObject *__pyx_float_1_08646;
static PyObject *__pyx_float_3337_116;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_tuple__3;

/* "PDSim\core\state_flooded.pyx":36
 * cdef class StateFlooded(State):
 * 
 *     def __init__(self, object Ref, string Liq, double P, double T, double xL, string model):             # <<<<<<<<<<<<<<
 *         cdef string backend = b'?'
 *         self.Fluid = Ref # Defined in base class
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Ref = 0;
  std::string __pyx_v_Liq;
  double __pyx_v_P;
  double __pyx_v_T;
  double __pyx_v_xL;
  std::string __pyx_v_model;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Ref,&__pyx_n_s_Liq,&__pyx_n_s_P,&__pyx_n_s_T,&__pyx_n_s_xL,&__pyx_n_s_model,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Liq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_Ref = values[0];
    __pyx_v_Liq = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_P = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_P == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_xL = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_xL == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_model = __pyx_convert_string_from_py_std__in_string(values[5]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded___init__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self), __pyx_v_Ref, __pyx_v_Liq, __pyx_v_P, __pyx_v_T, __pyx_v_xL, __pyx_v_model);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded___init__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_Ref, std::string __pyx_v_Liq, double __pyx_v_P, double __pyx_v_T, double __pyx_v_xL, std::string __pyx_v_model) {
  std::string __pyx_v_backend;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 36);
  __Pyx_INCREF(__pyx_v_Ref);

  /* "PDSim\core\state_flooded.pyx":37
 * 
 *     def __init__(self, object Ref, string Liq, double P, double T, double xL, string model):
 *         cdef string backend = b'?'             # <<<<<<<<<<<<<<
 *         self.Fluid = Ref # Defined in base class
 *         self.p_ = P # Defined in base class
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_backend = __pyx_t_1;

  /* "PDSim\core\state_flooded.pyx":38
 *     def __init__(self, object Ref, string Liq, double P, double T, double xL, string model):
 *         cdef string backend = b'?'
 *         self.Fluid = Ref # Defined in base class             # <<<<<<<<<<<<<<
 *         self.p_ = P # Defined in base class
 *         self.T_ = T # Defined in base class
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_Ref))||((__pyx_v_Ref) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_Ref)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_v_Ref;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.Fluid);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.Fluid);
  __pyx_v_self->__pyx_base.Fluid = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":39
 *         cdef string backend = b'?'
 *         self.Fluid = Ref # Defined in base class
 *         self.p_ = P # Defined in base class             # <<<<<<<<<<<<<<
 *         self.T_ = T # Defined in base class
 *         self.Liq = Liq # Defined in this class
 */
  __pyx_v_self->__pyx_base.p_ = __pyx_v_P;

  /* "PDSim\core\state_flooded.pyx":40
 *         self.Fluid = Ref # Defined in base class
 *         self.p_ = P # Defined in base class
 *         self.T_ = T # Defined in base class             # <<<<<<<<<<<<<<
 *         self.Liq = Liq # Defined in this class
 *         self.xL_ = xL # Defined in this class
 */
  __pyx_v_self->__pyx_base.T_ = __pyx_v_T;

  /* "PDSim\core\state_flooded.pyx":41
 *         self.p_ = P # Defined in base class
 *         self.T_ = T # Defined in base class
 *         self.Liq = Liq # Defined in this class             # <<<<<<<<<<<<<<
 *         self.xL_ = xL # Defined in this class
 * 
 */
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_Liq); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->Liq);
  __Pyx_DECREF(__pyx_v_self->Liq);
  __pyx_v_self->Liq = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":42
 *         self.T_ = T # Defined in base class
 *         self.Liq = Liq # Defined in this class
 *         self.xL_ = xL # Defined in this class             # <<<<<<<<<<<<<<
 * 
 *         self.model = model
 */
  __pyx_v_self->xL_ = __pyx_v_xL;

  /* "PDSim\core\state_flooded.pyx":44
 *         self.xL_ = xL # Defined in this class
 * 
 *         self.model = model             # <<<<<<<<<<<<<<
 * 
 *         if b'::' in Ref:
 */
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":46
 *         self.model = model
 * 
 *         if b'::' in Ref:             # <<<<<<<<<<<<<<
 *             backend, Ref = Ref.split(b'::', 1)
 * 
 */
  __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_kp_b__2, __pyx_v_Ref, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "PDSim\core\state_flooded.pyx":47
 * 
 *         if b'::' in Ref:
 *             backend, Ref = Ref.split(b'::', 1)             # <<<<<<<<<<<<<<
 * 
 *         self.set_Fluid(Ref, backend)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Ref, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_backend = __pyx_t_1;
    __Pyx_DECREF_SET(__pyx_v_Ref, __pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":49
 *             backend, Ref = Ref.split(b'::', 1)
 * 
 *         self.set_Fluid(Ref, backend)             # <<<<<<<<<<<<<<
 *         self.phase = b''
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_Ref); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.set_Fluid(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), __pyx_t_1, __pyx_v_backend, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PDSim\core\state_flooded.pyx":50
 * 
 *         self.set_Fluid(Ref, backend)
 *         self.phase = b''             # <<<<<<<<<<<<<<
 * 
 *     ##
 */
  __Pyx_INCREF(__pyx_kp_b__4);
  __Pyx_GIVEREF(__pyx_kp_b__4);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.phase);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.phase);
  __pyx_v_self->__pyx_base.phase = __pyx_kp_b__4;

  /* "PDSim\core\state_flooded.pyx":36
 * cdef class StateFlooded(State):
 * 
 *     def __init__(self, object Ref, string Liq, double P, double T, double xL, string model):             # <<<<<<<<<<<<<<
 *         cdef string backend = b'?'
 *         self.Fluid = Ref # Defined in base class
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Ref);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":53
 * 
 *     ##
 *     cpdef update_TrhoxL(self, double T, double rho, double xL):             # <<<<<<<<<<<<<<
 *         """
 *         Just use the temperature, density and liquid fraction directly for speed
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3update_TrhoxL(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update_TrhoxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, double __pyx_v_T, double __pyx_v_rho, double __pyx_v_xL, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("update_TrhoxL", 0);
  __Pyx_TraceCall("update_TrhoxL", __pyx_f[0], 53);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_TrhoxL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3update_TrhoxL)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_T); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rho); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_xL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      }
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":65
 *             Liquid mass fraction [-]
 *         """
 *         self.T_ = T             # <<<<<<<<<<<<<<
 *         self.rho_ = rho
 *         self.xL_ = xL
 */
  __pyx_v_self->__pyx_base.T_ = __pyx_v_T;

  /* "PDSim\core\state_flooded.pyx":66
 *         """
 *         self.T_ = T
 *         self.rho_ = rho             # <<<<<<<<<<<<<<
 *         self.xL_ = xL
 * 
 */
  __pyx_v_self->__pyx_base.rho_ = __pyx_v_rho;

  /* "PDSim\core\state_flooded.pyx":67
 *         self.T_ = T
 *         self.rho_ = rho
 *         self.xL_ = xL             # <<<<<<<<<<<<<<
 * 
 *     cpdef update(self, dict params):
 */
  __pyx_v_self->xL_ = __pyx_v_xL;

  /* "PDSim\core\state_flooded.pyx":53
 * 
 *     ##
 *     cpdef update_TrhoxL(self, double T, double rho, double xL):             # <<<<<<<<<<<<<<
 *         """
 *         Just use the temperature, density and liquid fraction directly for speed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.update_TrhoxL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3update_TrhoxL(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_2update_TrhoxL[] = "StateFlooded.update_TrhoxL(self, double T, double rho, double xL)\n\n        Just use the temperature, density and liquid fraction directly for speed\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        rho: float\n            Mixture Density [kg/m^3]\n        xL: float\n            Liquid mass fraction [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3update_TrhoxL(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_T;
  double __pyx_v_rho;
  double __pyx_v_xL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_TrhoxL (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_T,&__pyx_n_s_rho,&__pyx_n_s_xL,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_TrhoxL", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_TrhoxL", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_TrhoxL") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rho = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rho == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_xL = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_xL == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_TrhoxL", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.update_TrhoxL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2update_TrhoxL(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self), __pyx_v_T, __pyx_v_rho, __pyx_v_xL);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2update_TrhoxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, double __pyx_v_T, double __pyx_v_rho, double __pyx_v_xL) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("update_TrhoxL", 0);
  __Pyx_TraceCall("update_TrhoxL", __pyx_f[0], 53);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update_TrhoxL(__pyx_v_self, __pyx_v_T, __pyx_v_rho, __pyx_v_xL, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.update_TrhoxL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":69
 *         self.xL_ = xL
 * 
 *     cpdef update(self, dict params):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5update(PyObject *__pyx_v_self, PyObject *__pyx_v_params); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_params, int __pyx_skip_dispatch) {
  CYTHON_UNUSED double __pyx_v_o1;
  CYTHON_UNUSED double __pyx_v_o2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_TraceCall("update", __pyx_f[0], 69);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5update)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_params); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_params);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_params);
        __Pyx_GIVEREF(__pyx_v_params);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":77
 *         """
 * 
 *         cdef double p, val1, val2, o1 = 0, o2 = 0             # <<<<<<<<<<<<<<
 *         cdef long iInput1, iInput2
 *         cdef bytes errstr
 */
  __pyx_v_o1 = 0.0;
  __pyx_v_o2 = 0.0;

  /* "PDSim\core\state_flooded.pyx":89
 *         # d) Cache the mixture temperature and pressure in the variables self.p_ and self.T_ (defined in base class)
 * 
 *         self.T_  = params['T']             # <<<<<<<<<<<<<<
 *         self.p_  = params['P']
 *         self.xL_ = params['xL']
 */
  if (unlikely(__pyx_v_params == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_params, __pyx_n_s_T); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->__pyx_base.T_ = __pyx_t_6;

  /* "PDSim\core\state_flooded.pyx":90
 * 
 *         self.T_  = params['T']
 *         self.p_  = params['P']             # <<<<<<<<<<<<<<
 *         self.xL_ = params['xL']
 *         self.pAS.update(constants_header.PT_INPUTS, self.p_*1000, self.T_)
 */
  if (unlikely(__pyx_v_params == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_params, __pyx_n_s_P); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->__pyx_base.p_ = __pyx_t_6;

  /* "PDSim\core\state_flooded.pyx":91
 *         self.T_  = params['T']
 *         self.p_  = params['P']
 *         self.xL_ = params['xL']             # <<<<<<<<<<<<<<
 *         self.pAS.update(constants_header.PT_INPUTS, self.p_*1000, self.T_)
 *         #self.rho_ = self.pAS.rhomass()
 */
  if (unlikely(__pyx_v_params == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_params, __pyx_n_s_xL); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->xL_ = __pyx_t_6;

  /* "PDSim\core\state_flooded.pyx":92
 *         self.p_  = params['P']
 *         self.xL_ = params['xL']
 *         self.pAS.update(constants_header.PT_INPUTS, self.p_*1000, self.T_)             # <<<<<<<<<<<<<<
 *         #self.rho_ = self.pAS.rhomass()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->update(__pyx_v_self->__pyx_base.pAS, CoolProp::PT_INPUTS, (__pyx_v_self->__pyx_base.p_ * 1000.0), __pyx_v_self->__pyx_base.T_, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":69
 *         self.xL_ = xL
 * 
 *     cpdef update(self, dict params):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5update(PyObject *__pyx_v_self, PyObject *__pyx_v_params); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_4update[] = "StateFlooded.update(self, dict params)\n\n        Parameters\n        params, dictionary\n            A dictionary of terms to be updated, with keys equal to single-char inputs to the Props function,\n            for instance ``dict(T=298, P = 101.325)`` would be one standard atmosphere\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5update(PyObject *__pyx_v_self, PyObject *__pyx_v_params) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), (&PyDict_Type), 1, "params", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4update(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self), ((PyObject*)__pyx_v_params));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4update(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, PyObject *__pyx_v_params) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_TraceCall("update", __pyx_f[0], 69);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update(__pyx_v_self, __pyx_v_params, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":111
 *         #self.rho_ = self.pAS.rhomass()
 * 
 *     cpdef StateFlooded copy2(self):             # <<<<<<<<<<<<<<
 *         """
 *         Make a copy of this StateFlooded class
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_7copy2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_copy2(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_S = 0;
  struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("copy2", 0);
  __Pyx_TraceCall("copy2", __pyx_f[0], 111);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_7copy2)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4core_13state_flooded_StateFlooded))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":115
 *         Make a copy of this StateFlooded class
 *         """
 *         cdef StateFlooded S = StateFlooded(self.Fluid,self.Liq,self.p_,self.T_,self.xL_,self.model)             # <<<<<<<<<<<<<<
 *         #S.phase = self.phase
 *         return S
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.p_); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.T_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->xL_); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.Fluid);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->__pyx_base.Fluid);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.Fluid);
  __Pyx_INCREF(__pyx_v_self->Liq);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_self->Liq);
  __Pyx_GIVEREF(__pyx_v_self->Liq);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->model);
  PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_v_self->model);
  __Pyx_GIVEREF(__pyx_v_self->model);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4core_13state_flooded_StateFlooded)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_S = ((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PDSim\core\state_flooded.pyx":117
 *         cdef StateFlooded S = StateFlooded(self.Fluid,self.Liq,self.p_,self.T_,self.xL_,self.model)
 *         #S.phase = self.phase
 *         return S             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_S));
  __pyx_r = __pyx_v_S;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":111
 *         #self.rho_ = self.pAS.rhomass()
 * 
 *     cpdef StateFlooded copy2(self):             # <<<<<<<<<<<<<<
 *         """
 *         Make a copy of this StateFlooded class
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.copy2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_S);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_7copy2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_6copy2[] = "StateFlooded.copy2(self) -> StateFlooded\n\n        Make a copy of this StateFlooded class\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_7copy2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy2 (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_6copy2(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_6copy2(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("copy2", 0);
  __Pyx_TraceCall("copy2", __pyx_f[0], 111);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_copy2(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.copy2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":120
 * 
 * 
 *     cpdef double s_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific entropy of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_9s_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T0;
  CYTHON_UNUSED double __pyx_v_P0;
  double __pyx_v_s_l;
  double __pyx_v_T;
  CYTHON_UNUSED long __pyx_v_a;
  double __pyx_v_cl_A;
  double __pyx_v_cl_B;
  double __pyx_v_cl_C;
  double __pyx_v_cl_D;
  double __pyx_v_MM_l;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("s_liq", 0);
  __Pyx_TraceCall("s_liq", __pyx_f[0], 120);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_9s_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":136
 *         """
 * 
 *         cdef double T0 = 273.15, P0 = 101.325, s_l, T = self.T_             # <<<<<<<<<<<<<<
 * 
 *         if self.Liq == b"PAO":
 */
  __pyx_v_T0 = 273.15;
  __pyx_v_P0 = 101.325;
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":138
 *         cdef double T0 = 273.15, P0 = 101.325, s_l, T = self.T_
 * 
 *         if self.Liq == b"PAO":             # <<<<<<<<<<<<<<
 *             s_l = 1.940 * log(T/T0)
 *         elif self.Liq == b"PAG":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAO, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":139
 * 
 *         if self.Liq == b"PAO":
 *             s_l = 1.940 * log(T/T0)             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"PAG":
 *             try:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_T0 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_T / __pyx_v_T0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_float_1_940, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_s_l = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":140
 *         if self.Liq == b"PAO":
 *             s_l = 1.940 * log(T/T0)
 *         elif self.Liq == b"PAG":             # <<<<<<<<<<<<<<
 *             try:
 *                 s_l = 2.74374E-03*(T-T0)+1.08646*log(T/T0)
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAG, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":141
 *             s_l = 1.940 * log(T/T0)
 *         elif self.Liq == b"PAG":
 *             try:             # <<<<<<<<<<<<<<
 *                 s_l = 2.74374E-03*(T-T0)+1.08646*log(T/T0)
 *             except:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "PDSim\core\state_flooded.pyx":142
 *         elif self.Liq == b"PAG":
 *             try:
 *                 s_l = 2.74374E-03*(T-T0)+1.08646*log(T/T0)             # <<<<<<<<<<<<<<
 *             except:
 *                 a=4
 */
        __pyx_t_2 = PyFloat_FromDouble((2.74374E-03 * (__pyx_v_T - __pyx_v_T0))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__pyx_v_T0 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }
        __pyx_t_3 = PyFloat_FromDouble((__pyx_v_T / __pyx_v_T0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Multiply(__pyx_float_1_08646, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_s_l = __pyx_t_5;
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "PDSim\core\state_flooded.pyx":143
 *             try:
 *                 s_l = 2.74374E-03*(T-T0)+1.08646*log(T/T0)
 *             except:             # <<<<<<<<<<<<<<
 *                 a=4
 *         elif self.Liq == b"POE":
 */
      /*except:*/ {
        __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_8, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_2);

        /* "PDSim\core\state_flooded.pyx":144
 *                 s_l = 2.74374E-03*(T-T0)+1.08646*log(T/T0)
 *             except:
 *                 a=4             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"POE":
 *             s_l = 2.30 * log(T/T0)
 */
        __pyx_v_a = 4;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L5_exception_handled;
      }
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":145
 *             except:
 *                 a=4
 *         elif self.Liq == b"POE":             # <<<<<<<<<<<<<<
 *             s_l = 2.30 * log(T/T0)
 *         elif self.Liq == b"Duratherm_LT":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":146
 *                 a=4
 *         elif self.Liq == b"POE":
 *             s_l = 2.30 * log(T/T0)             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Duratherm_LT":
 *             s_l = (3.4014*(T-298)+1094.3*log(T/298.0))/1000
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__pyx_v_T0 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_T / __pyx_v_T0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_12) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Multiply(__pyx_float_2_30, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_s_l = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":147
 *         elif self.Liq == b"POE":
 *             s_l = 2.30 * log(T/T0)
 *         elif self.Liq == b"Duratherm_LT":             # <<<<<<<<<<<<<<
 *             s_l = (3.4014*(T-298)+1094.3*log(T/298.0))/1000
 *         elif self.Liq == b"Zerol60":
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":148
 *             s_l = 2.30 * log(T/T0)
 *         elif self.Liq == b"Duratherm_LT":
 *             s_l = (3.4014*(T-298)+1094.3*log(T/298.0))/1000             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Zerol60":
 *             s_l = (5.186*(T-298)+3337.116*log(T/298.0))/1000
 */
    __pyx_t_8 = PyFloat_FromDouble((3.4014 * (__pyx_v_T - 298.0))); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_T / 298.0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_12) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_float_1094_3, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_1000); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_s_l = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":149
 *         elif self.Liq == b"Duratherm_LT":
 *             s_l = (3.4014*(T-298)+1094.3*log(T/298.0))/1000
 *         elif self.Liq == b"Zerol60":             # <<<<<<<<<<<<<<
 *             s_l = (5.186*(T-298)+3337.116*log(T/298.0))/1000
 *         elif self.Liq == b"Water":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":150
 *             s_l = (3.4014*(T-298)+1094.3*log(T/298.0))/1000
 *         elif self.Liq == b"Zerol60":
 *             s_l = (5.186*(T-298)+3337.116*log(T/298.0))/1000             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Water":
 *             cl_A=92.053
 */
    __pyx_t_3 = PyFloat_FromDouble((5.186 * (__pyx_v_T - 298.0))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_T / 298.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Multiply(__pyx_float_3337_116, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_1000); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_s_l = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":151
 *         elif self.Liq == b"Zerol60":
 *             s_l = (5.186*(T-298)+3337.116*log(T/298.0))/1000
 *         elif self.Liq == b"Water":             # <<<<<<<<<<<<<<
 *             cl_A=92.053
 *             cl_B=-0.039953
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Water, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":152
 *             s_l = (5.186*(T-298)+3337.116*log(T/298.0))/1000
 *         elif self.Liq == b"Water":
 *             cl_A=92.053             # <<<<<<<<<<<<<<
 *             cl_B=-0.039953
 *             cl_C=-0.00021103
 */
    __pyx_v_cl_A = 92.053;

    /* "PDSim\core\state_flooded.pyx":153
 *         elif self.Liq == b"Water":
 *             cl_A=92.053
 *             cl_B=-0.039953             # <<<<<<<<<<<<<<
 *             cl_C=-0.00021103
 *             cl_D=5.3469E-07
 */
    __pyx_v_cl_B = -0.039953;

    /* "PDSim\core\state_flooded.pyx":154
 *             cl_A=92.053
 *             cl_B=-0.039953
 *             cl_C=-0.00021103             # <<<<<<<<<<<<<<
 *             cl_D=5.3469E-07
 *             MM_l=18.0153
 */
    __pyx_v_cl_C = -0.00021103;

    /* "PDSim\core\state_flooded.pyx":155
 *             cl_B=-0.039953
 *             cl_C=-0.00021103
 *             cl_D=5.3469E-07             # <<<<<<<<<<<<<<
 *             MM_l=18.0153
 *             try:
 */
    __pyx_v_cl_D = 5.3469E-07;

    /* "PDSim\core\state_flooded.pyx":156
 *             cl_C=-0.00021103
 *             cl_D=5.3469E-07
 *             MM_l=18.0153             # <<<<<<<<<<<<<<
 *             try:
 *                 s_l = (cl_A*log(T/298.15) + cl_B*(T-298.15) + cl_C/2.0*(T*T-298.15*298.15) + cl_D/3.0*(T*T*T-298.15*298.15*298.15))/MM_l
 */
    __pyx_v_MM_l = 18.0153;

    /* "PDSim\core\state_flooded.pyx":157
 *             cl_D=5.3469E-07
 *             MM_l=18.0153
 *             try:             # <<<<<<<<<<<<<<
 *                 s_l = (cl_A*log(T/298.15) + cl_B*(T-298.15) + cl_C/2.0*(T*T-298.15*298.15) + cl_D/3.0*(T*T*T-298.15*298.15*298.15))/MM_l
 *             except:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "PDSim\core\state_flooded.pyx":158
 *             MM_l=18.0153
 *             try:
 *                 s_l = (cl_A*log(T/298.15) + cl_B*(T-298.15) + cl_C/2.0*(T*T-298.15*298.15) + cl_D/3.0*(T*T*T-298.15*298.15*298.15))/MM_l             # <<<<<<<<<<<<<<
 *             except:
 *                 a=1
 */
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_cl_A); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_log); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = PyFloat_FromDouble((__pyx_v_T / 298.15)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else {
          __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
          PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Multiply(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cl_B * (__pyx_v_T - 298.15))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_cl_C / 2.0) * ((__pyx_v_T * __pyx_v_T) - (298.15 * 298.15)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyNumber_Add(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_cl_D / 3.0) * (((__pyx_v_T * __pyx_v_T) * __pyx_v_T) - ((298.15 * 298.15) * 298.15)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_MM_l); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_s_l = __pyx_t_5;
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L21_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "PDSim\core\state_flooded.pyx":159
 *             try:
 *                 s_l = (cl_A*log(T/298.15) + cl_B*(T-298.15) + cl_C/2.0*(T*T-298.15*298.15) + cl_D/3.0*(T*T*T-298.15*298.15*298.15))/MM_l
 *             except:             # <<<<<<<<<<<<<<
 *                 a=1
 *         else:
 */
      /*except:*/ {
        __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_8);

        /* "PDSim\core\state_flooded.pyx":160
 *                 s_l = (cl_A*log(T/298.15) + cl_B*(T-298.15) + cl_C/2.0*(T*T-298.15*298.15) + cl_D/3.0*(T*T*T-298.15*298.15*298.15))/MM_l
 *             except:
 *                 a=1             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
        __pyx_v_a = 1;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L15_exception_handled;
      }
      __pyx_L16_except_error:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L15_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      __pyx_L21_try_end:;
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":162
 *                 a=1
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 * 
 *         return s_l #kJ/kg-K
 */
    __pyx_t_8 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":164
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 * 
 *         return s_l #kJ/kg-K             # <<<<<<<<<<<<<<
 * 
 *     cpdef double s_mix(self) except *:
 */
  __pyx_r = __pyx_v_s_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":120
 * 
 * 
 *     cpdef double s_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific entropy of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_9s_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_8s_liq[] = "StateFlooded.s_liq(self) -> double\n\n        Specific entropy of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        s_l: float\n            specific entropy [kJ/kg-K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_9s_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("s_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_8s_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_8s_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("s_liq", 0);
  __Pyx_TraceCall("s_liq", __pyx_f[0], 120);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":166
 *         return s_l #kJ/kg-K
 * 
 *     cpdef double s_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Entropy of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_11s_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_s_g;
  double __pyx_v_s_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("s_mix", 0);
  __Pyx_TraceCall("s_mix", __pyx_f[0], 166);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_11s_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":177
 * 
 *         cdef double s_g, s_l
 *         s_g = self.pAS.keyed_output(constants_header.iSmass)/1000.0             # <<<<<<<<<<<<<<
 *         s_m = self.xL_*self.s_liq() + (1-self.xL_)*s_g
 *         return s_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iSmass, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":178
 *         cdef double s_g, s_l
 *         s_g = self.pAS.keyed_output(constants_header.iSmass)/1000.0
 *         s_m = self.xL_*self.s_liq() + (1-self.xL_)*s_g             # <<<<<<<<<<<<<<
 *         return s_m
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->s_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s_m = ((__pyx_v_self->xL_ * __pyx_t_5) + ((1.0 - __pyx_v_self->xL_) * __pyx_v_s_g));

  /* "PDSim\core\state_flooded.pyx":179
 *         s_g = self.pAS.keyed_output(constants_header.iSmass)/1000.0
 *         s_m = self.xL_*self.s_liq() + (1-self.xL_)*s_g
 *         return s_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double u_liq(self) except *:
 */
  __pyx_r = __pyx_v_s_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":166
 *         return s_l #kJ/kg-K
 * 
 *     cpdef double s_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Entropy of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_11s_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_10s_mix[] = "StateFlooded.s_mix(self) -> double\n\n        Entropy of the mixture \n        \n        Returns\n        ---------\n        s_m: float\n            specific entropy [kJ/kg-K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_11s_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("s_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_10s_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_10s_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("s_mix", 0);
  __Pyx_TraceCall("s_mix", __pyx_f[0], 166);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":181
 *         return s_m
 * 
 *     cpdef double u_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific internal energy of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_13u_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T;
  double __pyx_v_u_l;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("u_liq", 0);
  __Pyx_TraceCall("u_liq", __pyx_f[0], 181);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_13u_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":197
 *         """
 * 
 *         cdef double T = self.T_             # <<<<<<<<<<<<<<
 *         if self.Liq == b"Duratherm_LT":
 *             #internal energy [kJ/kg] of Duratherm LT given T in K
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":198
 * 
 *         cdef double T = self.T_
 *         if self.Liq == b"Duratherm_LT":             # <<<<<<<<<<<<<<
 *             #internal energy [kJ/kg] of Duratherm LT given T in K
 *             u_l = (3.4014/2*T**2+1094.3*T)/1000  #LT
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":200
 *         if self.Liq == b"Duratherm_LT":
 *             #internal energy [kJ/kg] of Duratherm LT given T in K
 *             u_l = (3.4014/2*T**2+1094.3*T)/1000  #LT             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Zerol60":
 *             u_l = (5.186/2*T**2+337.116*T)/1000  #Zerol60
 */
    __pyx_v_u_l = ((((3.4014 / 2.0) * pow(__pyx_v_T, 2.0)) + (1094.3 * __pyx_v_T)) / 1000.0);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":201
 *             #internal energy [kJ/kg] of Duratherm LT given T in K
 *             u_l = (3.4014/2*T**2+1094.3*T)/1000  #LT
 *         elif self.Liq == b"Zerol60":             # <<<<<<<<<<<<<<
 *             u_l = (5.186/2*T**2+337.116*T)/1000  #Zerol60
 *         elif self.Liq == b"POE":
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":202
 *             u_l = (3.4014/2*T**2+1094.3*T)/1000  #LT
 *         elif self.Liq == b"Zerol60":
 *             u_l = (5.186/2*T**2+337.116*T)/1000  #Zerol60             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"POE":
 *             u_l = (2.0935/2*T**2 + 1186.7*T)/1000 #POE 150 SUS
 */
    __pyx_v_u_l = ((((5.186 / 2.0) * pow(__pyx_v_T, 2.0)) + (337.116 * __pyx_v_T)) / 1000.0);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":203
 *         elif self.Liq == b"Zerol60":
 *             u_l = (5.186/2*T**2+337.116*T)/1000  #Zerol60
 *         elif self.Liq == b"POE":             # <<<<<<<<<<<<<<
 *             u_l = (2.0935/2*T**2 + 1186.7*T)/1000 #POE 150 SUS
 *         else:
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":204
 *             u_l = (5.186/2*T**2+337.116*T)/1000  #Zerol60
 *         elif self.Liq == b"POE":
 *             u_l = (2.0935/2*T**2 + 1186.7*T)/1000 #POE 150 SUS             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
    __pyx_v_u_l = ((((2.0935 / 2.0) * pow(__pyx_v_T, 2.0)) + (1186.7 * __pyx_v_T)) / 1000.0);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":206
 *             u_l = (2.0935/2*T**2 + 1186.7*T)/1000 #POE 150 SUS
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 * 
 *         return u_l  #kJ/kg
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":208
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 * 
 *         return u_l  #kJ/kg             # <<<<<<<<<<<<<<
 * 
 *     cpdef double u_mix(self) except *:
 */
  __pyx_r = __pyx_v_u_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":181
 *         return s_m
 * 
 *     cpdef double u_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific internal energy of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.u_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_13u_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_12u_liq[] = "StateFlooded.u_liq(self) -> double\n\n        Specific internal energy of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        u_l: float\n            specific internal energy [kJ/kg]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_13u_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_12u_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_12u_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("u_liq", 0);
  __Pyx_TraceCall("u_liq", __pyx_f[0], 181);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.u_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":210
 *         return u_l  #kJ/kg
 * 
 *     cpdef double u_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific internal energy of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_15u_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_u_l;
  double __pyx_v_u_g;
  double __pyx_v_u_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("u_mix", 0);
  __Pyx_TraceCall("u_mix", __pyx_f[0], 210);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_15u_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":221
 * 
 *         cdef double u_l, u_g, u_m
 *         u_l = self.u_liq()             # <<<<<<<<<<<<<<
 *         u_g = self.pAS.keyed_output(constants_header.iUmass)/1000.0
 *         u_m = self.xL_*u_l + (1-self.xL_)*u_g
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_u_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":222
 *         cdef double u_l, u_g, u_m
 *         u_l = self.u_liq()
 *         u_g = self.pAS.keyed_output(constants_header.iUmass)/1000.0             # <<<<<<<<<<<<<<
 *         u_m = self.xL_*u_l + (1-self.xL_)*u_g
 *         return u_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iUmass, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_u_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":223
 *         u_l = self.u_liq()
 *         u_g = self.pAS.keyed_output(constants_header.iUmass)/1000.0
 *         u_m = self.xL_*u_l + (1-self.xL_)*u_g             # <<<<<<<<<<<<<<
 *         return u_m
 * 
 */
  __pyx_v_u_m = ((__pyx_v_self->xL_ * __pyx_v_u_l) + ((1.0 - __pyx_v_self->xL_) * __pyx_v_u_g));

  /* "PDSim\core\state_flooded.pyx":224
 *         u_g = self.pAS.keyed_output(constants_header.iUmass)/1000.0
 *         u_m = self.xL_*u_l + (1-self.xL_)*u_g
 *         return u_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double h_liq(self) except *:
 */
  __pyx_r = __pyx_v_u_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":210
 *         return u_l  #kJ/kg
 * 
 *     cpdef double u_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific internal energy of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.u_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_15u_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_14u_mix[] = "StateFlooded.u_mix(self) -> double\n\n        Specific internal energy of the mixture \n        \n        Returns\n        ---------\n        u_m: float\n            specific internal energy [kJ/kg]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_15u_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_14u_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_14u_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("u_mix", 0);
  __Pyx_TraceCall("u_mix", __pyx_f[0], 210);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.u_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":226
 *         return u_m
 * 
 *     cpdef double h_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific enthalpy of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_17h_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T0;
  double __pyx_v_P0;
  CYTHON_UNUSED double __pyx_v_h;
  double __pyx_v_h_l;
  double __pyx_v_T;
  double __pyx_v_P;
  CYTHON_UNUSED double __pyx_v_rho_l;
  double __pyx_v_cl_A;
  double __pyx_v_cl_B;
  double __pyx_v_cl_C;
  double __pyx_v_cl_D;
  double __pyx_v_MM_l;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("h_liq", 0);
  __Pyx_TraceCall("h_liq", __pyx_f[0], 226);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_17h_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":245
 * 
 * 
 *         cdef double T0 = 273.15, P0 = 101.325, h = 0, h_l = 0, T = self.T_, P = self.p_             # <<<<<<<<<<<<<<
 *         if self.Liq == b'PAO':
 *             h_l = 1.940*(T-T0)+(P-P0)/849
 */
  __pyx_v_T0 = 273.15;
  __pyx_v_P0 = 101.325;
  __pyx_v_h = 0.0;
  __pyx_v_h_l = 0.0;
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;
  __pyx_t_5 = __pyx_v_self->__pyx_base.p_;
  __pyx_v_P = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":246
 * 
 *         cdef double T0 = 273.15, P0 = 101.325, h = 0, h_l = 0, T = self.T_, P = self.p_
 *         if self.Liq == b'PAO':             # <<<<<<<<<<<<<<
 *             h_l = 1.940*(T-T0)+(P-P0)/849
 *         elif self.Liq == b'PAG':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAO, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":247
 *         cdef double T0 = 273.15, P0 = 101.325, h = 0, h_l = 0, T = self.T_, P = self.p_
 *         if self.Liq == b'PAO':
 *             h_l = 1.940*(T-T0)+(P-P0)/849             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'PAG':
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 */
    __pyx_v_h_l = ((1.940 * (__pyx_v_T - __pyx_v_T0)) + ((__pyx_v_P - __pyx_v_P0) / 849.0));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":248
 *         if self.Liq == b'PAO':
 *             h_l = 1.940*(T-T0)+(P-P0)/849
 *         elif self.Liq == b'PAG':             # <<<<<<<<<<<<<<
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAG, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":250
 *         elif self.Liq == b'PAG':
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;             # <<<<<<<<<<<<<<
 *             h_l = 2.74374E-03*(T**2-T0**2)/2.0+1.08646*(T-T0)+(P-P0)/self.rho_liq();
 *         elif self.Liq == b'POE':
 */
    __pyx_v_rho_l = ((-0.726923 * __pyx_v_T) + 1200.22);

    /* "PDSim\core\state_flooded.pyx":251
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;
 *             h_l = 2.74374E-03*(T**2-T0**2)/2.0+1.08646*(T-T0)+(P-P0)/self.rho_liq();             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'POE':
 *             # From Totten, p 261, cp=0.55 cal/g-C --> 2.30 kJ/kg-K
 */
    __pyx_t_5 = (__pyx_v_P - __pyx_v_P0);
    __pyx_t_8 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_8 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_h_l = ((((2.74374E-03 * (pow(__pyx_v_T, 2.0) - pow(__pyx_v_T0, 2.0))) / 2.0) + (1.08646 * (__pyx_v_T - __pyx_v_T0))) + (__pyx_t_5 / __pyx_t_8));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":252
 *             rho_l = -0.726923*T+1200.22;
 *             h_l = 2.74374E-03*(T**2-T0**2)/2.0+1.08646*(T-T0)+(P-P0)/self.rho_liq();
 *         elif self.Liq == b'POE':             # <<<<<<<<<<<<<<
 *             # From Totten, p 261, cp=0.55 cal/g-C --> 2.30 kJ/kg-K
 *             h_l = 2.30*(T-T0)+(P-P0)/930
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":254
 *         elif self.Liq == b'POE':
 *             # From Totten, p 261, cp=0.55 cal/g-C --> 2.30 kJ/kg-K
 *             h_l = 2.30*(T-T0)+(P-P0)/930             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Duratherm_LT':
 *             #the specific enthalpy of Duratherm LT [kJ/kg-k]"
 */
    __pyx_v_h_l = ((2.30 * (__pyx_v_T - __pyx_v_T0)) + ((__pyx_v_P - __pyx_v_P0) / 930.0));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":255
 *             # From Totten, p 261, cp=0.55 cal/g-C --> 2.30 kJ/kg-K
 *             h_l = 2.30*(T-T0)+(P-P0)/930
 *         elif self.Liq == b'Duratherm_LT':             # <<<<<<<<<<<<<<
 *             #the specific enthalpy of Duratherm LT [kJ/kg-k]"
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":257
 *         elif self.Liq == b'Duratherm_LT':
 *             #the specific enthalpy of Duratherm LT [kJ/kg-k]"
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Zerol60":
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_v_P - __pyx_v_P0);
    __pyx_t_9 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_9 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_h_l = ((__pyx_t_8 / 1000.0) + (__pyx_t_5 / __pyx_t_9));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":258
 *             #the specific enthalpy of Duratherm LT [kJ/kg-k]"
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 *         elif self.Liq == b"Zerol60":             # <<<<<<<<<<<<<<
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 *         elif self.Liq == b'Water':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":259
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 *         elif self.Liq == b"Zerol60":
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Water':
 *             cl_A = 92.053
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_v_P - __pyx_v_P0);
    __pyx_t_8 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_8 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_h_l = ((__pyx_t_9 / 1000.0) + (__pyx_t_5 / __pyx_t_8));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":260
 *         elif self.Liq == b"Zerol60":
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 *         elif self.Liq == b'Water':             # <<<<<<<<<<<<<<
 *             cl_A = 92.053
 *             cl_B = -0.039953
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Water, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":261
 *             h_l = self.u_liq()/1000 + (P-P0)/self.rho_liq()
 *         elif self.Liq == b'Water':
 *             cl_A = 92.053             # <<<<<<<<<<<<<<
 *             cl_B = -0.039953
 *             cl_C = -0.00021103
 */
    __pyx_v_cl_A = 92.053;

    /* "PDSim\core\state_flooded.pyx":262
 *         elif self.Liq == b'Water':
 *             cl_A = 92.053
 *             cl_B = -0.039953             # <<<<<<<<<<<<<<
 *             cl_C = -0.00021103
 *             cl_D = 5.3469E-07
 */
    __pyx_v_cl_B = -0.039953;

    /* "PDSim\core\state_flooded.pyx":263
 *             cl_A = 92.053
 *             cl_B = -0.039953
 *             cl_C = -0.00021103             # <<<<<<<<<<<<<<
 *             cl_D = 5.3469E-07
 *             MM_l = 18.0153
 */
    __pyx_v_cl_C = -0.00021103;

    /* "PDSim\core\state_flooded.pyx":264
 *             cl_B = -0.039953
 *             cl_C = -0.00021103
 *             cl_D = 5.3469E-07             # <<<<<<<<<<<<<<
 *             MM_l = 18.0153
 *             h_l = (cl_A*(T-298.15) + cl_B/2.0*(T**2-298.15**2) + cl_C/3.0*(T**3-298.15**3) + cl_D/4.0*(T**4-298.15**4))/MM_l+(P-P0)/self.rho_liq()
 */
    __pyx_v_cl_D = 5.3469E-07;

    /* "PDSim\core\state_flooded.pyx":265
 *             cl_C = -0.00021103
 *             cl_D = 5.3469E-07
 *             MM_l = 18.0153             # <<<<<<<<<<<<<<
 *             h_l = (cl_A*(T-298.15) + cl_B/2.0*(T**2-298.15**2) + cl_C/3.0*(T**3-298.15**3) + cl_D/4.0*(T**4-298.15**4))/MM_l+(P-P0)/self.rho_liq()
 *         else:
 */
    __pyx_v_MM_l = 18.0153;

    /* "PDSim\core\state_flooded.pyx":266
 *             cl_D = 5.3469E-07
 *             MM_l = 18.0153
 *             h_l = (cl_A*(T-298.15) + cl_B/2.0*(T**2-298.15**2) + cl_C/3.0*(T**3-298.15**3) + cl_D/4.0*(T**4-298.15**4))/MM_l+(P-P0)/self.rho_liq()             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
    __pyx_t_8 = ((((__pyx_v_cl_A * (__pyx_v_T - 298.15)) + ((__pyx_v_cl_B / 2.0) * (pow(__pyx_v_T, 2.0) - pow(298.15, 2.0)))) + ((__pyx_v_cl_C / 3.0) * (pow(__pyx_v_T, 3.0) - pow(298.15, 3.0)))) + ((__pyx_v_cl_D / 4.0) * (pow(__pyx_v_T, 4.0) - pow(298.15, 4.0))));
    if (unlikely(__pyx_v_MM_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (__pyx_v_P - __pyx_v_P0);
    __pyx_t_9 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_9 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_h_l = ((__pyx_t_8 / __pyx_v_MM_l) + (__pyx_t_5 / __pyx_t_9));
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":268
 *             h_l = (cl_A*(T-298.15) + cl_B/2.0*(T**2-298.15**2) + cl_C/3.0*(T**3-298.15**3) + cl_D/4.0*(T**4-298.15**4))/MM_l+(P-P0)/self.rho_liq()
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 * 
 *         return h_l #kJ/kg
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":270
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 * 
 *         return h_l #kJ/kg             # <<<<<<<<<<<<<<
 * 
 *     cpdef double h_mix(self) except *:
 */
  __pyx_r = __pyx_v_h_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":226
 *         return u_m
 * 
 *     cpdef double h_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific enthalpy of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.h_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_17h_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_16h_liq[] = "StateFlooded.h_liq(self) -> double\n\n        Specific enthalpy of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        P: float\n            Pressure [kPa]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        h_l: float\n            specific enthalpy[kJ/kg]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_17h_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("h_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_16h_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_16h_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("h_liq", 0);
  __Pyx_TraceCall("h_liq", __pyx_f[0], 226);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.h_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":272
 *         return h_l #kJ/kg
 * 
 *     cpdef double h_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific enthalpy of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_19h_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_h_g;
  double __pyx_v_h_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("h_mix", 0);
  __Pyx_TraceCall("h_mix", __pyx_f[0], 272);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_19h_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":283
 * 
 *         cdef double h_g, h_m
 *         h_g = self.pAS.keyed_output(constants_header.iHmass)/1000.0             # <<<<<<<<<<<<<<
 *         h_m = self.xL_*self.h_liq() + (1-self.xL_)*h_g
 *         return h_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iHmass, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":284
 *         cdef double h_g, h_m
 *         h_g = self.pAS.keyed_output(constants_header.iHmass)/1000.0
 *         h_m = self.xL_*self.h_liq() + (1-self.xL_)*h_g             # <<<<<<<<<<<<<<
 *         return h_m
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->h_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h_m = ((__pyx_v_self->xL_ * __pyx_t_5) + ((1.0 - __pyx_v_self->xL_) * __pyx_v_h_g));

  /* "PDSim\core\state_flooded.pyx":285
 *         h_g = self.pAS.keyed_output(constants_header.iHmass)/1000.0
 *         h_m = self.xL_*self.h_liq() + (1-self.xL_)*h_g
 *         return h_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double e_mix(self) except *:
 */
  __pyx_r = __pyx_v_h_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":272
 *         return h_l #kJ/kg
 * 
 *     cpdef double h_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific enthalpy of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.h_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_19h_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_18h_mix[] = "StateFlooded.h_mix(self) -> double\n\n        Specific enthalpy of the mixture \n        \n        Returns\n        ---------\n        h_m: float\n            specific internal energy [kJ/kg]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_19h_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("h_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_18h_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_18h_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("h_mix", 0);
  __Pyx_TraceCall("h_mix", __pyx_f[0], 272);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.h_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":287
 *         return h_m
 * 
 *     cpdef double e_mix(self) except *:             # <<<<<<<<<<<<<<
 *        """
 *        Specific Exergy of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_21e_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_e_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T0_ref;
  double __pyx_v_P0_ref;
  double __pyx_v_e_m;
  double __pyx_v_h_mix;
  double __pyx_v_h_mix_ref;
  double __pyx_v_s_mix;
  CYTHON_UNUSED double __pyx_v_s_mix_ref;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("e_mix", 0);
  __Pyx_TraceCall("e_mix", __pyx_f[0], 287);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_e_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_21e_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":298
 *        """
 * 
 *        cdef double T0_ref = 25+273.15, P0_ref = 101.325,             # <<<<<<<<<<<<<<
 *        cdef double e_m, h_mix, h_mix_ref, s_mix, s_mix_ref
 * 
 */
  __pyx_v_T0_ref = (25.0 + 273.15);
  __pyx_v_P0_ref = 101.325;

  /* "PDSim\core\state_flooded.pyx":301
 *        cdef double e_m, h_mix, h_mix_ref, s_mix, s_mix_ref
 * 
 *        h_mix = self.h_mix()             # <<<<<<<<<<<<<<
 *        s_mix = self.s_mix()
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->h_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h_mix = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":302
 * 
 *        h_mix = self.h_mix()
 *        s_mix = self.s_mix()             # <<<<<<<<<<<<<<
 * 
 *        self.update(dict(T = T0_ref, P = P0_ref, xL = self.xL_))
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->s_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s_mix = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":304
 *        s_mix = self.s_mix()
 * 
 *        self.update(dict(T = T0_ref, P = P0_ref, xL = self.xL_))             # <<<<<<<<<<<<<<
 * 
 *        h_mix_ref = self.h_mix()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_T0_ref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_T, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_P0_ref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_P, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->xL_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_xL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.update(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), ((PyObject*)__pyx_t_1), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":306
 *        self.update(dict(T = T0_ref, P = P0_ref, xL = self.xL_))
 * 
 *        h_mix_ref = self.h_mix()             # <<<<<<<<<<<<<<
 *        s_mix_ref = self.s_mix()
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->h_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h_mix_ref = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":307
 * 
 *        h_mix_ref = self.h_mix()
 *        s_mix_ref = self.s_mix()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->s_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s_mix_ref = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":310
 * 
 * 
 *        e_m = h_mix - h_mix_ref - T0_ref*(s_mix) # - s_mix_ref             # <<<<<<<<<<<<<<
 * 
 *        if isnan(e_m) == True:
 */
  __pyx_v_e_m = ((__pyx_v_h_mix - __pyx_v_h_mix_ref) - (__pyx_v_T0_ref * __pyx_v_s_mix));

  /* "PDSim\core\state_flooded.pyx":312
 *        e_m = h_mix - h_mix_ref - T0_ref*(s_mix) # - s_mix_ref
 * 
 *        if isnan(e_m) == True:             # <<<<<<<<<<<<<<
 *            print 'e_m is a NaN'
 *        if isinf(e_m) == True:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_e_m); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":313
 * 
 *        if isnan(e_m) == True:
 *            print 'e_m is a NaN'             # <<<<<<<<<<<<<<
 *        if isinf(e_m) == True:
 *            print 'e_m is Infinite'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_e_m_is_a_NaN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":314
 *        if isnan(e_m) == True:
 *            print 'e_m is a NaN'
 *        if isinf(e_m) == True:             # <<<<<<<<<<<<<<
 *            print 'e_m is Infinite'
 *        else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_isinf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_e_m); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":315
 *            print 'e_m is a NaN'
 *        if isinf(e_m) == True:
 *            print 'e_m is Infinite'             # <<<<<<<<<<<<<<
 *        else:
 *            return e_m
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_e_m_is_Infinite) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L4;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":317
 *            print 'e_m is Infinite'
 *        else:
 *            return e_m             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = __pyx_v_e_m;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "PDSim\core\state_flooded.pyx":287
 *         return h_m
 * 
 *     cpdef double e_mix(self) except *:             # <<<<<<<<<<<<<<
 *        """
 *        Specific Exergy of the mixture
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.e_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_21e_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_20e_mix[] = "StateFlooded.e_mix(self) -> double\n\n       Specific Exergy of the mixture\n       \n       \n       Returns\n       -------\n       e_mix: float\n                Specific exergy [kJ/kg]\n       ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_21e_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("e_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_20e_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_20e_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("e_mix", 0);
  __Pyx_TraceCall("e_mix", __pyx_f[0], 287);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_e_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.e_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":320
 * 
 * 
 *     cpdef double rho_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Density of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_23rho_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_rho_l;
  double __pyx_v_T;
  double __pyx_v_rhol_A;
  double __pyx_v_rhol_B;
  double __pyx_v_rhol_n;
  double __pyx_v_rhol_Tc;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("rho_liq", 0);
  __Pyx_TraceCall("rho_liq", __pyx_f[0], 320);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rho_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_23rho_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":336
 *         """
 * 
 *         cdef double rho_l, T = self.T_             # <<<<<<<<<<<<<<
 *         if self.Liq == b'PAO':
 *             rho_l = 849
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":337
 * 
 *         cdef double rho_l, T = self.T_
 *         if self.Liq == b'PAO':             # <<<<<<<<<<<<<<
 *             rho_l = 849
 *         elif self.Liq == b'PAG':  # PAG 0-OB-1020 from Tribology Data Handbook
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAO, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":338
 *         cdef double rho_l, T = self.T_
 *         if self.Liq == b'PAO':
 *             rho_l = 849             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'PAG':  # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;
 */
    __pyx_v_rho_l = 849.0;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":339
 *         if self.Liq == b'PAO':
 *             rho_l = 849
 *         elif self.Liq == b'PAG':  # PAG 0-OB-1020 from Tribology Data Handbook             # <<<<<<<<<<<<<<
 *             rho_l = -0.726923*T+1200.22;
 *         elif self.Liq == b'POE':
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAG, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":340
 *             rho_l = 849
 *         elif self.Liq == b'PAG':  # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'POE':
 *             rho_l = 930
 */
    __pyx_v_rho_l = ((-0.726923 * __pyx_v_T) + 1200.22);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":341
 *         elif self.Liq == b'PAG':  # PAG 0-OB-1020 from Tribology Data Handbook
 *             rho_l = -0.726923*T+1200.22;
 *         elif self.Liq == b'POE':             # <<<<<<<<<<<<<<
 *             rho_l = 930
 *         elif self.Liq == b'Duratherm_LT':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":342
 *             rho_l = -0.726923*T+1200.22;
 *         elif self.Liq == b'POE':
 *             rho_l = 930             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Duratherm_LT':
 *             #density [kg/m^3] of Duratherm LT given T in K"
 */
    __pyx_v_rho_l = 930.0;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":343
 *         elif self.Liq == b'POE':
 *             rho_l = 930
 *         elif self.Liq == b'Duratherm_LT':             # <<<<<<<<<<<<<<
 *             #density [kg/m^3] of Duratherm LT given T in K"
 *             rho_l = -0.6793*T + 1012.4
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":345
 *         elif self.Liq == b'Duratherm_LT':
 *             #density [kg/m^3] of Duratherm LT given T in K"
 *             rho_l = -0.6793*T + 1012.4             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Zerol60":
 *             rho_l = -0.667*T + 1050.86
 */
    __pyx_v_rho_l = ((-0.6793 * __pyx_v_T) + 1012.4);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":346
 *             #density [kg/m^3] of Duratherm LT given T in K"
 *             rho_l = -0.6793*T + 1012.4
 *         elif self.Liq == b"Zerol60":             # <<<<<<<<<<<<<<
 *             rho_l = -0.667*T + 1050.86
 *         elif self.Liq == b"Water":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":347
 *             rho_l = -0.6793*T + 1012.4
 *         elif self.Liq == b"Zerol60":
 *             rho_l = -0.667*T + 1050.86             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Water":
 *             # Water Props from Yaws
 */
    __pyx_v_rho_l = ((-0.667 * __pyx_v_T) + 1050.86);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":348
 *         elif self.Liq == b"Zerol60":
 *             rho_l = -0.667*T + 1050.86
 *         elif self.Liq == b"Water":             # <<<<<<<<<<<<<<
 *             # Water Props from Yaws
 *             rhol_A=0.3471
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Water, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":350
 *         elif self.Liq == b"Water":
 *             # Water Props from Yaws
 *             rhol_A=0.3471             # <<<<<<<<<<<<<<
 *             rhol_B=0.274
 *             rhol_n=0.28571
 */
    __pyx_v_rhol_A = 0.3471;

    /* "PDSim\core\state_flooded.pyx":351
 *             # Water Props from Yaws
 *             rhol_A=0.3471
 *             rhol_B=0.274             # <<<<<<<<<<<<<<
 *             rhol_n=0.28571
 *             rhol_Tc=647.13
 */
    __pyx_v_rhol_B = 0.274;

    /* "PDSim\core\state_flooded.pyx":352
 *             rhol_A=0.3471
 *             rhol_B=0.274
 *             rhol_n=0.28571             # <<<<<<<<<<<<<<
 *             rhol_Tc=647.13
 *             rho_l = rhol_A/pow(rhol_B,pow(1-T/rhol_Tc,rhol_n))*1000;
 */
    __pyx_v_rhol_n = 0.28571;

    /* "PDSim\core\state_flooded.pyx":353
 *             rhol_B=0.274
 *             rhol_n=0.28571
 *             rhol_Tc=647.13             # <<<<<<<<<<<<<<
 *             rho_l = rhol_A/pow(rhol_B,pow(1-T/rhol_Tc,rhol_n))*1000;
 *         else:
 */
    __pyx_v_rhol_Tc = 647.13;

    /* "PDSim\core\state_flooded.pyx":354
 *             rhol_n=0.28571
 *             rhol_Tc=647.13
 *             rho_l = rhol_A/pow(rhol_B,pow(1-T/rhol_Tc,rhol_n))*1000;             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rhol_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_rhol_B); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_rhol_Tc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyFloat_FromDouble((1.0 - (__pyx_v_T / __pyx_v_rhol_Tc))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rhol_n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyNumber_Power2(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Power2(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_8, __pyx_int_1000); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_rho_l = __pyx_t_5;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":356
 *             rho_l = rhol_A/pow(rhol_B,pow(1-T/rhol_Tc,rhol_n))*1000;
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 *         return rho_l
 * 
 */
    __pyx_t_4 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":357
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 *         return rho_l             # <<<<<<<<<<<<<<
 * 
 *     cpdef double rho_mix(self) except *:
 */
  __pyx_r = __pyx_v_rho_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":320
 * 
 * 
 *     cpdef double rho_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Density of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.rho_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_23rho_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_22rho_liq[] = "StateFlooded.rho_liq(self) -> double\n\n        Density of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        rho_l: float\n            density [kg/m^3]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_23rho_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rho_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_22rho_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_22rho_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("rho_liq", 0);
  __Pyx_TraceCall("rho_liq", __pyx_f[0], 320);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.rho_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":359
 *         return rho_l
 * 
 *     cpdef double rho_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Density of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_25rho_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_v_g;
  double __pyx_v_v_l;
  double __pyx_v_x_g;
  double __pyx_v_S;
  double __pyx_v_x;
  double __pyx_v_rho_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("rho_mix", 0);
  __Pyx_TraceCall("rho_mix", __pyx_f[0], 359);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rho_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_25rho_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":377
 *         cdef double rho, v_g, v_l, x_g, S, x
 * 
 *         v_l = 1.0/self.rho_liq()             # <<<<<<<<<<<<<<
 *         v_g = 1.0/self.pAS.rhomass()
 *         x_g = 1.0 - self.xL_
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_l = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":378
 * 
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()             # <<<<<<<<<<<<<<
 *         x_g = 1.0 - self.xL_
 *         x = x_g
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->rhomass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_g = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":379
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()
 *         x_g = 1.0 - self.xL_             # <<<<<<<<<<<<<<
 *         x = x_g
 * 
 */
  __pyx_v_x_g = (1.0 - __pyx_v_self->xL_);

  /* "PDSim\core\state_flooded.pyx":380
 *         v_g = 1.0/self.pAS.rhomass()
 *         x_g = 1.0 - self.xL_
 *         x = x_g             # <<<<<<<<<<<<<<
 * 
 *         if self.model == 'HEM':
 */
  __pyx_v_x = __pyx_v_x_g;

  /* "PDSim\core\state_flooded.pyx":382
 *         x = x_g
 * 
 *         if self.model == 'HEM':             # <<<<<<<<<<<<<<
 *             S = 1
 *         elif self.model == 'Zivi':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->model, __pyx_n_s_HEM, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":383
 * 
 *         if self.model == 'HEM':
 *             S = 1             # <<<<<<<<<<<<<<
 *         elif self.model == 'Zivi':
 *             S = (v_g/v_l)**(0.33333) # Eqn. 4.57 from Chisholm
 */
    __pyx_v_S = 1.0;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":384
 *         if self.model == 'HEM':
 *             S = 1
 *         elif self.model == 'Zivi':             # <<<<<<<<<<<<<<
 *             S = (v_g/v_l)**(0.33333) # Eqn. 4.57 from Chisholm
 *         elif self.model == 'Fauske':
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->model, __pyx_n_s_Zivi, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":385
 *             S = 1
 *         elif self.model == 'Zivi':
 *             S = (v_g/v_l)**(0.33333) # Eqn. 4.57 from Chisholm             # <<<<<<<<<<<<<<
 *         elif self.model == 'Fauske':
 *             S = (v_g/v_l)**(0.5)     # Eqn. 4.57 from Chisholm
 */
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_S = pow((__pyx_v_v_g / __pyx_v_v_l), 0.33333);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":386
 *         elif self.model == 'Zivi':
 *             S = (v_g/v_l)**(0.33333) # Eqn. 4.57 from Chisholm
 *         elif self.model == 'Fauske':             # <<<<<<<<<<<<<<
 *             S = (v_g/v_l)**(0.5)     # Eqn. 4.57 from Chisholm
 * 
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->model, __pyx_n_s_Fauske, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":387
 *             S = (v_g/v_l)**(0.33333) # Eqn. 4.57 from Chisholm
 *         elif self.model == 'Fauske':
 *             S = (v_g/v_l)**(0.5)     # Eqn. 4.57 from Chisholm             # <<<<<<<<<<<<<<
 * 
 *         rho_m = (x + S*(1.0-x))/(x*v_g + S*(1.0-x)*v_l) #Eq 2.36 from Chisholm
 */
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_S = pow((__pyx_v_v_g / __pyx_v_v_l), 0.5);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":389
 *             S = (v_g/v_l)**(0.5)     # Eqn. 4.57 from Chisholm
 * 
 *         rho_m = (x + S*(1.0-x))/(x*v_g + S*(1.0-x)*v_l) #Eq 2.36 from Chisholm             # <<<<<<<<<<<<<<
 * 
 *         if x>0:
 */
  __pyx_t_5 = (__pyx_v_x + (__pyx_v_S * (1.0 - __pyx_v_x)));
  __pyx_t_8 = ((__pyx_v_x * __pyx_v_v_g) + ((__pyx_v_S * (1.0 - __pyx_v_x)) * __pyx_v_v_l));
  if (unlikely(__pyx_t_8 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rho_m = (__pyx_t_5 / __pyx_t_8);

  /* "PDSim\core\state_flooded.pyx":391
 *         rho_m = (x + S*(1.0-x))/(x*v_g + S*(1.0-x)*v_l) #Eq 2.36 from Chisholm
 * 
 *         if x>0:             # <<<<<<<<<<<<<<
 *             self.alpha = 1.0/(1.0+(1.0-x)/x*v_l/v_g*S)
 *         else:
 */
  __pyx_t_7 = ((__pyx_v_x > 0.0) != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":392
 * 
 *         if x>0:
 *             self.alpha = 1.0/(1.0+(1.0-x)/x*v_l/v_g*S)             # <<<<<<<<<<<<<<
 *         else:
 *             self.alpha = 0.0
 */
    __pyx_t_8 = (1.0 - __pyx_v_x);
    if (unlikely(__pyx_v_x == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = ((__pyx_t_8 / __pyx_v_x) * __pyx_v_v_l);
    if (unlikely(__pyx_v_v_g == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = (1.0 + ((__pyx_t_5 / __pyx_v_v_g) * __pyx_v_S));
    if (unlikely(__pyx_t_8 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->alpha = (1.0 / __pyx_t_8);
    goto __pyx_L4;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":394
 *             self.alpha = 1.0/(1.0+(1.0-x)/x*v_l/v_g*S)
 *         else:
 *             self.alpha = 0.0             # <<<<<<<<<<<<<<
 *         return rho_m
 * 
 */
    __pyx_v_self->alpha = 0.0;
  }
  __pyx_L4:;

  /* "PDSim\core\state_flooded.pyx":395
 *         else:
 *             self.alpha = 0.0
 *         return rho_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double cp_liq(self) except *:
 */
  __pyx_r = __pyx_v_rho_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":359
 *         return rho_l
 * 
 *     cpdef double rho_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Density of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.rho_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_25rho_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_24rho_mix[] = "StateFlooded.rho_mix(self) -> double\n\n        Density of the mixture \n        \n        Parameters\n        ----------\n        model: string\n                Slip ratio correlation: \"HEM\", \"Zivi\",\"Fauske\"\n        \n        Returns\n        ---------\n        rho_m: float\n            specific internal energy [kJ/kg]\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_25rho_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rho_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_24rho_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_24rho_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("rho_mix", 0);
  __Pyx_TraceCall("rho_mix", __pyx_f[0], 359);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.rho_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":397
 *         return rho_m
 * 
 *     cpdef double cp_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_27cp_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T;
  double __pyx_v_cp_l;
  double __pyx_v_one_over_MM_l;
  double __pyx_v_cl_A;
  double __pyx_v_cl_B;
  double __pyx_v_cl_C;
  double __pyx_v_cl_D;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cp_liq", 0);
  __Pyx_TraceCall("cp_liq", __pyx_f[0], 397);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cp_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_27cp_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":413
 *         """
 * 
 *         cdef double T = self.T_, cp_l             # <<<<<<<<<<<<<<
 *         if self.Liq == b'PAO':
 *             cp_l = 1.940
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":414
 * 
 *         cdef double T = self.T_, cp_l
 *         if self.Liq == b'PAO':             # <<<<<<<<<<<<<<
 *             cp_l = 1.940
 *         elif self.Liq == b'POE':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAO, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":415
 *         cdef double T = self.T_, cp_l
 *         if self.Liq == b'PAO':
 *             cp_l = 1.940             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'POE':
 *             cp_l = 2.30
 */
    __pyx_v_cp_l = 1.940;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":416
 *         if self.Liq == b'PAO':
 *             cp_l = 1.940
 *         elif self.Liq == b'POE':             # <<<<<<<<<<<<<<
 *             cp_l = 2.30
 *         elif self.Liq == b'PAG':
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":417
 *             cp_l = 1.940
 *         elif self.Liq == b'POE':
 *             cp_l = 2.30             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'PAG':
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 */
    __pyx_v_cp_l = 2.30;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":418
 *         elif self.Liq == b'POE':
 *             cp_l = 2.30
 *         elif self.Liq == b'PAG':             # <<<<<<<<<<<<<<
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 *             # T in K, cp in kJ/kg-K
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_PAG, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":421
 *             # PAG 0-OB-1020 from Tribology Data Handbook
 *             # T in K, cp in kJ/kg-K
 *             cp_l = 2.74374E-03*T+1.08646;             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Duratherm_LT':
 *             #specific heat [kJ/kg-K] of Duratherm LT given T in K
 */
    __pyx_v_cp_l = ((2.74374E-03 * __pyx_v_T) + 1.08646);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":422
 *             # T in K, cp in kJ/kg-K
 *             cp_l = 2.74374E-03*T+1.08646;
 *         elif self.Liq == b'Duratherm_LT':             # <<<<<<<<<<<<<<
 *             #specific heat [kJ/kg-K] of Duratherm LT given T in K
 *             cp_l = (3.4014*T + 1094.3)/1000
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":424
 *         elif self.Liq == b'Duratherm_LT':
 *             #specific heat [kJ/kg-K] of Duratherm LT given T in K
 *             cp_l = (3.4014*T + 1094.3)/1000             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Zerol60":
 *             cp_l = (5.186*T + 337.116)/1000
 */
    __pyx_v_cp_l = (((3.4014 * __pyx_v_T) + 1094.3) / 1000.0);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":425
 *             #specific heat [kJ/kg-K] of Duratherm LT given T in K
 *             cp_l = (3.4014*T + 1094.3)/1000
 *         elif self.Liq == b"Zerol60":             # <<<<<<<<<<<<<<
 *             cp_l = (5.186*T + 337.116)/1000
 *         elif self.Liq == b"Water":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":426
 *             cp_l = (3.4014*T + 1094.3)/1000
 *         elif self.Liq == b"Zerol60":
 *             cp_l = (5.186*T + 337.116)/1000             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"Water":
 *             one_over_MM_l=1/18.0153
 */
    __pyx_v_cp_l = (((5.186 * __pyx_v_T) + 337.116) / 1000.0);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":427
 *         elif self.Liq == b"Zerol60":
 *             cp_l = (5.186*T + 337.116)/1000
 *         elif self.Liq == b"Water":             # <<<<<<<<<<<<<<
 *             one_over_MM_l=1/18.0153
 *             cl_A=92.053*one_over_MM_l
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Water, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":428
 *             cp_l = (5.186*T + 337.116)/1000
 *         elif self.Liq == b"Water":
 *             one_over_MM_l=1/18.0153             # <<<<<<<<<<<<<<
 *             cl_A=92.053*one_over_MM_l
 *             cl_B=-0.039953*one_over_MM_l
 */
    __pyx_v_one_over_MM_l = (1.0 / 18.0153);

    /* "PDSim\core\state_flooded.pyx":429
 *         elif self.Liq == b"Water":
 *             one_over_MM_l=1/18.0153
 *             cl_A=92.053*one_over_MM_l             # <<<<<<<<<<<<<<
 *             cl_B=-0.039953*one_over_MM_l
 *             cl_C=-0.00021103*one_over_MM_l
 */
    __pyx_v_cl_A = (92.053 * __pyx_v_one_over_MM_l);

    /* "PDSim\core\state_flooded.pyx":430
 *             one_over_MM_l=1/18.0153
 *             cl_A=92.053*one_over_MM_l
 *             cl_B=-0.039953*one_over_MM_l             # <<<<<<<<<<<<<<
 *             cl_C=-0.00021103*one_over_MM_l
 *             cl_D=5.3469E-07*one_over_MM_l
 */
    __pyx_v_cl_B = (-0.039953 * __pyx_v_one_over_MM_l);

    /* "PDSim\core\state_flooded.pyx":431
 *             cl_A=92.053*one_over_MM_l
 *             cl_B=-0.039953*one_over_MM_l
 *             cl_C=-0.00021103*one_over_MM_l             # <<<<<<<<<<<<<<
 *             cl_D=5.3469E-07*one_over_MM_l
 *             cp_l = cl_A + cl_B*T + cl_C*T*T + cl_D*T*T*T
 */
    __pyx_v_cl_C = (-0.00021103 * __pyx_v_one_over_MM_l);

    /* "PDSim\core\state_flooded.pyx":432
 *             cl_B=-0.039953*one_over_MM_l
 *             cl_C=-0.00021103*one_over_MM_l
 *             cl_D=5.3469E-07*one_over_MM_l             # <<<<<<<<<<<<<<
 *             cp_l = cl_A + cl_B*T + cl_C*T*T + cl_D*T*T*T
 *         elif self.Liq == b"ACD100FY":
 */
    __pyx_v_cl_D = (5.3469E-07 * __pyx_v_one_over_MM_l);

    /* "PDSim\core\state_flooded.pyx":433
 *             cl_C=-0.00021103*one_over_MM_l
 *             cl_D=5.3469E-07*one_over_MM_l
 *             cp_l = cl_A + cl_B*T + cl_C*T*T + cl_D*T*T*T             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"ACD100FY":
 *             # 273 < T [K] < 387
 */
    __pyx_v_cp_l = (((__pyx_v_cl_A + (__pyx_v_cl_B * __pyx_v_T)) + ((__pyx_v_cl_C * __pyx_v_T) * __pyx_v_T)) + (((__pyx_v_cl_D * __pyx_v_T) * __pyx_v_T) * __pyx_v_T));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":434
 *             cl_D=5.3469E-07*one_over_MM_l
 *             cp_l = cl_A + cl_B*T + cl_C*T*T + cl_D*T*T*T
 *         elif self.Liq == b"ACD100FY":             # <<<<<<<<<<<<<<
 *             # 273 < T [K] < 387
 *             cp_l = 1.304 + 1.035e-3*T+2.801e-6*T**2   #[kJ/kg-K]
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_ACD100FY, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":436
 *         elif self.Liq == b"ACD100FY":
 *             # 273 < T [K] < 387
 *             cp_l = 1.304 + 1.035e-3*T+2.801e-6*T**2   #[kJ/kg-K]             # <<<<<<<<<<<<<<
 *         return cp_l #[kJ/kg]
 * 
 */
    __pyx_v_cp_l = ((1.304 + (1.035e-3 * __pyx_v_T)) + (2.801e-6 * pow(__pyx_v_T, 2.0)));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":437
 *             # 273 < T [K] < 387
 *             cp_l = 1.304 + 1.035e-3*T+2.801e-6*T**2   #[kJ/kg-K]
 *         return cp_l #[kJ/kg]             # <<<<<<<<<<<<<<
 * 
 *     cpdef double cp_mix(self) except *:
 */
  __pyx_r = __pyx_v_cp_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":397
 *         return rho_m
 * 
 *     cpdef double cp_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cp_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_27cp_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_26cp_liq[] = "StateFlooded.cp_liq(self) -> double\n\n        Specific heat of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        cp_l: float\n            specific heat [kJ/kg-K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_27cp_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cp_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_26cp_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_26cp_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cp_liq", 0);
  __Pyx_TraceCall("cp_liq", __pyx_f[0], 397);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cp_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":439
 *         return cp_l #[kJ/kg]
 * 
 *     cpdef double cp_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat at constant pressure of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_29cp_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_cp_g;
  double __pyx_v_cp_l;
  double __pyx_v_xL;
  double __pyx_v_cp_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cp_mix", 0);
  __Pyx_TraceCall("cp_mix", __pyx_f[0], 439);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cp_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_29cp_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":449
 *         """
 * 
 *         cdef double cp_g, cp_l, xL = self.xL_             # <<<<<<<<<<<<<<
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cp_l = self.cp_liq()
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":450
 * 
 *         cdef double cp_g, cp_l, xL = self.xL_
 *         cp_g = self.pAS.cpmass()/1000.0             # <<<<<<<<<<<<<<
 *         cp_l = self.cp_liq()
 *         cp_m = xL*cp_l + (1.0-xL)*cp_g
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->cpmass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cp_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":451
 *         cdef double cp_g, cp_l, xL = self.xL_
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cp_l = self.cp_liq()             # <<<<<<<<<<<<<<
 *         cp_m = xL*cp_l + (1.0-xL)*cp_g
 *         return cp_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cp_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":452
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cp_l = self.cp_liq()
 *         cp_m = xL*cp_l + (1.0-xL)*cp_g             # <<<<<<<<<<<<<<
 *         return cp_m
 * 
 */
  __pyx_v_cp_m = ((__pyx_v_xL * __pyx_v_cp_l) + ((1.0 - __pyx_v_xL) * __pyx_v_cp_g));

  /* "PDSim\core\state_flooded.pyx":453
 *         cp_l = self.cp_liq()
 *         cp_m = xL*cp_l + (1.0-xL)*cp_g
 *         return cp_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double cv_mix(self) except *:
 */
  __pyx_r = __pyx_v_cp_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":439
 *         return cp_l #[kJ/kg]
 * 
 *     cpdef double cp_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat at constant pressure of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cp_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_29cp_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_28cp_mix[] = "StateFlooded.cp_mix(self) -> double\n\n        Specific heat at constant pressure of the mixture \n        Returns\n        ---------\n        cp_m: float\n            specific heat [kJ/kg-K]\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_29cp_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cp_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_28cp_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_28cp_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cp_mix", 0);
  __Pyx_TraceCall("cp_mix", __pyx_f[0], 439);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cp_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":455
 *         return cp_m
 * 
 *     cpdef double cv_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat at constant volume of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_31cv_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_cv_g;
  double __pyx_v_cv_l;
  double __pyx_v_xL;
  double __pyx_v_cv_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cv_mix", 0);
  __Pyx_TraceCall("cv_mix", __pyx_f[0], 455);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cv_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_31cv_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":465
 *         """
 * 
 *         cdef double cv_g, cv_l, xL = self.xL_             # <<<<<<<<<<<<<<
 *         cv_g = self.pAS.cvmass()/1000.0
 *         cv_l = self.cp_liq()
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":466
 * 
 *         cdef double cv_g, cv_l, xL = self.xL_
 *         cv_g = self.pAS.cvmass()/1000.0             # <<<<<<<<<<<<<<
 *         cv_l = self.cp_liq()
 *         cv_m = xL*cv_l + (1.0-xL)*cv_g
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->cvmass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cv_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":467
 *         cdef double cv_g, cv_l, xL = self.xL_
 *         cv_g = self.pAS.cvmass()/1000.0
 *         cv_l = self.cp_liq()             # <<<<<<<<<<<<<<
 *         cv_m = xL*cv_l + (1.0-xL)*cv_g
 *         return cv_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cv_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":468
 *         cv_g = self.pAS.cvmass()/1000.0
 *         cv_l = self.cp_liq()
 *         cv_m = xL*cv_l + (1.0-xL)*cv_g             # <<<<<<<<<<<<<<
 *         return cv_m
 * 
 */
  __pyx_v_cv_m = ((__pyx_v_xL * __pyx_v_cv_l) + ((1.0 - __pyx_v_xL) * __pyx_v_cv_g));

  /* "PDSim\core\state_flooded.pyx":469
 *         cv_l = self.cp_liq()
 *         cv_m = xL*cv_l + (1.0-xL)*cv_g
 *         return cv_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double mu_liq(self) except *:
 */
  __pyx_r = __pyx_v_cv_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":455
 *         return cp_m
 * 
 *     cpdef double cv_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Specific heat at constant volume of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cv_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_31cv_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_30cv_mix[] = "StateFlooded.cv_mix(self) -> double\n\n        Specific heat at constant volume of the mixture \n        Returns\n        ---------\n        cv_m: float\n            specific heat [kJ/kg-K]\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_31cv_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cv_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_30cv_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_30cv_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cv_mix", 0);
  __Pyx_TraceCall("cv_mix", __pyx_f[0], 455);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cv_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":471
 *         return cv_m
 * 
 *     cpdef double mu_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Dynamic viscosity of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_33mu_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T;
  double __pyx_v_mu_l;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("mu_liq", 0);
  __Pyx_TraceCall("mu_liq", __pyx_f[0], 471);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mu_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_33mu_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":487
 *         """
 * 
 *         cdef double T = self.T_, mu_l             # <<<<<<<<<<<<<<
 * 
 *         if self.Liq == b'Duratherm_LT':
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":489
 *         cdef double T = self.T_, mu_l
 * 
 *         if self.Liq == b'Duratherm_LT':             # <<<<<<<<<<<<<<
 *             mu_l = 8e12*T**(-6.001)  #LT
 *         elif self.Liq == b'Zerol60':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":490
 * 
 *         if self.Liq == b'Duratherm_LT':
 *             mu_l = 8e12*T**(-6.001)  #LT             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Zerol60':
 *             mu_l = 1.0*(-0.0001235*T + 0.04808) #Zerol60 Vincent
 */
    __pyx_v_mu_l = (8e12 * pow(__pyx_v_T, -6.001));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":491
 *         if self.Liq == b'Duratherm_LT':
 *             mu_l = 8e12*T**(-6.001)  #LT
 *         elif self.Liq == b'Zerol60':             # <<<<<<<<<<<<<<
 *             mu_l = 1.0*(-0.0001235*T + 0.04808) #Zerol60 Vincent
 *         elif self.Liq == b'POE':
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":492
 *             mu_l = 8e12*T**(-6.001)  #LT
 *         elif self.Liq == b'Zerol60':
 *             mu_l = 1.0*(-0.0001235*T + 0.04808) #Zerol60 Vincent             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'POE':
 *             #POE equation only valid from 60 C to 120 C
 */
    __pyx_v_mu_l = (1.0 * ((-0.0001235 * __pyx_v_T) + 0.04808));
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":493
 *         elif self.Liq == b'Zerol60':
 *             mu_l = 1.0*(-0.0001235*T + 0.04808) #Zerol60 Vincent
 *         elif self.Liq == b'POE':             # <<<<<<<<<<<<<<
 *             #POE equation only valid from 60 C to 120 C
 *             #POE 150 SUS
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":496
 *             #POE equation only valid from 60 C to 120 C
 *             #POE 150 SUS
 *             mu_l = 0.000000000517*T**4 - 0.000000795840*T**3 + 0.000460766590*T**2 - 0.118976538068*T + 11.571730524692             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"ACD100FY":
 *             # 313 < T [K] < 387
 */
    __pyx_v_mu_l = (((((0.000000000517 * pow(__pyx_v_T, 4.0)) - (0.000000795840 * pow(__pyx_v_T, 3.0))) + (0.000460766590 * pow(__pyx_v_T, 2.0))) - (0.118976538068 * __pyx_v_T)) + 11.571730524692);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":497
 *             #POE 150 SUS
 *             mu_l = 0.000000000517*T**4 - 0.000000795840*T**3 + 0.000460766590*T**2 - 0.118976538068*T + 11.571730524692
 *         elif self.Liq == b"ACD100FY":             # <<<<<<<<<<<<<<
 *             # 313 < T [K] < 387
 *             #mu_l = 1.603e+46*pow(T,-19.69) #T [K]
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_ACD100FY, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":500
 *             # 313 < T [K] < 387
 *             #mu_l = 1.603e+46*pow(T,-19.69) #T [K]
 *             mu_l = 2.0022e+31*T**(-1.2961e+01)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
    __pyx_v_mu_l = (2.0022e+31 * pow(__pyx_v_T, -1.2961e+01));
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":502
 *             mu_l = 2.0022e+31*T**(-1.2961e+01)
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 *         return mu_l
 * 
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":503
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 *         return mu_l             # <<<<<<<<<<<<<<
 * 
 *     cpdef double mu_mix(self) except *:
 */
  __pyx_r = __pyx_v_mu_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":471
 *         return cv_m
 * 
 *     cpdef double mu_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Dynamic viscosity of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.mu_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_33mu_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_32mu_liq[] = "StateFlooded.mu_liq(self) -> double\n\n        Dynamic viscosity of the flooding medium\n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Liq: string\n             Current lubricant implemented: \"PAO\", \"PAG\", \"POE\", \"Duratherm LT\", \"Zerol 60\",\"Water\"\n             \n        Returns\n        -------\n        mu_l: float\n            dynamic viscosity [Pa-s]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_33mu_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mu_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_32mu_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_32mu_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("mu_liq", 0);
  __Pyx_TraceCall("mu_liq", __pyx_f[0], 471);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.mu_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":505
 *         return mu_l
 * 
 *     cpdef double mu_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Dynamic viscosity of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_35mu_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_mu_l;
  double __pyx_v_mu_g;
  double __pyx_v_mu_m;
  double __pyx_v_xL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("mu_mix", 0);
  __Pyx_TraceCall("mu_mix", __pyx_f[0], 505);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mu_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_35mu_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":515
 *         """
 * 
 *         cdef double mu_l, mu_g, mu_m, xL = self.xL_             # <<<<<<<<<<<<<<
 *         mu_l = self.mu_liq()
 *         mu_g = self.pAS.keyed_output(constants_header.iviscosity)
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":516
 * 
 *         cdef double mu_l, mu_g, mu_m, xL = self.xL_
 *         mu_l = self.mu_liq()             # <<<<<<<<<<<<<<
 *         mu_g = self.pAS.keyed_output(constants_header.iviscosity)
 *         mu_m = 1/(xL/mu_l + (1-xL)/mu_g )
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->mu_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mu_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":517
 *         cdef double mu_l, mu_g, mu_m, xL = self.xL_
 *         mu_l = self.mu_liq()
 *         mu_g = self.pAS.keyed_output(constants_header.iviscosity)             # <<<<<<<<<<<<<<
 *         mu_m = 1/(xL/mu_l + (1-xL)/mu_g )
 *         return mu_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iviscosity, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mu_g = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":518
 *         mu_l = self.mu_liq()
 *         mu_g = self.pAS.keyed_output(constants_header.iviscosity)
 *         mu_m = 1/(xL/mu_l + (1-xL)/mu_g )             # <<<<<<<<<<<<<<
 *         return mu_m
 * 
 */
  if (unlikely(__pyx_v_mu_l == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = (1.0 - __pyx_v_xL);
  if (unlikely(__pyx_v_mu_g == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = ((__pyx_v_xL / __pyx_v_mu_l) + (__pyx_t_5 / __pyx_v_mu_g));
  if (unlikely(__pyx_t_6 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_mu_m = (1.0 / __pyx_t_6);

  /* "PDSim\core\state_flooded.pyx":519
 *         mu_g = self.pAS.keyed_output(constants_header.iviscosity)
 *         mu_m = 1/(xL/mu_l + (1-xL)/mu_g )
 *         return mu_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double VoidFrac(self) except *:
 */
  __pyx_r = __pyx_v_mu_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":505
 *         return mu_l
 * 
 *     cpdef double mu_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Dynamic viscosity of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.mu_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_35mu_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_34mu_mix[] = "StateFlooded.mu_mix(self) -> double\n\n        Dynamic viscosity of the mixture \n        Returns\n        ---------\n        mu_m: float\n            dynamic viscosity [Pa-s]\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_35mu_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mu_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_34mu_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_34mu_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("mu_mix", 0);
  __Pyx_TraceCall("mu_mix", __pyx_f[0], 505);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.mu_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":521
 *         return mu_m
 * 
 *     cpdef double VoidFrac(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Void Fraction of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_37VoidFrac(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_VoidFrac(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_rho_l;
  double __pyx_v_rho_g;
  double __pyx_v_xL;
  double __pyx_v_VF;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("VoidFrac", 0);
  __Pyx_TraceCall("VoidFrac", __pyx_f[0], 521);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_VoidFrac); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_37VoidFrac)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":539
 *         """
 * 
 *         cdef double rho_l, rho_g, xL = self.xL_, VF             # <<<<<<<<<<<<<<
 *         rho_l = self.rho_liq()
 *         rho_g = self.pAS.rhomass()
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":540
 * 
 *         cdef double rho_l, rho_g, xL = self.xL_, VF
 *         rho_l = self.rho_liq()             # <<<<<<<<<<<<<<
 *         rho_g = self.pAS.rhomass()
 *         VF = ((1-xL)/rho_g)/((1-xL)/rho_g + xL/rho_l)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rho_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":541
 *         cdef double rho_l, rho_g, xL = self.xL_, VF
 *         rho_l = self.rho_liq()
 *         rho_g = self.pAS.rhomass()             # <<<<<<<<<<<<<<
 *         VF = ((1-xL)/rho_g)/((1-xL)/rho_g + xL/rho_l)
 *         return VF
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->rhomass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rho_g = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":542
 *         rho_l = self.rho_liq()
 *         rho_g = self.pAS.rhomass()
 *         VF = ((1-xL)/rho_g)/((1-xL)/rho_g + xL/rho_l)             # <<<<<<<<<<<<<<
 *         return VF
 * 
 */
  __pyx_t_5 = (1.0 - __pyx_v_xL);
  if (unlikely(__pyx_v_rho_g == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = (__pyx_t_5 / __pyx_v_rho_g);
  __pyx_t_5 = (1.0 - __pyx_v_xL);
  if (unlikely(__pyx_v_rho_g == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_rho_l == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = ((__pyx_t_5 / __pyx_v_rho_g) + (__pyx_v_xL / __pyx_v_rho_l));
  if (unlikely(__pyx_t_7 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_VF = (__pyx_t_6 / __pyx_t_7);

  /* "PDSim\core\state_flooded.pyx":543
 *         rho_g = self.pAS.rhomass()
 *         VF = ((1-xL)/rho_g)/((1-xL)/rho_g + xL/rho_l)
 *         return VF             # <<<<<<<<<<<<<<
 * 
 *     cpdef double k_liq(self) except *:
 */
  __pyx_r = __pyx_v_VF;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":521
 *         return mu_m
 * 
 *     cpdef double VoidFrac(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Void Fraction of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.VoidFrac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_37VoidFrac(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_36VoidFrac[] = "StateFlooded.VoidFrac(self) -> double\n\n        Void Fraction of the mixture\n        \n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        P:float\n            Pressure [kPa]\n        xL: float\n            Liquid mass fraction [-]\n        Returns\n        -------\n        VF: float\n            Void fraction [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_37VoidFrac(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("VoidFrac (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_36VoidFrac(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_36VoidFrac(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("VoidFrac", 0);
  __Pyx_TraceCall("VoidFrac", __pyx_f[0], 521);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_VoidFrac(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.VoidFrac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":545
 *         return VF
 * 
 *     cpdef double k_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Thermal Conductivity of the flooding medium
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_39k_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_T;
  double __pyx_v_k_l;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("k_liq", 0);
  __Pyx_TraceCall("k_liq", __pyx_f[0], 545);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_k_liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_39k_liq)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":560
 * 
 * 
 *         cdef double T = self.T_             # <<<<<<<<<<<<<<
 *         if self.Liq == b'Duratherm_LT':
 *             k_l = -9e-5*T + 0.1223
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
  __pyx_v_T = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":561
 * 
 *         cdef double T = self.T_
 *         if self.Liq == b'Duratherm_LT':             # <<<<<<<<<<<<<<
 *             k_l = -9e-5*T + 0.1223
 *         elif self.Liq == b'Zerol60':
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Duratherm_LT, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":562
 *         cdef double T = self.T_
 *         if self.Liq == b'Duratherm_LT':
 *             k_l = -9e-5*T + 0.1223             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'Zerol60':
 *             k_l =  0.1153 #Zerol60 Vincent
 */
    __pyx_v_k_l = ((-9e-5 * __pyx_v_T) + 0.1223);
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":563
 *         if self.Liq == b'Duratherm_LT':
 *             k_l = -9e-5*T + 0.1223
 *         elif self.Liq == b'Zerol60':             # <<<<<<<<<<<<<<
 *             k_l =  0.1153 #Zerol60 Vincent
 *         elif self.Liq == b'POE':
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_Zerol60, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":564
 *             k_l = -9e-5*T + 0.1223
 *         elif self.Liq == b'Zerol60':
 *             k_l =  0.1153 #Zerol60 Vincent             # <<<<<<<<<<<<<<
 *         elif self.Liq == b'POE':
 *             k_l = 0.138   #POE 150 SUS
 */
    __pyx_v_k_l = 0.1153;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":565
 *         elif self.Liq == b'Zerol60':
 *             k_l =  0.1153 #Zerol60 Vincent
 *         elif self.Liq == b'POE':             # <<<<<<<<<<<<<<
 *             k_l = 0.138   #POE 150 SUS
 *         elif self.Liq == b"ACD100FY":
 */
  __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_POE, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "PDSim\core\state_flooded.pyx":566
 *             k_l =  0.1153 #Zerol60 Vincent
 *         elif self.Liq == b'POE':
 *             k_l = 0.138   #POE 150 SUS             # <<<<<<<<<<<<<<
 *         elif self.Liq == b"ACD100FY":
 *             k_l = 0.13    #TODO: check value of conductivity
 */
    __pyx_v_k_l = 0.138;
    goto __pyx_L3;
  }

  /* "PDSim\core\state_flooded.pyx":567
 *         elif self.Liq == b'POE':
 *             k_l = 0.138   #POE 150 SUS
 *         elif self.Liq == b"ACD100FY":             # <<<<<<<<<<<<<<
 *             k_l = 0.13    #TODO: check value of conductivity
 *         else:
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_self->Liq, __pyx_n_b_ACD100FY, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":568
 *             k_l = 0.138   #POE 150 SUS
 *         elif self.Liq == b"ACD100FY":
 *             k_l = 0.13    #TODO: check value of conductivity             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 */
    __pyx_v_k_l = 0.13;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":570
 *             k_l = 0.13    #TODO: check value of conductivity
 *         else:
 *             raise ValueError(b"Invalid liquid:" + self.Liq)             # <<<<<<<<<<<<<<
 * 
 *         return k_l
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_b_Invalid_liquid, __pyx_v_self->Liq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":572
 *             raise ValueError(b"Invalid liquid:" + self.Liq)
 * 
 *         return k_l             # <<<<<<<<<<<<<<
 * 
 *     cpdef double k_mix(self) except *:
 */
  __pyx_r = __pyx_v_k_l;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":545
 *         return VF
 * 
 *     cpdef double k_liq(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Thermal Conductivity of the flooding medium
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.k_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_39k_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_38k_liq[] = "StateFlooded.k_liq(self) -> double\n\n        Thermal Conductivity of the flooding medium\n        \n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Returns\n        -------\n        k_l: float\n            Thermal conductivity [W/m-K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_39k_liq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("k_liq (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_38k_liq(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_38k_liq(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("k_liq", 0);
  __Pyx_TraceCall("k_liq", __pyx_f[0], 545);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_liq(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.k_liq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":574
 *         return k_l
 * 
 *     cpdef double k_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Thermal Conductivity of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_41k_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_k_l;
  double __pyx_v_k_g;
  double __pyx_v_VF;
  double __pyx_v_k_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("k_mix", 0);
  __Pyx_TraceCall("k_mix", __pyx_f[0], 574);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_k_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_41k_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":589
 * 
 *         cdef double k_l, k_g, VF, k_m
 *         k_l = self.k_liq()             # <<<<<<<<<<<<<<
 *         k_g = self.pAS.keyed_output(constants_header.iconductivity)/1000
 *         VF = self.VoidFrac()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->k_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_k_l = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":590
 *         cdef double k_l, k_g, VF, k_m
 *         k_l = self.k_liq()
 *         k_g = self.pAS.keyed_output(constants_header.iconductivity)/1000             # <<<<<<<<<<<<<<
 *         VF = self.VoidFrac()
 *         k_m = (1-VF)*k_l + VF*k_g
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iconductivity, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_k_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":591
 *         k_l = self.k_liq()
 *         k_g = self.pAS.keyed_output(constants_header.iconductivity)/1000
 *         VF = self.VoidFrac()             # <<<<<<<<<<<<<<
 *         k_m = (1-VF)*k_l + VF*k_g
 *         return k_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->VoidFrac(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_VF = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":592
 *         k_g = self.pAS.keyed_output(constants_header.iconductivity)/1000
 *         VF = self.VoidFrac()
 *         k_m = (1-VF)*k_l + VF*k_g             # <<<<<<<<<<<<<<
 *         return k_m
 * 
 */
  __pyx_v_k_m = (((1.0 - __pyx_v_VF) * __pyx_v_k_l) + (__pyx_v_VF * __pyx_v_k_g));

  /* "PDSim\core\state_flooded.pyx":593
 *         VF = self.VoidFrac()
 *         k_m = (1-VF)*k_l + VF*k_g
 *         return k_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double Pr_mix(self) except *:
 */
  __pyx_r = __pyx_v_k_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":574
 *         return k_l
 * 
 *     cpdef double k_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Thermal Conductivity of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.k_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_41k_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_40k_mix[] = "StateFlooded.k_mix(self) -> double\n\n        Thermal Conductivity of the mixture\n        \n        Parameters\n        ----------\n        T: float\n            Temperature [K]\n        Returns\n        -------\n        k_m: float\n            Thermal conductivity [kW/m-K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_41k_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("k_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_40k_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_40k_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("k_mix", 0);
  __Pyx_TraceCall("k_mix", __pyx_f[0], 574);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.k_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":595
 *         return k_m
 * 
 *     cpdef double Pr_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Prandtl Number of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_43Pr_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_Pr_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_Pr_m;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("Pr_mix", 0);
  __Pyx_TraceCall("Pr_mix", __pyx_f[0], 595);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Pr_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_43Pr_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":605
 *         """
 * 
 *         cdef double Pr_m = (self.cp_mix()*self.mu_mix())/self.k_mix()             # <<<<<<<<<<<<<<
 *         return Pr_m
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->mu_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_5 * __pyx_t_6);
  __pyx_t_6 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->k_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_6 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_Pr_m = (__pyx_t_7 / __pyx_t_6);

  /* "PDSim\core\state_flooded.pyx":606
 * 
 *         cdef double Pr_m = (self.cp_mix()*self.mu_mix())/self.k_mix()
 *         return Pr_m             # <<<<<<<<<<<<<<
 * 
 *     cpdef double kstar_mix(self) except *:
 */
  __pyx_r = __pyx_v_Pr_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":595
 *         return k_m
 * 
 *     cpdef double Pr_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Prandtl Number of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.Pr_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_43Pr_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_42Pr_mix[] = "StateFlooded.Pr_mix(self) -> double\n\n        Prandtl Number of the mixture\n        \n        Returns\n        -------\n        Pr_m: float\n                Prandtl Number [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_43Pr_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pr_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_42Pr_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_42Pr_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("Pr_mix", 0);
  __Pyx_TraceCall("Pr_mix", __pyx_f[0], 595);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_Pr_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.Pr_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":608
 *         return Pr_m
 * 
 *     cpdef double kstar_mix(self) except *:             # <<<<<<<<<<<<<<
 * 
 *         """
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_45kstar_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_kstar_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_xL;
  double __pyx_v_kstar_m;
  double __pyx_v_cv_g;
  double __pyx_v_cp_g;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("kstar_mix", 0);
  __Pyx_TraceCall("kstar_mix", __pyx_f[0], 608);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kstar_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_45kstar_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":631
 * 
 * 
 *         cdef double xL = self.xL_, kstar_m, cv_g, cp_g             # <<<<<<<<<<<<<<
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cv_g = self.pAS.cvmass()/1000.0
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":632
 * 
 *         cdef double xL = self.xL_, kstar_m, cv_g, cp_g
 *         cp_g = self.pAS.cpmass()/1000.0             # <<<<<<<<<<<<<<
 *         cv_g = self.pAS.cvmass()/1000.0
 *         kstar_m =((1-xL)*cp_g + xL*self.cp_liq())/((1-xL)*cv_g + xL*self.cp_liq())
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->cpmass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cp_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":633
 *         cdef double xL = self.xL_, kstar_m, cv_g, cp_g
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cv_g = self.pAS.cvmass()/1000.0             # <<<<<<<<<<<<<<
 *         kstar_m =((1-xL)*cp_g + xL*self.cp_liq())/((1-xL)*cv_g + xL*self.cp_liq())
 *         return kstar_m
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->cvmass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cv_g = (__pyx_t_5 / 1000.0);

  /* "PDSim\core\state_flooded.pyx":634
 *         cp_g = self.pAS.cpmass()/1000.0
 *         cv_g = self.pAS.cvmass()/1000.0
 *         kstar_m =((1-xL)*cp_g + xL*self.cp_liq())/((1-xL)*cv_g + xL*self.cp_liq())             # <<<<<<<<<<<<<<
 *         return kstar_m
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (((1.0 - __pyx_v_xL) * __pyx_v_cp_g) + (__pyx_v_xL * __pyx_t_5));
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (((1.0 - __pyx_v_xL) * __pyx_v_cv_g) + (__pyx_v_xL * __pyx_t_5));
  if (unlikely(__pyx_t_7 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_kstar_m = (__pyx_t_6 / __pyx_t_7);

  /* "PDSim\core\state_flooded.pyx":635
 *         cv_g = self.pAS.cvmass()/1000.0
 *         kstar_m =((1-xL)*cp_g + xL*self.cp_liq())/((1-xL)*cv_g + xL*self.cp_liq())
 *         return kstar_m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_kstar_m;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":608
 *         return Pr_m
 * 
 *     cpdef double kstar_mix(self) except *:             # <<<<<<<<<<<<<<
 * 
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.kstar_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_45kstar_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_44kstar_mix[] = "StateFlooded.kstar_mix(self) -> double\n\n        Ratio of specific heats defined by Hugenroth (2006)\n        \n        Parameters\n        ----------\n        cp_g: float\n                Specific heat at constant pressure of the refrigerant [kJ/kg-K]\n        cv_g: float\n                Specific heat at constant volume of the refrigerant [kJ/kg-K] \n        cp_liq: float\n                Specific heat of the flooding medium [kJ/kg-K]\n        xL: float\n            Liquid mass fraction [-]\n        \n        Returns\n        -------\n        kstar_m: float\n                    Ratio of specific heats of the mixture [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_45kstar_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kstar_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_44kstar_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_44kstar_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("kstar_mix", 0);
  __Pyx_TraceCall("kstar_mix", __pyx_f[0], 608);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_kstar_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.kstar_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":638
 * 
 * 
 *     cpdef double dpdT_const_V(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of pressure over the temperature at constant specific
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_47dpdT_const_V(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dpdT_const_V(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_f;
  double __pyx_v_P1;
  double __pyx_v_P2;
  double __pyx_v_v1;
  double __pyx_v_T;
  double __pyx_v_delta;
  double __pyx_v_eps;
  CYTHON_UNUSED double __pyx_v_change;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_x3;
  double __pyx_v_y1;
  double __pyx_v_y2;
  int __pyx_v_iter;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("dpdT_const_V", 0);
  __Pyx_TraceCall("dpdT_const_V", __pyx_f[0], 638);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dpdT_const_V); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_47dpdT_const_V)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":664
 *         cdef int iter
 *         #Ref = self.Fluid, Liq = self.Liq,, xL = self.xL, T = self.T_,
 *         P1 = self.p_             # <<<<<<<<<<<<<<
 *         v1 = 1.0/self.rho_mix()
 * 
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.p_;
  __pyx_v_P1 = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":665
 *         #Ref = self.Fluid, Liq = self.Liq,, xL = self.xL, T = self.T_,
 *         P1 = self.p_
 *         v1 = 1.0/self.rho_mix()             # <<<<<<<<<<<<<<
 * 
 *         delta=1.0e-5
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v1 = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":667
 *         v1 = 1.0/self.rho_mix()
 * 
 *         delta=1.0e-5             # <<<<<<<<<<<<<<
 *         eps = 1e-6
 *         change = 999
 */
  __pyx_v_delta = 1.0e-5;

  /* "PDSim\core\state_flooded.pyx":668
 * 
 *         delta=1.0e-5
 *         eps = 1e-6             # <<<<<<<<<<<<<<
 *         change = 999
 *         iter = 1
 */
  __pyx_v_eps = 1e-6;

  /* "PDSim\core\state_flooded.pyx":669
 *         delta=1.0e-5
 *         eps = 1e-6
 *         change = 999             # <<<<<<<<<<<<<<
 *         iter = 1
 * 
 */
  __pyx_v_change = 999.0;

  /* "PDSim\core\state_flooded.pyx":670
 *         eps = 1e-6
 *         change = 999
 *         iter = 1             # <<<<<<<<<<<<<<
 * 
 *         while (iter<=3 or fabs(f)>eps) and iter < 100:
 */
  __pyx_v_iter = 1;

  /* "PDSim\core\state_flooded.pyx":672
 *         iter = 1
 * 
 *         while (iter<=3 or fabs(f)>eps) and iter < 100:             # <<<<<<<<<<<<<<
 * 
 *             if iter ==1:
 */
  while (1) {
    __pyx_t_7 = ((__pyx_v_iter <= 3) != 0);
    if (!__pyx_t_7) {
    } else {
      goto __pyx_L6_next_and;
    }
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_fabs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_f); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_eps); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_L6_next_and:;
    __pyx_t_7 = ((__pyx_v_iter < 100) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_6) break;

    /* "PDSim\core\state_flooded.pyx":674
 *         while (iter<=3 or fabs(f)>eps) and iter < 100:
 * 
 *             if iter ==1:             # <<<<<<<<<<<<<<
 *                 x1 = P1
 *                 P2 = x1
 */
    __pyx_t_6 = ((__pyx_v_iter == 1) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":675
 * 
 *             if iter ==1:
 *                 x1 = P1             # <<<<<<<<<<<<<<
 *                 P2 = x1
 *             if iter == 2:
 */
      __pyx_v_x1 = __pyx_v_P1;

      /* "PDSim\core\state_flooded.pyx":676
 *             if iter ==1:
 *                 x1 = P1
 *                 P2 = x1             # <<<<<<<<<<<<<<
 *             if iter == 2:
 *                 x2 = P1 + 0.001
 */
      __pyx_v_P2 = __pyx_v_x1;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "PDSim\core\state_flooded.pyx":677
 *                 x1 = P1
 *                 P2 = x1
 *             if iter == 2:             # <<<<<<<<<<<<<<
 *                 x2 = P1 + 0.001
 *                 P2 = x2
 */
    __pyx_t_6 = ((__pyx_v_iter == 2) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":678
 *                 P2 = x1
 *             if iter == 2:
 *                 x2 = P1 + 0.001             # <<<<<<<<<<<<<<
 *                 P2 = x2
 *             if iter > 2:
 */
      __pyx_v_x2 = (__pyx_v_P1 + 0.001);

      /* "PDSim\core\state_flooded.pyx":679
 *             if iter == 2:
 *                 x2 = P1 + 0.001
 *                 P2 = x2             # <<<<<<<<<<<<<<
 *             if iter > 2:
 *                 P2 = x2
 */
      __pyx_v_P2 = __pyx_v_x2;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "PDSim\core\state_flooded.pyx":680
 *                 x2 = P1 + 0.001
 *                 P2 = x2
 *             if iter > 2:             # <<<<<<<<<<<<<<
 *                 P2 = x2
 * 
 */
    __pyx_t_6 = ((__pyx_v_iter > 2) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":681
 *                 P2 = x2
 *             if iter > 2:
 *                 P2 = x2             # <<<<<<<<<<<<<<
 * 
 *             T = self.T_
 */
      __pyx_v_P2 = __pyx_v_x2;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "PDSim\core\state_flooded.pyx":683
 *                 P2 = x2
 * 
 *             T = self.T_             # <<<<<<<<<<<<<<
 *             self.update(dict(T = T +delta, P = P2, xL = self.xL_))
 *             f = (1.0/self.rho_mix()) - v1
 */
    __pyx_t_5 = __pyx_v_self->__pyx_base.T_;
    __pyx_v_T = __pyx_t_5;

    /* "PDSim\core\state_flooded.pyx":684
 * 
 *             T = self.T_
 *             self.update(dict(T = T +delta, P = P2, xL = self.xL_))             # <<<<<<<<<<<<<<
 *             f = (1.0/self.rho_mix()) - v1
 * 
 */
    __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_T + __pyx_v_delta)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_T, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_P2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_P, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->xL_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_xL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.update(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), ((PyObject*)__pyx_t_8), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim\core\state_flooded.pyx":685
 *             T = self.T_
 *             self.update(dict(T = T +delta, P = P2, xL = self.xL_))
 *             f = (1.0/self.rho_mix()) - v1             # <<<<<<<<<<<<<<
 * 
 *             if iter==1:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_5 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_f = ((1.0 / __pyx_t_5) - __pyx_v_v1);

    /* "PDSim\core\state_flooded.pyx":687
 *             f = (1.0/self.rho_mix()) - v1
 * 
 *             if iter==1:             # <<<<<<<<<<<<<<
 *                 y1 = f
 *             if iter > 1:
 */
    __pyx_t_6 = ((__pyx_v_iter == 1) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":688
 * 
 *             if iter==1:
 *                 y1 = f             # <<<<<<<<<<<<<<
 *             if iter > 1:
 *                 y2 = f
 */
      __pyx_v_y1 = __pyx_v_f;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "PDSim\core\state_flooded.pyx":689
 *             if iter==1:
 *                 y1 = f
 *             if iter > 1:             # <<<<<<<<<<<<<<
 *                 y2 = f
 *                 x3 = x2-y2/(y2-y1)*(x2-x1)
 */
    __pyx_t_6 = ((__pyx_v_iter > 1) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":690
 *                 y1 = f
 *             if iter > 1:
 *                 y2 = f             # <<<<<<<<<<<<<<
 *                 x3 = x2-y2/(y2-y1)*(x2-x1)
 *                 change = fabs(y2/(y2-y1)*(x2-x1))
 */
      __pyx_v_y2 = __pyx_v_f;

      /* "PDSim\core\state_flooded.pyx":691
 *             if iter > 1:
 *                 y2 = f
 *                 x3 = x2-y2/(y2-y1)*(x2-x1)             # <<<<<<<<<<<<<<
 *                 change = fabs(y2/(y2-y1)*(x2-x1))
 *                 y1=y2
 */
      __pyx_t_5 = (__pyx_v_y2 - __pyx_v_y1);
      if (unlikely(__pyx_t_5 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_x3 = (__pyx_v_x2 - ((__pyx_v_y2 / __pyx_t_5) * (__pyx_v_x2 - __pyx_v_x1)));

      /* "PDSim\core\state_flooded.pyx":692
 *                 y2 = f
 *                 x3 = x2-y2/(y2-y1)*(x2-x1)
 *                 change = fabs(y2/(y2-y1)*(x2-x1))             # <<<<<<<<<<<<<<
 *                 y1=y2
 *                 x1=x2
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_fabs); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = (__pyx_v_y2 - __pyx_v_y1);
      if (unlikely(__pyx_t_5 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_y2 / __pyx_t_5) * (__pyx_v_x2 - __pyx_v_x1))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_change = __pyx_t_5;

      /* "PDSim\core\state_flooded.pyx":693
 *                 x3 = x2-y2/(y2-y1)*(x2-x1)
 *                 change = fabs(y2/(y2-y1)*(x2-x1))
 *                 y1=y2             # <<<<<<<<<<<<<<
 *                 x1=x2
 *                 x2=x3
 */
      __pyx_v_y1 = __pyx_v_y2;

      /* "PDSim\core\state_flooded.pyx":694
 *                 change = fabs(y2/(y2-y1)*(x2-x1))
 *                 y1=y2
 *                 x1=x2             # <<<<<<<<<<<<<<
 *                 x2=x3
 * 
 */
      __pyx_v_x1 = __pyx_v_x2;

      /* "PDSim\core\state_flooded.pyx":695
 *                 y1=y2
 *                 x1=x2
 *                 x2=x3             # <<<<<<<<<<<<<<
 * 
 *             iter = iter+1
 */
      __pyx_v_x2 = __pyx_v_x3;
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "PDSim\core\state_flooded.pyx":697
 *                 x2=x3
 * 
 *             iter = iter+1             # <<<<<<<<<<<<<<
 * 
 *             if iter > 50:
 */
    __pyx_v_iter = (__pyx_v_iter + 1);

    /* "PDSim\core\state_flooded.pyx":699
 *             iter = iter+1
 * 
 *             if iter > 50:             # <<<<<<<<<<<<<<
 *                 print 'dPdT_const_v not converging'
 * 
 */
    __pyx_t_6 = ((__pyx_v_iter > 50) != 0);
    if (__pyx_t_6) {

      /* "PDSim\core\state_flooded.pyx":700
 * 
 *             if iter > 50:
 *                 print 'dPdT_const_v not converging'             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_dPdT_const_v_not_converging) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L13;
    }
    __pyx_L13:;
  }

  /* "PDSim\core\state_flooded.pyx":703
 * 
 * 
 *         if isnan((P2-P1)/delta) == True:             # <<<<<<<<<<<<<<
 *             print 'dpdt_v is a NaN'
 *         if isinf((P2-P1)/delta) == True:
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_isnan); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = (__pyx_v_P2 - __pyx_v_P1);
  if (unlikely(__pyx_v_delta == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyFloat_FromDouble((__pyx_t_5 / __pyx_v_delta)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":704
 * 
 *         if isnan((P2-P1)/delta) == True:
 *             print 'dpdt_v is a NaN'             # <<<<<<<<<<<<<<
 *         if isinf((P2-P1)/delta) == True:
 *             print 'dpdt_v is Infinite'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_dpdt_v_is_a_NaN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L14;
  }
  __pyx_L14:;

  /* "PDSim\core\state_flooded.pyx":705
 *         if isnan((P2-P1)/delta) == True:
 *             print 'dpdt_v is a NaN'
 *         if isinf((P2-P1)/delta) == True:             # <<<<<<<<<<<<<<
 *             print 'dpdt_v is Infinite'
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_isinf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = (__pyx_v_P2 - __pyx_v_P1);
  if (unlikely(__pyx_v_delta == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_5 / __pyx_v_delta)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_8, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":706
 *             print 'dpdt_v is a NaN'
 *         if isinf((P2-P1)/delta) == True:
 *             print 'dpdt_v is Infinite'             # <<<<<<<<<<<<<<
 *         else:
 *             return (P2-P1)/delta
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_dpdt_v_is_Infinite) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L15;
  }
  /*else*/ {

    /* "PDSim\core\state_flooded.pyx":708
 *             print 'dpdt_v is Infinite'
 *         else:
 *             return (P2-P1)/delta             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = (__pyx_v_P2 - __pyx_v_P1);
    if (unlikely(__pyx_v_delta == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = (__pyx_t_5 / __pyx_v_delta);
    goto __pyx_L0;
  }
  __pyx_L15:;

  /* "PDSim\core\state_flooded.pyx":638
 * 
 * 
 *     cpdef double dpdT_const_V(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of pressure over the temperature at constant specific
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dpdT_const_V", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_47dpdT_const_V(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_46dpdT_const_V[] = "StateFlooded.dpdT_const_V(self) -> double\n\n        Derivative of pressure over the temperature at constant specific\n        volume of the mixture\n        \n        Parameters\n        ----------\n        P: float\n            Pressure [kPa]\n        v: float\n            Specific volume [m^3/kg]\n        T: float\n            Temperature [K]\n        \n        Returns\n        -------\n        dPdT_v: float\n                Derivative [kPa/K]\n        \n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_47dpdT_const_V(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dpdT_const_V (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_46dpdT_const_V(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_46dpdT_const_V(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("dpdT_const_V", 0);
  __Pyx_TraceCall("dpdT_const_V", __pyx_f[0], 638);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dpdT_const_V(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dpdT_const_V", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":713
 * 
 * 
 *     cpdef double dudxL_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of the internal energy of the mixture over the liquid mass fraction
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_49dudxL_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dudxL_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_u_m1;
  double __pyx_v_u_m2;
  double __pyx_v_delta;
  double __pyx_v_xL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("dudxL_mix", 0);
  __Pyx_TraceCall("dudxL_mix", __pyx_f[0], 713);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dudxL_mix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_49dudxL_mix)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":735
 * 
 *         cdef double u_m1,u_m2, delta, xL
 *         delta = 0.001             # <<<<<<<<<<<<<<
 *         u_m1 = self.u_mix()
 * 
 */
  __pyx_v_delta = 0.001;

  /* "PDSim\core\state_flooded.pyx":736
 *         cdef double u_m1,u_m2, delta, xL
 *         delta = 0.001
 *         u_m1 = self.u_mix()             # <<<<<<<<<<<<<<
 * 
 *         xL = self.xL_
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_u_m1 = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":738
 *         u_m1 = self.u_mix()
 * 
 *         xL = self.xL_             # <<<<<<<<<<<<<<
 *         self.update(dict(T = self.T_, P = self.p_, xL = xL + delta ))
 *         u_m2 = self.u_mix()
 */
  __pyx_t_5 = __pyx_v_self->xL_;
  __pyx_v_xL = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":739
 * 
 *         xL = self.xL_
 *         self.update(dict(T = self.T_, P = self.p_, xL = xL + delta ))             # <<<<<<<<<<<<<<
 *         u_m2 = self.u_mix()
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.T_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_T, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.p_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_P, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_xL + __pyx_v_delta)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_xL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.update(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), ((PyObject*)__pyx_t_1), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":740
 *         xL = self.xL_
 *         self.update(dict(T = self.T_, P = self.p_, xL = xL + delta ))
 *         u_m2 = self.u_mix()             # <<<<<<<<<<<<<<
 * 
 *         return (u_m2 - u_m1)/delta
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_u_m2 = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":742
 *         u_m2 = self.u_mix()
 * 
 *         return (u_m2 - u_m1)/delta             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = (__pyx_v_u_m2 - __pyx_v_u_m1);
  if (unlikely(__pyx_v_delta == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = (__pyx_t_5 / __pyx_v_delta);
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":713
 * 
 * 
 *     cpdef double dudxL_mix(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of the internal energy of the mixture over the liquid mass fraction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dudxL_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_49dudxL_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_48dudxL_mix[] = "StateFlooded.dudxL_mix(self) -> double\n\n        Derivative of the internal energy of the mixture over the liquid mass fraction\n        \n        Parameters\n        ----------\n        P: float\n            Pressure [kPa]\n        T: float\n            Temperature [K]\n        um: float\n            Specific internal energy of the mixture [kJ/kg]\n        xL: float\n            Liquid mass fraction [-]\n        Returns\n        -------\n        dudxL_m: float\n                Derivative [kJ/kg]\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_49dudxL_mix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dudxL_mix (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_48dudxL_mix(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_48dudxL_mix(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("dudxL_mix", 0);
  __Pyx_TraceCall("dudxL_mix", __pyx_f[0], 713);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dudxL_mix(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dudxL_mix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":745
 * 
 * 
 *     cpdef double cK_e(self) except*:             # <<<<<<<<<<<<<<
 *         """
 *         Effective slip ratio of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_51cK_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cK_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_K;
  double __pyx_v_flag;
  double __pyx_v_x;
  double __pyx_v_v_g;
  double __pyx_v_v_l;
  double __pyx_v_w;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cK_e", 0);
  __Pyx_TraceCall("cK_e", __pyx_f[0], 745);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cK_e); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_51cK_e)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":768
 *         cdef double K,flag,x,v_g,v_l,w
 * 
 *         x = 1 - self.xL_             # <<<<<<<<<<<<<<
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()
 */
  __pyx_v_x = (1.0 - __pyx_v_self->xL_);

  /* "PDSim\core\state_flooded.pyx":769
 * 
 *         x = 1 - self.xL_
 *         v_l = 1.0/self.rho_liq()             # <<<<<<<<<<<<<<
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_l = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":770
 *         x = 1 - self.xL_
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()             # <<<<<<<<<<<<<<
 *         flag = 0
 *         w = 0
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->rhomass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_g = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":771
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0             # <<<<<<<<<<<<<<
 *         w = 0
 * 
 */
  __pyx_v_flag = 0.0;

  /* "PDSim\core\state_flooded.pyx":772
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0
 *         w = 0             # <<<<<<<<<<<<<<
 * 
 *         if (x ==0 or x ==1):
 */
  __pyx_v_w = 0.0;

  /* "PDSim\core\state_flooded.pyx":774
 *         w = 0
 * 
 *         if (x ==0 or x ==1):             # <<<<<<<<<<<<<<
 *             """
 *             Homogenous flow
 */
  __pyx_t_7 = ((__pyx_v_x == 0.0) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_x == 1.0) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":778
 *             Homogenous flow
 *             """
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if (flag >0.9 and flag <1.1):
 */
    __pyx_r = 1.0;
    goto __pyx_L0;
  }

  /* "PDSim\core\state_flooded.pyx":780
 *             return 1
 * 
 *         if (flag >0.9 and flag <1.1):             # <<<<<<<<<<<<<<
 *             """
 *             Entrainment slip ratio
 */
  __pyx_t_7 = ((__pyx_v_flag > 0.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 1.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":785
 *             From Chisholm (1983) w=0.4
 *             """
 *             K= w +(1.0 -w)* sqrt(( v_g/v_l + w*(1-x)/x) /(1+ w*(1-x)/x))             # <<<<<<<<<<<<<<
 * 
 *         if (flag >1.9 and flag <2.1):
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_w); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble((1.0 - __pyx_v_w)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sqrt); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (__pyx_v_w * (1.0 - __pyx_v_x));
    if (unlikely(__pyx_v_x == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = ((__pyx_v_v_g / __pyx_v_v_l) + (__pyx_t_5 / __pyx_v_x));
    __pyx_t_5 = (__pyx_v_w * (1.0 - __pyx_v_x));
    if (unlikely(__pyx_v_x == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = (1.0 + (__pyx_t_5 / __pyx_v_x));
    if (unlikely(__pyx_t_9 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = PyFloat_FromDouble((__pyx_t_8 / __pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __Pyx_GIVEREF(__pyx_t_11); __pyx_t_11 = NULL;
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_K = __pyx_t_9;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "PDSim\core\state_flooded.pyx":787
 *             K= w +(1.0 -w)* sqrt(( v_g/v_l + w*(1-x)/x) /(1+ w*(1-x)/x))
 * 
 *         if (flag >1.9 and flag <2.1):             # <<<<<<<<<<<<<<
 *             """
 *             Chisholms sqrt(vh/vl)
 */
  __pyx_t_7 = ((__pyx_v_flag > 1.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 2.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":791
 *             Chisholms sqrt(vh/vl)
 *             """
 *             K= sqrt(1.0+ x*( v_g /v_l -1.0))             # <<<<<<<<<<<<<<
 * 
 *         if (flag >2.9 and flag <3.1):
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sqrt); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyFloat_FromDouble((1.0 + (__pyx_v_x * ((__pyx_v_v_g / __pyx_v_v_l) - 1.0)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_K = __pyx_t_9;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "PDSim\core\state_flooded.pyx":793
 *             K= sqrt(1.0+ x*( v_g /v_l -1.0))
 * 
 *         if (flag >2.9 and flag <3.1):             # <<<<<<<<<<<<<<
 * 
 *             K= pow(v_g/v_l ,0.25*.28)
 */
  __pyx_t_7 = ((__pyx_v_flag > 2.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 3.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":795
 *         if (flag >2.9 and flag <3.1):
 * 
 *             K= pow(v_g/v_l ,0.25*.28)             # <<<<<<<<<<<<<<
 * 
 *         return K
 */
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_v_g / __pyx_v_v_l)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble((0.25 * .28)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyNumber_Power2(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_K = __pyx_t_9;
    goto __pyx_L12;
  }
  __pyx_L12:;

  /* "PDSim\core\state_flooded.pyx":797
 *             K= pow(v_g/v_l ,0.25*.28)
 * 
 *         return K             # <<<<<<<<<<<<<<
 * 
 *     cpdef double cv_e(self) except*:
 */
  __pyx_r = __pyx_v_K;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":745
 * 
 * 
 *     cpdef double cK_e(self) except*:             # <<<<<<<<<<<<<<
 *         """
 *         Effective slip ratio of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cK_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_51cK_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_50cK_e[] = "StateFlooded.cK_e(self) -> double\n\n        Effective slip ratio of the mixture\n        \n        Equation taken from page 43, equation 4.51 from Chisholm (1983) for\n        liquid entrainment in gas. Value of psi 0.4 is recommended from text\n        \n        Parameters\n        ----------\n        x: float\n            Mass dryness fraction [-]\n        w: float\n            entrainment [-]\n        \n        Returns\n        -------\n        Ke: float\n                Effective slip ratio [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_51cK_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cK_e (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_50cK_e(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_50cK_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cK_e", 0);
  __Pyx_TraceCall("cK_e", __pyx_f[0], 745);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cK_e(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cK_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":799
 *         return K
 * 
 *     cpdef double cv_e(self) except*:             # <<<<<<<<<<<<<<
 *         """
 *         Effective specific volume of the mixture
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_53cv_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_ve;
  double __pyx_v_flag;
  double __pyx_v_x;
  double __pyx_v_K_e;
  double __pyx_v_v_l;
  double __pyx_v_v_g;
  double __pyx_v_w;
  double __pyx_v_Kc;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cv_e", 0);
  __Pyx_TraceCall("cv_e", __pyx_f[0], 799);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cv_e); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_53cv_e)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":810
 *         cdef double ve,flag,x,K_e,K_c,v_l,v_g,w
 * 
 *         K_e = self.cK_e()             # <<<<<<<<<<<<<<
 *         x = 1 - self.xL_
 *         v_l = 1.0/self.rho_liq()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cK_e(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_K_e = __pyx_t_5;

  /* "PDSim\core\state_flooded.pyx":811
 * 
 *         K_e = self.cK_e()
 *         x = 1 - self.xL_             # <<<<<<<<<<<<<<
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()
 */
  __pyx_v_x = (1.0 - __pyx_v_self->xL_);

  /* "PDSim\core\state_flooded.pyx":812
 *         K_e = self.cK_e()
 *         x = 1 - self.xL_
 *         v_l = 1.0/self.rho_liq()             # <<<<<<<<<<<<<<
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_liq(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_l = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":813
 *         x = 1 - self.xL_
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()             # <<<<<<<<<<<<<<
 *         flag = 0
 *         w = 0
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->rhomass(__pyx_v_self->__pyx_base.pAS, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v_g = (1.0 / __pyx_t_5);

  /* "PDSim\core\state_flooded.pyx":814
 *         v_l = 1.0/self.rho_liq()
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0             # <<<<<<<<<<<<<<
 *         w = 0
 * 
 */
  __pyx_v_flag = 0.0;

  /* "PDSim\core\state_flooded.pyx":815
 *         v_g = 1.0/self.pAS.rhomass()
 *         flag = 0
 *         w = 0             # <<<<<<<<<<<<<<
 * 
 *         if (flag >0.9 and flag <1.1):
 */
  __pyx_v_w = 0.0;

  /* "PDSim\core\state_flooded.pyx":817
 *         w = 0
 * 
 *         if (flag >0.9 and flag <1.1):             # <<<<<<<<<<<<<<
 *             """
 *             // using 5.48 and 5.49 from Chisholm
 */
  __pyx_t_7 = ((__pyx_v_flag > 0.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 1.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":829
 *             //     (    [ K_e -psi ] )
 *             """
 *             Kc =1.0/( w +((1.0 - w) *(1.0 -w))/( K_e -w))             # <<<<<<<<<<<<<<
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/Kc)
 * 
 */
    __pyx_t_5 = ((1.0 - __pyx_v_w) * (1.0 - __pyx_v_w));
    __pyx_t_8 = (__pyx_v_K_e - __pyx_v_w);
    if (unlikely(__pyx_t_8 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = (__pyx_v_w + (__pyx_t_5 / __pyx_t_8));
    if (unlikely(__pyx_t_9 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_Kc = (1.0 / __pyx_t_9);

    /* "PDSim\core\state_flooded.pyx":830
 *             """
 *             Kc =1.0/( w +((1.0 - w) *(1.0 -w))/( K_e -w))
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/Kc)             # <<<<<<<<<<<<<<
 * 
 *         if (flag >1.9 and flag <2.1):
 */
    __pyx_t_9 = (1.0 - __pyx_v_x);
    if (unlikely(__pyx_v_Kc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_ve = (((__pyx_v_x * __pyx_v_v_g) + ((__pyx_v_K_e * (1.0 - __pyx_v_x)) * __pyx_v_v_l)) * (__pyx_v_x + (__pyx_t_9 / __pyx_v_Kc)));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\state_flooded.pyx":832
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/Kc)
 * 
 *         if (flag >1.9 and flag <2.1):             # <<<<<<<<<<<<<<
 *             """
 *             // Equation 5.13 from Chisholm for separated flow
 */
  __pyx_t_7 = ((__pyx_v_flag > 1.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 2.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":836
 *             // Equation 5.13 from Chisholm for separated flow
 *             """
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/ K_e )             # <<<<<<<<<<<<<<
 * 
 *         if (flag >2.9 and flag <3.1):
 */
    __pyx_t_9 = (1.0 - __pyx_v_x);
    if (unlikely(__pyx_v_K_e == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_ve = (((__pyx_v_x * __pyx_v_v_g) + ((__pyx_v_K_e * (1.0 - __pyx_v_x)) * __pyx_v_v_l)) * (__pyx_v_x + (__pyx_t_9 / __pyx_v_K_e)));
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "PDSim\core\state_flooded.pyx":838
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/ K_e )
 * 
 *         if (flag >2.9 and flag <3.1):             # <<<<<<<<<<<<<<
 *             """
 *             // Equation 2.48 from Chisholm
 */
  __pyx_t_7 = ((__pyx_v_flag > 2.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 3.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":842
 *             // Equation 2.48 from Chisholm
 *             """
 *             ve =(1+ w*(1 -x)/x*v_l/ v_g ) /(1+ w*(1 -x)/x)* v_g;             # <<<<<<<<<<<<<<
 * 
 *         if (flag >3.9 and flag <4.1):
 */
    __pyx_t_9 = (__pyx_v_w * (1.0 - __pyx_v_x));
    if (unlikely(__pyx_v_x == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = ((__pyx_t_9 / __pyx_v_x) * __pyx_v_v_l);
    if (unlikely(__pyx_v_v_g == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = (1.0 + (__pyx_t_8 / __pyx_v_v_g));
    __pyx_t_8 = (__pyx_v_w * (1.0 - __pyx_v_x));
    if (unlikely(__pyx_v_x == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (1.0 + (__pyx_t_8 / __pyx_v_x));
    if (unlikely(__pyx_t_5 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_ve = ((__pyx_t_9 / __pyx_t_5) * __pyx_v_v_g);
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "PDSim\core\state_flooded.pyx":844
 *             ve =(1+ w*(1 -x)/x*v_l/ v_g ) /(1+ w*(1 -x)/x)* v_g;
 * 
 *         if (flag >3.9 and flag <4.1):             # <<<<<<<<<<<<<<
 *             """
 *             // using 15 from Morris
 */
  __pyx_t_7 = ((__pyx_v_flag > 3.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 4.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":849
 *             // If going to use this formula , must change pow () to multiply
 *             """
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/ K_e *(1+ (K_e -1)**2.0 /( (v_g /v_l)**0.5-1)))             # <<<<<<<<<<<<<<
 * 
 *         if (flag >4.9 and flag <5.1):
 */
    __pyx_t_5 = (1.0 - __pyx_v_x);
    if (unlikely(__pyx_v_K_e == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = pow((__pyx_v_K_e - 1.0), 2.0);
    if (unlikely(__pyx_v_v_l == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = (pow((__pyx_v_v_g / __pyx_v_v_l), 0.5) - 1.0);
    if (unlikely(__pyx_t_8 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_ve = (((__pyx_v_x * __pyx_v_v_g) + ((__pyx_v_K_e * (1.0 - __pyx_v_x)) * __pyx_v_v_l)) * (__pyx_v_x + ((__pyx_t_5 / __pyx_v_K_e) * (1.0 + (__pyx_t_9 / __pyx_t_8)))));
    goto __pyx_L12;
  }
  __pyx_L12:;

  /* "PDSim\core\state_flooded.pyx":851
 *             ve =(x* v_g + K_e *(1.0 -x)* v_l )*(x +(1.0 - x)/ K_e *(1+ (K_e -1)**2.0 /( (v_g /v_l)**0.5-1)))
 * 
 *         if (flag >4.9 and flag <5.1):             # <<<<<<<<<<<<<<
 *             """
 *             // homogenous
 */
  __pyx_t_7 = ((__pyx_v_flag > 4.9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_flag < 5.1) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim\core\state_flooded.pyx":855
 *             // homogenous
 *             """
 *             ve =(x* v_g +(1.0 - x)* v_l )             # <<<<<<<<<<<<<<
 * 
 *         return ve
 */
    __pyx_v_ve = ((__pyx_v_x * __pyx_v_v_g) + ((1.0 - __pyx_v_x) * __pyx_v_v_l));
    goto __pyx_L15;
  }
  __pyx_L15:;

  /* "PDSim\core\state_flooded.pyx":857
 *             ve =(x* v_g +(1.0 - x)* v_l )
 * 
 *         return ve             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ve;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":799
 *         return K
 * 
 *     cpdef double cv_e(self) except*:             # <<<<<<<<<<<<<<
 *         """
 *         Effective specific volume of the mixture
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cv_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_53cv_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_52cv_e[] = "StateFlooded.cv_e(self) -> double\n\n        Effective specific volume of the mixture\n        Returns\n        -------\n        ve: float\n                effective specific volume [-]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_53cv_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cv_e (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_52cv_e(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_52cv_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("cv_e", 0);
  __Pyx_TraceCall("cv_e", __pyx_f[0], 799);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_e(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cv_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":900
 *     #     return T
 * 
 *     cpdef double T_crit(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Critical temperature of the refrigerant
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_55T_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_T_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("T_crit", 0);
  __Pyx_TraceCall("T_crit", __pyx_f[0], 900);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T_crit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_55T_crit)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":909
 *                 Temperature [K]
 *         """
 *         return self.pAS.keyed_output(constants_header.iT_critical)             # <<<<<<<<<<<<<<
 * 
 *     cpdef double p_crit(self) except *:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iT_critical, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":900
 *     #     return T
 * 
 *     cpdef double T_crit(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Critical temperature of the refrigerant
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.T_crit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_55T_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_54T_crit[] = "StateFlooded.T_crit(self) -> double\n\n        Critical temperature of the refrigerant \n        \n        Returns\n        -------\n        Tcrit: float\n                Temperature [K]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_55T_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("T_crit (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_54T_crit(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_54T_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("T_crit", 0);
  __Pyx_TraceCall("T_crit", __pyx_f[0], 900);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_T_crit(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.T_crit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":911
 *         return self.pAS.keyed_output(constants_header.iT_critical)
 * 
 *     cpdef double p_crit(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Critical pressure of the refrigerant
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_57p_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_p_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("p_crit", 0);
  __Pyx_TraceCall("p_crit", __pyx_f[0], 911);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_p_crit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_57p_crit)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":920
 *                 Pressure [kPa]
 *         """
 *         return self.pAS.keyed_output(constants_header.iP_critical)/1000.0             # <<<<<<<<<<<<<<
 *     ##
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *)__pyx_v_self->__pyx_base.pAS->__pyx_vtab)->keyed_output(__pyx_v_self->__pyx_base.pAS, CoolProp::iP_critical, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = (__pyx_t_5 / 1000.0);
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":911
 *         return self.pAS.keyed_output(constants_header.iT_critical)
 * 
 *     cpdef double p_crit(self) except *:             # <<<<<<<<<<<<<<
 *         """
 *         Critical pressure of the refrigerant
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.p_crit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_57p_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_56p_crit[] = "StateFlooded.p_crit(self) -> double\n\n        Critical pressure of the refrigerant \n        \n        Returns\n        -------\n        pcrit: float\n                Pressure [kPa]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_57p_crit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("p_crit (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_56p_crit(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_56p_crit(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("p_crit", 0);
  __Pyx_TraceCall("p_crit", __pyx_f[0], 911);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_p_crit(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.p_crit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":923
 *     ##
 * 
 *     cpdef double get_p(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the pressure [kPa] """
 *         return self.p_
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_59get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_p(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_p", 0);
  __Pyx_TraceCall("get_p", __pyx_f[0], 923);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_59get_p)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":925
 *     cpdef double get_p(self) except *:
 *         """ Get the pressure [kPa] """
 *         return self.p_             # <<<<<<<<<<<<<<
 *     property p:
 *         """ The pressure [kPa] """
 */
  __pyx_r = __pyx_v_self->__pyx_base.p_;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":923
 *     ##
 * 
 *     cpdef double get_p(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the pressure [kPa] """
 *         return self.p_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_p", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_59get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_58get_p[] = "StateFlooded.get_p(self) -> double\n Get the pressure [kPa] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_59get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_p (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_58get_p(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_58get_p(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_p", 0);
  __Pyx_TraceCall("get_p", __pyx_f[0], 923);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_p(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_p", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":928
 *     property p:
 *         """ The pressure [kPa] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_p()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1p_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1p_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1p___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1p___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 928);

  /* "PDSim\core\state_flooded.pyx":929
 *         """ The pressure [kPa] """
 *         def __get__(self):
 *             return self.get_p()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_T(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_p(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":928
 *     property p:
 *         """ The pressure [kPa] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_p()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.p.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":931
 *             return self.get_p()
 * 
 *     cpdef double get_T(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the temperature [K] """
 *         return self.T_
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_61get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_T(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_T", 0);
  __Pyx_TraceCall("get_T", __pyx_f[0], 931);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_T); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_61get_T)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":933
 *     cpdef double get_T(self) except *:
 *         """ Get the temperature [K] """
 *         return self.T_             # <<<<<<<<<<<<<<
 *     property T:
 *         """ The temperature [K] """
 */
  __pyx_r = __pyx_v_self->__pyx_base.T_;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":931
 *             return self.get_p()
 * 
 *     cpdef double get_T(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the temperature [K] """
 *         return self.T_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_61get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_60get_T[] = "StateFlooded.get_T(self) -> double\n Get the temperature [K] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_61get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_T (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_60get_T(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_60get_T(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_T", 0);
  __Pyx_TraceCall("get_T", __pyx_f[0], 931);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_T(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":936
 *     property T:
 *         """ The temperature [K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_T()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1T___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1T___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 936);

  /* "PDSim\core\state_flooded.pyx":937
 *         """ The temperature [K] """
 *         def __get__(self):
 *             return self.get_T()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_Q(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_T(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":936
 *     property T:
 *         """ The temperature [K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_T()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":939
 *             return self.get_T()
 * 
 *     cpdef double get_Q(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the quality [-] """
 *         return -1
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_63get_Q(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_Q(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_Q", 0);
  __Pyx_TraceCall("get_Q", __pyx_f[0], 939);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_Q); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_63get_Q)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":941
 *     cpdef double get_Q(self) except *:
 *         """ Get the quality [-] """
 *         return -1             # <<<<<<<<<<<<<<
 *     property Q:
 *         """ The quality [-] """
 */
  __pyx_r = -1.0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":939
 *             return self.get_T()
 * 
 *     cpdef double get_Q(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the quality [-] """
 *         return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_Q", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_63get_Q(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_62get_Q[] = "StateFlooded.get_Q(self) -> double\n Get the quality [-] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_63get_Q(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Q (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_62get_Q(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_62get_Q(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_Q", 0);
  __Pyx_TraceCall("get_Q", __pyx_f[0], 939);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_Q(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_Q", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":944
 *     property Q:
 *         """ The quality [-] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_Q()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1Q_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1Q_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1Q___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1Q___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 944);

  /* "PDSim\core\state_flooded.pyx":945
 *         """ The quality [-] """
 *         def __get__(self):
 *             return self.get_Q()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_rho(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_Q(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":944
 *     property Q:
 *         """ The quality [-] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_Q()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.Q.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":947
 *             return self.get_Q()
 * 
 *     cpdef double get_rho(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the density [kg/m^3] """
 *         return self.rho_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_65get_rho(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_rho(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_rho", 0);
  __Pyx_TraceCall("get_rho", __pyx_f[0], 947);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_rho); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_65get_rho)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":949
 *     cpdef double get_rho(self) except *:
 *         """ Get the density [kg/m^3] """
 *         return self.rho_mix()             # <<<<<<<<<<<<<<
 *     property rho:
 *         """ The density [kg/m^3] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->rho_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":947
 *             return self.get_Q()
 * 
 *     cpdef double get_rho(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the density [kg/m^3] """
 *         return self.rho_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_rho", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_65get_rho(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_64get_rho[] = "StateFlooded.get_rho(self) -> double\n Get the density [kg/m^3] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_65get_rho(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rho (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_64get_rho(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_64get_rho(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_rho", 0);
  __Pyx_TraceCall("get_rho", __pyx_f[0], 947);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_rho(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_rho", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":952
 *     property rho:
 *         """ The density [kg/m^3] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_rho()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3rho_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3rho_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3rho___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3rho___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 952);

  /* "PDSim\core\state_flooded.pyx":953
 *         """ The density [kg/m^3] """
 *         def __get__(self):
 *             return self.get_rho()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_h(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_rho(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":952
 *     property rho:
 *         """ The density [kg/m^3] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_rho()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.rho.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":955
 *             return self.get_rho()
 * 
 *     cpdef double get_h(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific enthalpy of the mixture [kJ/kg] """
 *         return self.h_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_67get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_h(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_h", 0);
  __Pyx_TraceCall("get_h", __pyx_f[0], 955);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_h); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_67get_h)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":957
 *     cpdef double get_h(self) except *:
 *         """ Get the specific enthalpy of the mixture [kJ/kg] """
 *         return self.h_mix()             # <<<<<<<<<<<<<<
 *     property h:
 *         """ The specific enthalpy [kJ/kg] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->h_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":955
 *             return self.get_rho()
 * 
 *     cpdef double get_h(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific enthalpy of the mixture [kJ/kg] """
 *         return self.h_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_67get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_66get_h[] = "StateFlooded.get_h(self) -> double\n Get the specific enthalpy of the mixture [kJ/kg] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_67get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_h (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_66get_h(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_66get_h(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_h", 0);
  __Pyx_TraceCall("get_h", __pyx_f[0], 955);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_h(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":960
 *     property h:
 *         """ The specific enthalpy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_h()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1h___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1h___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 960);

  /* "PDSim\core\state_flooded.pyx":961
 *         """ The specific enthalpy [kJ/kg] """
 *         def __get__(self):
 *             return self.get_h()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_u(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_h(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":960
 *     property h:
 *         """ The specific enthalpy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_h()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":963
 *             return self.get_h()
 * 
 *     cpdef double get_u(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific internal energy [kJ/kg] """
 *         return self.u_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_69get_u(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_u(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_u", 0);
  __Pyx_TraceCall("get_u", __pyx_f[0], 963);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_u); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_69get_u)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":965
 *     cpdef double get_u(self) except *:
 *         """ Get the specific internal energy [kJ/kg] """
 *         return self.u_mix()             # <<<<<<<<<<<<<<
 *     property u:
 *         """ The internal energy [kJ/kg] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->u_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":963
 *             return self.get_h()
 * 
 *     cpdef double get_u(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific internal energy [kJ/kg] """
 *         return self.u_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_69get_u(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_68get_u[] = "StateFlooded.get_u(self) -> double\n Get the specific internal energy [kJ/kg] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_69get_u(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_u (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_68get_u(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_68get_u(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_u", 0);
  __Pyx_TraceCall("get_u", __pyx_f[0], 963);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_u(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":968
 *     property u:
 *         """ The internal energy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_u()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1u_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1u_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1u___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1u___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 968);

  /* "PDSim\core\state_flooded.pyx":969
 *         """ The internal energy [kJ/kg] """
 *         def __get__(self):
 *             return self.get_u()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_s(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_u(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":968
 *     property u:
 *         """ The internal energy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_u()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.u.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":971
 *             return self.get_u()
 * 
 *     cpdef double get_s(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific enthalpy [kJ/kg/K] """
 *         return self.s_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_71get_s(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_s(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_s", 0);
  __Pyx_TraceCall("get_s", __pyx_f[0], 971);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_s); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_71get_s)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":973
 *     cpdef double get_s(self) except *:
 *         """ Get the specific enthalpy [kJ/kg/K] """
 *         return self.s_mix()             # <<<<<<<<<<<<<<
 *     property s:
 *         """ The specific enthalpy [kJ/kg/K] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->s_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":971
 *             return self.get_u()
 * 
 *     cpdef double get_s(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific enthalpy [kJ/kg/K] """
 *         return self.s_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_71get_s(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_70get_s[] = "StateFlooded.get_s(self) -> double\n Get the specific enthalpy [kJ/kg/K] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_71get_s(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_s (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_70get_s(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_70get_s(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_s", 0);
  __Pyx_TraceCall("get_s", __pyx_f[0], 971);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_s(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":976
 *     property s:
 *         """ The specific enthalpy [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_s()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1s_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1s___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1s___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 976);

  /* "PDSim\core\state_flooded.pyx":977
 *         """ The specific enthalpy [kJ/kg/K] """
 *         def __get__(self):
 *             return self.get_s()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_s(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":976
 *     property s:
 *         """ The specific enthalpy [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_s()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":980
 * 
 * 
 *     cpdef double get_e(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get specific exergy [kJ/kg] """
 *         return self.e_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_73get_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_e", 0);
  __Pyx_TraceCall("get_e", __pyx_f[0], 980);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_e); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_73get_e)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":982
 *     cpdef double get_e(self) except *:
 *         """ Get specific exergy [kJ/kg] """
 *         return self.e_mix()             # <<<<<<<<<<<<<<
 *     property e:
 *         """ The specific exergy [kJ/kg] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->e_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":980
 * 
 * 
 *     cpdef double get_e(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get specific exergy [kJ/kg] """
 *         return self.e_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_73get_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_72get_e[] = "StateFlooded.get_e(self) -> double\n Get specific exergy [kJ/kg] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_73get_e(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_e (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_72get_e(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_72get_e(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_e", 0);
  __Pyx_TraceCall("get_e", __pyx_f[0], 980);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_e(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":985
 *     property e:
 *         """ The specific exergy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_e()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1e_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1e_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1e___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1e___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 985);

  /* "PDSim\core\state_flooded.pyx":986
 *         """ The specific exergy [kJ/kg] """
 *         def __get__(self):
 *             return self.get_e()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_e(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":985
 *     property e:
 *         """ The specific exergy [kJ/kg] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_e()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.e.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":989
 * 
 * 
 *     cpdef double get_cp(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific heat at constant pressure  [kJ/kg/K] """
 *         return self.cp_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_75get_cp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cp(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cp", 0);
  __Pyx_TraceCall("get_cp", __pyx_f[0], 989);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_75get_cp)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":991
 *     cpdef double get_cp(self) except *:
 *         """ Get the specific heat at constant pressure  [kJ/kg/K] """
 *         return self.cp_mix()             # <<<<<<<<<<<<<<
 *     property cp:
 *         """ The specific heat at constant pressure  [kJ/kg/K] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cp_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":989
 * 
 * 
 *     cpdef double get_cp(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific heat at constant pressure  [kJ/kg/K] """
 *         return self.cp_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_75get_cp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_74get_cp[] = "StateFlooded.get_cp(self) -> double\n Get the specific heat at constant pressure  [kJ/kg/K] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_75get_cp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cp (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_74get_cp(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_74get_cp(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cp", 0);
  __Pyx_TraceCall("get_cp", __pyx_f[0], 989);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cp(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":994
 *     property cp:
 *         """ The specific heat at constant pressure  [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cp___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cp___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 994);

  /* "PDSim\core\state_flooded.pyx":995
 *         """ The specific heat at constant pressure  [kJ/kg/K] """
 *         def __get__(self):
 *             return self.get_cp()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_cv(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_cp(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":994
 *     property cp:
 *         """ The specific heat at constant pressure  [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":997
 *             return self.get_cp()
 * 
 *     cpdef double get_cv(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific heat at constant volume  [kJ/kg/K] """
 *         return self.cv_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_77get_cv(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cv(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cv", 0);
  __Pyx_TraceCall("get_cv", __pyx_f[0], 997);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_77get_cv)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":999
 *     cpdef double get_cv(self) except *:
 *         """ Get the specific heat at constant volume  [kJ/kg/K] """
 *         return self.cv_mix()             # <<<<<<<<<<<<<<
 *     property cv:
 *         """ The specific heat at constant volume  [kJ/kg/K] """
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cv_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":997
 *             return self.get_cp()
 * 
 *     cpdef double get_cv(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the specific heat at constant volume  [kJ/kg/K] """
 *         return self.cv_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_77get_cv(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_76get_cv[] = "StateFlooded.get_cv(self) -> double\n Get the specific heat at constant volume  [kJ/kg/K] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_77get_cv(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cv (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_76get_cv(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_76get_cv(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cv", 0);
  __Pyx_TraceCall("get_cv", __pyx_f[0], 997);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cv(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1002
 *     property cv:
 *         """ The specific heat at constant volume  [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cv()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cv___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_2cv___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1002);

  /* "PDSim\core\state_flooded.pyx":1003
 *         """ The specific heat at constant volume  [kJ/kg/K] """
 *         def __get__(self):
 *             return self.get_cv()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_visc(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_cv(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1002
 *     property cv:
 *         """ The specific heat at constant volume  [kJ/kg/K] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cv()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1005
 *             return self.get_cv()
 * 
 *     cpdef double get_visc(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the viscosity, in [Pa-s]"""
 *         return self.mu_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_79get_visc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_visc(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_visc", 0);
  __Pyx_TraceCall("get_visc", __pyx_f[0], 1005);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_visc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_79get_visc)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1007
 *     cpdef double get_visc(self) except *:
 *         """ Get the viscosity, in [Pa-s]"""
 *         return self.mu_mix()             # <<<<<<<<<<<<<<
 *     property visc:
 *         """ The viscosity, in [Pa-s]"""
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->mu_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1005
 *             return self.get_cv()
 * 
 *     cpdef double get_visc(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the viscosity, in [Pa-s]"""
 *         return self.mu_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_visc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_79get_visc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_78get_visc[] = "StateFlooded.get_visc(self) -> double\n Get the viscosity, in [Pa-s]";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_79get_visc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_visc (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_78get_visc(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_78get_visc(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_visc", 0);
  __Pyx_TraceCall("get_visc", __pyx_f[0], 1005);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_visc(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_visc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1010
 *     property visc:
 *         """ The viscosity, in [Pa-s]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_visc()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4visc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4visc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4visc___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4visc___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1010);

  /* "PDSim\core\state_flooded.pyx":1011
 *         """ The viscosity, in [Pa-s]"""
 *         def __get__(self):
 *             return self.get_visc()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_cond(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_visc(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1010
 *     property visc:
 *         """ The viscosity, in [Pa-s]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_visc()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.visc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1013
 *             return self.get_visc()
 * 
 *     cpdef double get_cond(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the thermal conductivity, in [kW/m/K]"""
 *         return self.k_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_81get_cond(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cond(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cond", 0);
  __Pyx_TraceCall("get_cond", __pyx_f[0], 1013);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cond); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_81get_cond)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1015
 *     cpdef double get_cond(self) except *:
 *         """ Get the thermal conductivity, in [kW/m/K]"""
 *         return self.k_mix()             # <<<<<<<<<<<<<<
 *     property k:
 *         """ The thermal conductivity, in [kW/m/K]"""
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->k_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1013
 *             return self.get_visc()
 * 
 *     cpdef double get_cond(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get the thermal conductivity, in [kW/m/K]"""
 *         return self.k_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cond", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_81get_cond(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_80get_cond[] = "StateFlooded.get_cond(self) -> double\n Get the thermal conductivity, in [kW/m/K]";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_81get_cond(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cond (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_80get_cond(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_80get_cond(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cond", 0);
  __Pyx_TraceCall("get_cond", __pyx_f[0], 1013);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cond(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cond", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1018
 *     property k:
 *         """ The thermal conductivity, in [kW/m/K]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cond()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1k_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1k_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1k___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_1k___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1018);

  /* "PDSim\core\state_flooded.pyx":1019
 *         """ The thermal conductivity, in [kW/m/K]"""
 *         def __get__(self):
 *             return self.get_cond()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_kstar(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_cond(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1018
 *     property k:
 *         """ The thermal conductivity, in [kW/m/K]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cond()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.k.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1021
 *             return self.get_cond()
 * 
 *     cpdef double get_kstar(self) except *:             # <<<<<<<<<<<<<<
 *         """Get ratio of specific heats of the mixture, in [-] """
 *         return self.kstar_mix()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_83get_kstar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_kstar(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_kstar", 0);
  __Pyx_TraceCall("get_kstar", __pyx_f[0], 1021);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_kstar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_83get_kstar)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1023
 *     cpdef double get_kstar(self) except *:
 *         """Get ratio of specific heats of the mixture, in [-] """
 *         return self.kstar_mix()             # <<<<<<<<<<<<<<
 *     property kstar:
 *         def __get__(self):
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->kstar_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1021
 *             return self.get_cond()
 * 
 *     cpdef double get_kstar(self) except *:             # <<<<<<<<<<<<<<
 *         """Get ratio of specific heats of the mixture, in [-] """
 *         return self.kstar_mix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_kstar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_83get_kstar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_82get_kstar[] = "StateFlooded.get_kstar(self) -> double\nGet ratio of specific heats of the mixture, in [-] ";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_83get_kstar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kstar (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_82get_kstar(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_82get_kstar(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_kstar", 0);
  __Pyx_TraceCall("get_kstar", __pyx_f[0], 1021);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_kstar(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_kstar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1025
 *         return self.kstar_mix()
 *     property kstar:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_kstar()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5kstar_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5kstar_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5kstar___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5kstar___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1025);

  /* "PDSim\core\state_flooded.pyx":1026
 *     property kstar:
 *         def __get__(self):
 *             return self.get_kstar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_kstar(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1025
 *         return self.kstar_mix()
 *     property kstar:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_kstar()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.kstar.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1029
 * 
 * 
 *     cpdef double get_dpdT(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get dpdT_const_V, in [ ]"""
 *         return self.dpdT_const_V()
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_85get_dpdT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dpdT(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_dpdT", 0);
  __Pyx_TraceCall("get_dpdT", __pyx_f[0], 1029);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_dpdT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_85get_dpdT)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1031
 *     cpdef double get_dpdT(self) except *:
 *         """ Get dpdT_const_V, in [ ]"""
 *         return self.dpdT_const_V()             # <<<<<<<<<<<<<<
 *     property dpdT:
 *         def __get__(self):
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->dpdT_const_V(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1029
 * 
 * 
 *     cpdef double get_dpdT(self) except *:             # <<<<<<<<<<<<<<
 *         """ Get dpdT_const_V, in [ ]"""
 *         return self.dpdT_const_V()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_dpdT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_85get_dpdT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_84get_dpdT[] = "StateFlooded.get_dpdT(self) -> double\n Get dpdT_const_V, in [ ]";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_85get_dpdT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dpdT (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_84get_dpdT(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_84get_dpdT(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_dpdT", 0);
  __Pyx_TraceCall("get_dpdT", __pyx_f[0], 1029);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dpdT(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_dpdT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1033
 *         return self.dpdT_const_V()
 *     property dpdT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_dpdT()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1033);

  /* "PDSim\core\state_flooded.pyx":1034
 *     property dpdT:
 *         def __get__(self):
 *             return self.get_dpdT()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_dudxL(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_dpdT(((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_v_self), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1033
 *         return self.dpdT_const_V()
 *     property dpdT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_dpdT()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dpdT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1036
 *             return self.get_dpdT()
 * 
 *     cpdef double get_dudxL(self) except *:             # <<<<<<<<<<<<<<
 *         return self.dudxL_mix()
 *     property dudxL:
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_87get_dudxL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dudxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_dudxL", 0);
  __Pyx_TraceCall("get_dudxL", __pyx_f[0], 1036);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_dudxL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_87get_dudxL)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1037
 * 
 *     cpdef double get_dudxL(self) except *:
 *         return self.dudxL_mix()             # <<<<<<<<<<<<<<
 *     property dudxL:
 *         def __get__(self):
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->dudxL_mix(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1036
 *             return self.get_dpdT()
 * 
 *     cpdef double get_dudxL(self) except *:             # <<<<<<<<<<<<<<
 *         return self.dudxL_mix()
 *     property dudxL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_dudxL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_87get_dudxL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_86get_dudxL[] = "StateFlooded.get_dudxL(self) -> double";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_87get_dudxL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dudxL (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_86get_dudxL(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_86get_dudxL(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_dudxL", 0);
  __Pyx_TraceCall("get_dudxL", __pyx_f[0], 1036);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dudxL(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_dudxL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1039
 *         return self.dudxL_mix()
 *     property dudxL:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_dudxL()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1039);

  /* "PDSim\core\state_flooded.pyx":1040
 *     property dudxL:
 *         def __get__(self):
 *             return self.get_dudxL()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_dudxL(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1039
 *         return self.dudxL_mix()
 *     property dudxL:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_dudxL()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.dudxL.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1043
 * 
 * 
 *     cpdef double get_cKe(self) except *:             # <<<<<<<<<<<<<<
 *         return self.cK_e()
 *     property cKe:
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_89get_cKe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cKe(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cKe", 0);
  __Pyx_TraceCall("get_cKe", __pyx_f[0], 1043);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cKe); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_89get_cKe)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1044
 * 
 *     cpdef double get_cKe(self) except *:
 *         return self.cK_e()             # <<<<<<<<<<<<<<
 *     property cKe:
 *         def __get__(self):
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cK_e(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1043
 * 
 * 
 *     cpdef double get_cKe(self) except *:             # <<<<<<<<<<<<<<
 *         return self.cK_e()
 *     property cKe:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cKe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_89get_cKe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_88get_cKe[] = "StateFlooded.get_cKe(self) -> double";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_89get_cKe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cKe (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_88get_cKe(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_88get_cKe(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cKe", 0);
  __Pyx_TraceCall("get_cKe", __pyx_f[0], 1043);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cKe(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cKe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1046
 *         return self.cK_e()
 *     property cKe:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cKe()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cKe_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cKe_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cKe___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cKe___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1046);

  /* "PDSim\core\state_flooded.pyx":1047
 *     property cKe:
 *         def __get__(self):
 *             return self.get_cKe()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_cve(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_cKe(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1046
 *         return self.cK_e()
 *     property cKe:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cKe()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cKe.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1049
 *             return self.get_cKe()
 * 
 *     cpdef double get_cve(self) except *:             # <<<<<<<<<<<<<<
 *         return self.cv_e()
 *     property cve:
 */

static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_91get_cve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cve(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cve", 0);
  __Pyx_TraceCall("get_cve", __pyx_f[0], 1049);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_91get_cve)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\state_flooded.pyx":1050
 * 
 *     cpdef double get_cve(self) except *:
 *         return self.cv_e()             # <<<<<<<<<<<<<<
 *     property cve:
 *         def __get__(self):
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->cv_e(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1049
 *             return self.get_cKe()
 * 
 *     cpdef double get_cve(self) except *:             # <<<<<<<<<<<<<<
 *         return self.cv_e()
 *     property cve:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_91get_cve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_90get_cve[] = "StateFlooded.get_cve(self) -> double";
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_91get_cve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cve (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_90get_cve(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_90get_cve(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("get_cve", 0);
  __Pyx_TraceCall("get_cve", __pyx_f[0], 1049);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cve(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.get_cve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pyx":1052
 *         return self.cv_e()
 *     property cve:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cve()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cve_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cve_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cve___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3cve___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1052);

  /* "PDSim\core\state_flooded.pyx":1053
 *     property cve:
 *         def __get__(self):
 *             return self.get_cve()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_cve(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\state_flooded.pyx":1052
 *         return self.cv_e()
 *     property cve:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.get_cve()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.cve.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pxd":19
 * cdef class StateFlooded(State):
 * 
 *     cdef readonly bytes Liq             # <<<<<<<<<<<<<<
 *     cdef readonly double xL_, alpha
 *     cdef bytes model
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3Liq_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3Liq_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3Liq___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3Liq___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 19);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Liq);
  __pyx_r = __pyx_v_self->Liq;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\state_flooded.pxd":20
 * 
 *     cdef readonly bytes Liq
 *     cdef readonly double xL_, alpha             # <<<<<<<<<<<<<<
 *     cdef bytes model
 *     #cdef int iLiquid    # Maybe ??
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3xL__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3xL__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3xL____get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_3xL____get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 20);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->xL_); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.xL_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5alpha___get__(((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_13state_flooded_12StateFlooded_5alpha___get__(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 20);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.state_flooded.StateFlooded.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_string_from_py_std__in_string", __pyx_f[2], 13);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[2], 31);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[2], 37);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[2], 43);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[2], 49);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[2], 55);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5PDSim_4core_13state_flooded_StateFlooded __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded;

static PyObject *__pyx_tp_new_5PDSim_4core_13state_flooded_StateFlooded(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *p;
  PyObject *o = __pyx_ptype_8CoolProp_8CoolProp_State->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_State*)__pyx_vtabptr_5PDSim_4core_13state_flooded_StateFlooded;
  p->Liq = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->model = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_13state_flooded_StateFlooded(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *p = (struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->Liq);
  Py_CLEAR(p->model);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_8CoolProp_8CoolProp_State)) __pyx_ptype_8CoolProp_8CoolProp_State->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_5PDSim_4core_13state_flooded_StateFlooded);
}

static int __pyx_tp_traverse_5PDSim_4core_13state_flooded_StateFlooded(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_8CoolProp_8CoolProp_State)) ? ((__pyx_ptype_8CoolProp_8CoolProp_State->tp_traverse) ? __pyx_ptype_8CoolProp_8CoolProp_State->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5PDSim_4core_13state_flooded_StateFlooded)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_13state_flooded_StateFlooded(PyObject *o) {
  if (likely(__pyx_ptype_8CoolProp_8CoolProp_State)) { if (__pyx_ptype_8CoolProp_8CoolProp_State->tp_clear) __pyx_ptype_8CoolProp_8CoolProp_State->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5PDSim_4core_13state_flooded_StateFlooded);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_p(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1p_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1T_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_Q(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1Q_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_rho(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3rho_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1h_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_u(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1u_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1s_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_e(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1e_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cp_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_2cv_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_visc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4visc_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_k(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1k_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_kstar(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5kstar_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_dpdT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_4dpdT_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_dudxL(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5dudxL_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cKe(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cKe_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cve(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3cve_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_Liq(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3Liq_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_xL_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3xL__1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5alpha_1__get__(o);
}

static PyMethodDef __pyx_methods_5PDSim_4core_13state_flooded_StateFlooded[] = {
  {"update_TrhoxL", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_3update_TrhoxL, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_2update_TrhoxL},
  {"update", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_5update, METH_O, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_4update},
  {"copy2", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_7copy2, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_6copy2},
  {"s_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_9s_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_8s_liq},
  {"s_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_11s_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_10s_mix},
  {"u_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_13u_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_12u_liq},
  {"u_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_15u_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_14u_mix},
  {"h_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_17h_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_16h_liq},
  {"h_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_19h_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_18h_mix},
  {"e_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_21e_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_20e_mix},
  {"rho_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_23rho_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_22rho_liq},
  {"rho_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_25rho_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_24rho_mix},
  {"cp_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_27cp_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_26cp_liq},
  {"cp_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_29cp_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_28cp_mix},
  {"cv_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_31cv_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_30cv_mix},
  {"mu_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_33mu_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_32mu_liq},
  {"mu_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_35mu_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_34mu_mix},
  {"VoidFrac", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_37VoidFrac, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_36VoidFrac},
  {"k_liq", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_39k_liq, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_38k_liq},
  {"k_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_41k_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_40k_mix},
  {"Pr_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_43Pr_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_42Pr_mix},
  {"kstar_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_45kstar_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_44kstar_mix},
  {"dpdT_const_V", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_47dpdT_const_V, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_46dpdT_const_V},
  {"dudxL_mix", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_49dudxL_mix, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_48dudxL_mix},
  {"cK_e", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_51cK_e, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_50cK_e},
  {"cv_e", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_53cv_e, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_52cv_e},
  {"T_crit", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_55T_crit, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_54T_crit},
  {"p_crit", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_57p_crit, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_56p_crit},
  {"get_p", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_59get_p, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_58get_p},
  {"get_T", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_61get_T, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_60get_T},
  {"get_Q", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_63get_Q, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_62get_Q},
  {"get_rho", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_65get_rho, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_64get_rho},
  {"get_h", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_67get_h, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_66get_h},
  {"get_u", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_69get_u, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_68get_u},
  {"get_s", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_71get_s, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_70get_s},
  {"get_e", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_73get_e, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_72get_e},
  {"get_cp", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_75get_cp, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_74get_cp},
  {"get_cv", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_77get_cv, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_76get_cv},
  {"get_visc", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_79get_visc, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_78get_visc},
  {"get_cond", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_81get_cond, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_80get_cond},
  {"get_kstar", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_83get_kstar, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_82get_kstar},
  {"get_dpdT", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_85get_dpdT, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_84get_dpdT},
  {"get_dudxL", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_87get_dudxL, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_86get_dudxL},
  {"get_cKe", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_89get_cKe, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_88get_cKe},
  {"get_cve", (PyCFunction)__pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_91get_cve, METH_NOARGS, __pyx_doc_5PDSim_4core_13state_flooded_12StateFlooded_90get_cve},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_13state_flooded_StateFlooded[] = {
  {(char *)"p", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_p, 0, __pyx_k_The_pressure_kPa, 0},
  {(char *)"T", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_T, 0, __pyx_k_The_temperature_K, 0},
  {(char *)"Q", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_Q, 0, __pyx_k_The_quality, 0},
  {(char *)"rho", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_rho, 0, __pyx_k_The_density_kg_m_3, 0},
  {(char *)"h", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_h, 0, __pyx_k_The_specific_enthalpy_kJ_kg, 0},
  {(char *)"u", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_u, 0, __pyx_k_The_internal_energy_kJ_kg, 0},
  {(char *)"s", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_s, 0, __pyx_k_The_specific_enthalpy_kJ_kg_K, 0},
  {(char *)"e", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_e, 0, __pyx_k_The_specific_exergy_kJ_kg, 0},
  {(char *)"cp", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cp, 0, __pyx_k_The_specific_heat_at_constant_p, 0},
  {(char *)"cv", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cv, 0, __pyx_k_The_specific_heat_at_constant_v, 0},
  {(char *)"visc", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_visc, 0, __pyx_k_The_viscosity_in_Pa_s, 0},
  {(char *)"k", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_k, 0, __pyx_k_The_thermal_conductivity_in_kW, 0},
  {(char *)"kstar", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_kstar, 0, 0, 0},
  {(char *)"dpdT", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_dpdT, 0, 0, 0},
  {(char *)"dudxL", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_dudxL, 0, 0, 0},
  {(char *)"cKe", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cKe, 0, 0, 0},
  {(char *)"cve", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_cve, 0, 0, 0},
  {(char *)"Liq", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_Liq, 0, 0, 0},
  {(char *)"xL_", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_xL_, 0, 0, 0},
  {(char *)"alpha", __pyx_getprop_5PDSim_4core_13state_flooded_12StateFlooded_alpha, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_13state_flooded_StateFlooded = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.state_flooded.StateFlooded", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_13state_flooded_StateFlooded, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "StateFlooded(Ref, string Liq, double P, double T, double xL, string model)", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_13state_flooded_StateFlooded, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_13state_flooded_StateFlooded, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_13state_flooded_StateFlooded, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_13state_flooded_StateFlooded, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_13state_flooded_12StateFlooded_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_13state_flooded_StateFlooded, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "state_flooded",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_b_ACD100FY, __pyx_k_ACD100FY, sizeof(__pyx_k_ACD100FY), 0, 0, 0, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_C0, __pyx_k_C0, sizeof(__pyx_k_C0), 0, 0, 1, 1},
  {&__pyx_n_s_CoolProp, __pyx_k_CoolProp, sizeof(__pyx_k_CoolProp), 0, 0, 1, 1},
  {&__pyx_n_s_CoolProp_CoolProp, __pyx_k_CoolProp_CoolProp, sizeof(__pyx_k_CoolProp_CoolProp), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_b_Duratherm_LT, __pyx_k_Duratherm_LT, sizeof(__pyx_k_Duratherm_LT), 0, 0, 0, 1},
  {&__pyx_n_s_Fauske, __pyx_k_Fauske, sizeof(__pyx_k_Fauske), 0, 0, 1, 1},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_HEM, __pyx_k_HEM, sizeof(__pyx_k_HEM), 0, 0, 1, 1},
  {&__pyx_kp_b_Invalid_liquid, __pyx_k_Invalid_liquid, sizeof(__pyx_k_Invalid_liquid), 0, 0, 0, 0},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_Liq, __pyx_k_Liq, sizeof(__pyx_k_Liq), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_b_PAG, __pyx_k_PAG, sizeof(__pyx_k_PAG), 0, 0, 0, 1},
  {&__pyx_n_b_PAO, __pyx_k_PAO, sizeof(__pyx_k_PAO), 0, 0, 0, 1},
  {&__pyx_n_b_POE, __pyx_k_POE, sizeof(__pyx_k_POE), 0, 0, 0, 1},
  {&__pyx_n_s_Pr_mix, __pyx_k_Pr_mix, sizeof(__pyx_k_Pr_mix), 0, 0, 1, 1},
  {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
  {&__pyx_n_s_Ref, __pyx_k_Ref, sizeof(__pyx_k_Ref), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_T_crit, __pyx_k_T_crit, sizeof(__pyx_k_T_crit), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VoidFrac, __pyx_k_VoidFrac, sizeof(__pyx_k_VoidFrac), 0, 0, 1, 1},
  {&__pyx_n_b_Water, __pyx_k_Water, sizeof(__pyx_k_Water), 0, 0, 0, 1},
  {&__pyx_n_b_Zerol60, __pyx_k_Zerol60, sizeof(__pyx_k_Zerol60), 0, 0, 0, 1},
  {&__pyx_n_s_Zivi, __pyx_k_Zivi, sizeof(__pyx_k_Zivi), 0, 0, 1, 1},
  {&__pyx_kp_b__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 0, 0},
  {&__pyx_kp_b__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 0, 0},
  {&__pyx_n_s_cK_e, __pyx_k_cK_e, sizeof(__pyx_k_cK_e), 0, 0, 1, 1},
  {&__pyx_n_s_copy2, __pyx_k_copy2, sizeof(__pyx_k_copy2), 0, 0, 1, 1},
  {&__pyx_n_s_cp_liq, __pyx_k_cp_liq, sizeof(__pyx_k_cp_liq), 0, 0, 1, 1},
  {&__pyx_n_s_cp_mix, __pyx_k_cp_mix, sizeof(__pyx_k_cp_mix), 0, 0, 1, 1},
  {&__pyx_n_s_cv_e, __pyx_k_cv_e, sizeof(__pyx_k_cv_e), 0, 0, 1, 1},
  {&__pyx_n_s_cv_mix, __pyx_k_cv_mix, sizeof(__pyx_k_cv_mix), 0, 0, 1, 1},
  {&__pyx_kp_s_dPdT_const_v_not_converging, __pyx_k_dPdT_const_v_not_converging, sizeof(__pyx_k_dPdT_const_v_not_converging), 0, 0, 1, 0},
  {&__pyx_n_s_dpdT_const_V, __pyx_k_dpdT_const_V, sizeof(__pyx_k_dpdT_const_V), 0, 0, 1, 1},
  {&__pyx_kp_s_dpdt_v_is_Infinite, __pyx_k_dpdt_v_is_Infinite, sizeof(__pyx_k_dpdt_v_is_Infinite), 0, 0, 1, 0},
  {&__pyx_kp_s_dpdt_v_is_a_NaN, __pyx_k_dpdt_v_is_a_NaN, sizeof(__pyx_k_dpdt_v_is_a_NaN), 0, 0, 1, 0},
  {&__pyx_n_s_dudxL_mix, __pyx_k_dudxL_mix, sizeof(__pyx_k_dudxL_mix), 0, 0, 1, 1},
  {&__pyx_kp_s_e_m_is_Infinite, __pyx_k_e_m_is_Infinite, sizeof(__pyx_k_e_m_is_Infinite), 0, 0, 1, 0},
  {&__pyx_kp_s_e_m_is_a_NaN, __pyx_k_e_m_is_a_NaN, sizeof(__pyx_k_e_m_is_a_NaN), 0, 0, 1, 0},
  {&__pyx_n_s_e_mix, __pyx_k_e_mix, sizeof(__pyx_k_e_mix), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_fabs, __pyx_k_fabs, sizeof(__pyx_k_fabs), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_fsolve, __pyx_k_fsolve, sizeof(__pyx_k_fsolve), 0, 0, 1, 1},
  {&__pyx_n_s_get_Q, __pyx_k_get_Q, sizeof(__pyx_k_get_Q), 0, 0, 1, 1},
  {&__pyx_n_s_get_T, __pyx_k_get_T, sizeof(__pyx_k_get_T), 0, 0, 1, 1},
  {&__pyx_n_s_get_cKe, __pyx_k_get_cKe, sizeof(__pyx_k_get_cKe), 0, 0, 1, 1},
  {&__pyx_n_s_get_cond, __pyx_k_get_cond, sizeof(__pyx_k_get_cond), 0, 0, 1, 1},
  {&__pyx_n_s_get_cp, __pyx_k_get_cp, sizeof(__pyx_k_get_cp), 0, 0, 1, 1},
  {&__pyx_n_s_get_cv, __pyx_k_get_cv, sizeof(__pyx_k_get_cv), 0, 0, 1, 1},
  {&__pyx_n_s_get_cve, __pyx_k_get_cve, sizeof(__pyx_k_get_cve), 0, 0, 1, 1},
  {&__pyx_n_s_get_dpdT, __pyx_k_get_dpdT, sizeof(__pyx_k_get_dpdT), 0, 0, 1, 1},
  {&__pyx_n_s_get_dudxL, __pyx_k_get_dudxL, sizeof(__pyx_k_get_dudxL), 0, 0, 1, 1},
  {&__pyx_n_s_get_e, __pyx_k_get_e, sizeof(__pyx_k_get_e), 0, 0, 1, 1},
  {&__pyx_n_s_get_h, __pyx_k_get_h, sizeof(__pyx_k_get_h), 0, 0, 1, 1},
  {&__pyx_n_s_get_kstar, __pyx_k_get_kstar, sizeof(__pyx_k_get_kstar), 0, 0, 1, 1},
  {&__pyx_n_s_get_p, __pyx_k_get_p, sizeof(__pyx_k_get_p), 0, 0, 1, 1},
  {&__pyx_n_s_get_rho, __pyx_k_get_rho, sizeof(__pyx_k_get_rho), 0, 0, 1, 1},
  {&__pyx_n_s_get_s, __pyx_k_get_s, sizeof(__pyx_k_get_s), 0, 0, 1, 1},
  {&__pyx_n_s_get_u, __pyx_k_get_u, sizeof(__pyx_k_get_u), 0, 0, 1, 1},
  {&__pyx_n_s_get_visc, __pyx_k_get_visc, sizeof(__pyx_k_get_visc), 0, 0, 1, 1},
  {&__pyx_n_s_h_liq, __pyx_k_h_liq, sizeof(__pyx_k_h_liq), 0, 0, 1, 1},
  {&__pyx_n_s_h_mix, __pyx_k_h_mix, sizeof(__pyx_k_h_mix), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_isinf, __pyx_k_isinf, sizeof(__pyx_k_isinf), 0, 0, 1, 1},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_k_liq, __pyx_k_k_liq, sizeof(__pyx_k_k_liq), 0, 0, 1, 1},
  {&__pyx_n_s_k_mix, __pyx_k_k_mix, sizeof(__pyx_k_k_mix), 0, 0, 1, 1},
  {&__pyx_n_s_kstar_mix, __pyx_k_kstar_mix, sizeof(__pyx_k_kstar_mix), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_mu_liq, __pyx_k_mu_liq, sizeof(__pyx_k_mu_liq), 0, 0, 1, 1},
  {&__pyx_n_s_mu_mix, __pyx_k_mu_mix, sizeof(__pyx_k_mu_mix), 0, 0, 1, 1},
  {&__pyx_n_s_newton, __pyx_k_newton, sizeof(__pyx_k_newton), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_optimize, __pyx_k_optimize, sizeof(__pyx_k_optimize), 0, 0, 1, 1},
  {&__pyx_n_s_p_crit, __pyx_k_p_crit, sizeof(__pyx_k_p_crit), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_rho_liq, __pyx_k_rho_liq, sizeof(__pyx_k_rho_liq), 0, 0, 1, 1},
  {&__pyx_n_s_rho_mix, __pyx_k_rho_mix, sizeof(__pyx_k_rho_mix), 0, 0, 1, 1},
  {&__pyx_n_s_s_liq, __pyx_k_s_liq, sizeof(__pyx_k_s_liq), 0, 0, 1, 1},
  {&__pyx_n_s_s_mix, __pyx_k_s_mix, sizeof(__pyx_k_s_mix), 0, 0, 1, 1},
  {&__pyx_n_s_scipy, __pyx_k_scipy, sizeof(__pyx_k_scipy), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_optimize, __pyx_k_scipy_optimize, sizeof(__pyx_k_scipy_optimize), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_u_liq, __pyx_k_u_liq, sizeof(__pyx_k_u_liq), 0, 0, 1, 1},
  {&__pyx_n_s_u_mix, __pyx_k_u_mix, sizeof(__pyx_k_u_mix), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_TrhoxL, __pyx_k_update_TrhoxL, sizeof(__pyx_k_update_TrhoxL), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_xL, __pyx_k_xL, sizeof(__pyx_k_xL), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PDSim\core\state_flooded.pyx":47
 * 
 *         if b'::' in Ref:
 *             backend, Ref = Ref.split(b'::', 1)             # <<<<<<<<<<<<<<
 * 
 *         self.set_Fluid(Ref, backend)
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_kp_b__2, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_2_30 = PyFloat_FromDouble(2.30); if (unlikely(!__pyx_float_2_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_940 = PyFloat_FromDouble(1.940); if (unlikely(!__pyx_float_1_940)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1094_3 = PyFloat_FromDouble(1094.3); if (unlikely(!__pyx_float_1094_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_08646 = PyFloat_FromDouble(1.08646); if (unlikely(!__pyx_float_1_08646)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_3337_116 = PyFloat_FromDouble(3337.116); if (unlikely(!__pyx_float_3337_116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initstate_flooded(void); /*proto*/
PyMODINIT_FUNC initstate_flooded(void)
#else
PyMODINIT_FUNC PyInit_state_flooded(void); /*proto*/
PyMODINIT_FUNC PyInit_state_flooded(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_state_flooded(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("state_flooded", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_PDSim__core__state_flooded) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "PDSim.core.state_flooded")) {
      if (unlikely(PyDict_SetItemString(modules, "PDSim.core.state_flooded", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_5PDSim_4core_13state_flooded_paras = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5PDSim_4core_13state_flooded_paras_inverse = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_8CoolProp_8CoolProp_State = __Pyx_ImportType("CoolProp.CoolProp", "State", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_State), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_State)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8CoolProp_8CoolProp_State = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_State*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_State->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_State)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4core_13state_flooded_StateFlooded = &__pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base = *__pyx_vtabptr_8CoolProp_8CoolProp_State;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.update = (PyObject *(*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_Q = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_Q;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_T = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_T;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_p = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_p;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_h = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_h;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_rho = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_rho;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_s = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_s;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_u = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_u;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_visc = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_visc;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_cond = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cond;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_cp = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cp;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_cv = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cv;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.__pyx_base.get_dpdT = (double (*)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dpdT;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.update_TrhoxL = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, double, double, double, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_update_TrhoxL;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.copy2 = (struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *(*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_copy2;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.VoidFrac = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_VoidFrac;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.get_e = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_e;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.get_kstar = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_kstar;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.get_dudxL = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_dudxL;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.get_cKe = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cKe;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.get_cve = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_get_cve;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.s_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.u_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.h_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.e_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_e_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.rho_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.cp_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.cv_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.mu_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.k_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.Pr_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_Pr_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.kstar_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_kstar_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.dudxL_mix = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dudxL_mix;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.dpdT_const_V = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_dpdT_const_V;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.T_crit = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_T_crit;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.p_crit = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_p_crit;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.s_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_s_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.u_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_u_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.h_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_h_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.rho_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_rho_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.cp_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cp_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.mu_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_mu_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.k_liq = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_k_liq;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.cK_e = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cK_e;
  __pyx_vtable_5PDSim_4core_13state_flooded_StateFlooded.cv_e = (double (*)(struct __pyx_obj_5PDSim_4core_13state_flooded_StateFlooded *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_13state_flooded_12StateFlooded_cv_e;
  __pyx_type_5PDSim_4core_13state_flooded_StateFlooded.tp_base = __pyx_ptype_8CoolProp_8CoolProp_State;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_13state_flooded_StateFlooded) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_13state_flooded_StateFlooded.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_13state_flooded_StateFlooded.tp_dict, __pyx_vtabptr_5PDSim_4core_13state_flooded_StateFlooded) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "StateFlooded", (PyObject *)&__pyx_type_5PDSim_4core_13state_flooded_StateFlooded) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_13state_flooded_StateFlooded = &__pyx_type_5PDSim_4core_13state_flooded_StateFlooded;
  /*--- Type import code ---*/
  __pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = __Pyx_ImportType("CoolProp.CoolProp", "PyPhaseEnvelopeData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = __Pyx_ImportType("CoolProp.CoolProp", "PyGuessesStructure", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = __Pyx_ImportType("CoolProp.CoolProp", "PyCriticalState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8CoolProp_8CoolProp_AbstractState = __Pyx_ImportType("CoolProp.CoolProp", "AbstractState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState), 1); if (unlikely(!__pyx_ptype_8CoolProp_8CoolProp_AbstractState)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8CoolProp_8CoolProp_AbstractState = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_AbstractState->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "PDSim\core\state_flooded.pyx":4
 * 
 * cimport cython
 * import CoolProp.CoolProp             # <<<<<<<<<<<<<<
 * import math
 * from math import floor
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_CoolProp_CoolProp, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CoolProp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":5
 * cimport cython
 * import CoolProp.CoolProp
 * import math             # <<<<<<<<<<<<<<
 * from math import floor
 * from math import log
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":6
 * import CoolProp.CoolProp
 * import math
 * from math import floor             # <<<<<<<<<<<<<<
 * from math import log
 * from math import sqrt
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_floor);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_floor);
  __Pyx_GIVEREF(__pyx_n_s_floor);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_floor, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":7
 * import math
 * from math import floor
 * from math import log             # <<<<<<<<<<<<<<
 * from math import sqrt
 * import warnings
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_log);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_log);
  __Pyx_GIVEREF(__pyx_n_s_log);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_log, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":8
 * from math import floor
 * from math import log
 * from math import sqrt             # <<<<<<<<<<<<<<
 * import warnings
 * from scipy import optimize
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_sqrt);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_sqrt);
  __Pyx_GIVEREF(__pyx_n_s_sqrt);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sqrt, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":9
 * from math import log
 * from math import sqrt
 * import warnings             # <<<<<<<<<<<<<<
 * from scipy import optimize
 * from numpy import float64,isnan,isinf,fabs
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":10
 * from math import sqrt
 * import warnings
 * from scipy import optimize             # <<<<<<<<<<<<<<
 * from numpy import float64,isnan,isinf,fabs
 * from scipy.optimize import newton,fsolve
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_optimize);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_optimize);
  __Pyx_GIVEREF(__pyx_n_s_optimize);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_optimize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_optimize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":11
 * import warnings
 * from scipy import optimize
 * from numpy import float64,isnan,isinf,fabs             # <<<<<<<<<<<<<<
 * from scipy.optimize import newton,fsolve
 * 
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_float64);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_float64);
  __Pyx_GIVEREF(__pyx_n_s_float64);
  __Pyx_INCREF(__pyx_n_s_isnan);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_isnan);
  __Pyx_GIVEREF(__pyx_n_s_isnan);
  __Pyx_INCREF(__pyx_n_s_isinf);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_isinf);
  __Pyx_GIVEREF(__pyx_n_s_isinf);
  __Pyx_INCREF(__pyx_n_s_fabs);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_fabs);
  __Pyx_GIVEREF(__pyx_n_s_fabs);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_float64, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isnan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isinf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isinf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_fabs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fabs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":12
 * from scipy import optimize
 * from numpy import float64,isnan,isinf,fabs
 * from scipy.optimize import newton,fsolve             # <<<<<<<<<<<<<<
 * 
 * from CoolProp.CoolProp cimport constants_header
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_newton);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_newton);
  __Pyx_GIVEREF(__pyx_n_s_newton);
  __Pyx_INCREF(__pyx_n_s_fsolve);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_fsolve);
  __Pyx_GIVEREF(__pyx_n_s_fsolve);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_optimize, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_newton); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_newton, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_fsolve); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fsolve, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":16
 * from CoolProp.CoolProp cimport constants_header
 * 
 * cdef dict paras = {constants_header.iDmass : 'D',             # <<<<<<<<<<<<<<
 *                    constants_header.iQ : 'Q',
 *                    constants_header.imolar_mass : 'M',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(CoolProp::iDmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":17
 * 
 * cdef dict paras = {constants_header.iDmass : 'D',
 *                    constants_header.iQ : 'Q',             # <<<<<<<<<<<<<<
 *                    constants_header.imolar_mass : 'M',
 *                    constants_header.iT : 'T',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_Q) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":18
 * cdef dict paras = {constants_header.iDmass : 'D',
 *                    constants_header.iQ : 'Q',
 *                    constants_header.imolar_mass : 'M',             # <<<<<<<<<<<<<<
 *                    constants_header.iT : 'T',
 *                    constants_header.iHmass : 'H',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::imolar_mass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_M) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":19
 *                    constants_header.iQ : 'Q',
 *                    constants_header.imolar_mass : 'M',
 *                    constants_header.iT : 'T',             # <<<<<<<<<<<<<<
 *                    constants_header.iHmass : 'H',
 *                    constants_header.iP : 'P',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_T) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":20
 *                    constants_header.imolar_mass : 'M',
 *                    constants_header.iT : 'T',
 *                    constants_header.iHmass : 'H',             # <<<<<<<<<<<<<<
 *                    constants_header.iP : 'P',
 *                    constants_header.iCpmass : 'C',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iHmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_H) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":21
 *                    constants_header.iT : 'T',
 *                    constants_header.iHmass : 'H',
 *                    constants_header.iP : 'P',             # <<<<<<<<<<<<<<
 *                    constants_header.iCpmass : 'C',
 *                    constants_header.iCp0mass : 'C0',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_P) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":22
 *                    constants_header.iHmass : 'H',
 *                    constants_header.iP : 'P',
 *                    constants_header.iCpmass : 'C',             # <<<<<<<<<<<<<<
 *                    constants_header.iCp0mass : 'C0',
 *                    constants_header.iCvmass : 'O',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iCpmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_C) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":23
 *                    constants_header.iP : 'P',
 *                    constants_header.iCpmass : 'C',
 *                    constants_header.iCp0mass : 'C0',             # <<<<<<<<<<<<<<
 *                    constants_header.iCvmass : 'O',
 *                    constants_header.iviscosity : 'V',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iCp0mass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_C0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":24
 *                    constants_header.iCpmass : 'C',
 *                    constants_header.iCp0mass : 'C0',
 *                    constants_header.iCvmass : 'O',             # <<<<<<<<<<<<<<
 *                    constants_header.iviscosity : 'V',
 *                    constants_header.iconductivity : 'L',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iCvmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_O) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":25
 *                    constants_header.iCp0mass : 'C0',
 *                    constants_header.iCvmass : 'O',
 *                    constants_header.iviscosity : 'V',             # <<<<<<<<<<<<<<
 *                    constants_header.iconductivity : 'L',
 *                    constants_header.ispeed_sound: 'A',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iviscosity); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_V) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":26
 *                    constants_header.iCvmass : 'O',
 *                    constants_header.iviscosity : 'V',
 *                    constants_header.iconductivity : 'L',             # <<<<<<<<<<<<<<
 *                    constants_header.ispeed_sound: 'A',
 *                    constants_header.iSmass : 'S',
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iconductivity); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_L) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":27
 *                    constants_header.iviscosity : 'V',
 *                    constants_header.iconductivity : 'L',
 *                    constants_header.ispeed_sound: 'A',             # <<<<<<<<<<<<<<
 *                    constants_header.iSmass : 'S',
 *                    constants_header.iUmass : 'U'
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::ispeed_sound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_A) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":28
 *                    constants_header.iconductivity : 'L',
 *                    constants_header.ispeed_sound: 'A',
 *                    constants_header.iSmass : 'S',             # <<<<<<<<<<<<<<
 *                    constants_header.iUmass : 'U'
 * }
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iSmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_S) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim\core\state_flooded.pyx":29
 *                    constants_header.ispeed_sound: 'A',
 *                    constants_header.iSmass : 'S',
 *                    constants_header.iUmass : 'U'             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = PyInt_FromLong(CoolProp::iUmass); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_U) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_5PDSim_4core_13state_flooded_paras);
  __Pyx_DECREF_SET(__pyx_v_5PDSim_4core_13state_flooded_paras, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":32
 * }
 * 
 * cdef dict paras_inverse = {v:k for k,v in paras.iteritems()}             # <<<<<<<<<<<<<<
 * 
 * cdef class StateFlooded(State):
 */
  { /* enter inner scope */
    PyObject *__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_k = NULL;
    PyObject *__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_v = NULL;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_5PDSim_4core_13state_flooded_paras == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_5PDSim_4core_13state_flooded_paras, 1, __pyx_n_s_iteritems, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_k, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_v, __pyx_t_7);
      __pyx_t_7 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_v, (PyObject*)__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_k))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_k);
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_v);
    goto __pyx_L7_exit_scope;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_k);
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_5PDSim_4core_13state_flooded_v);
    goto __pyx_L1_error;
    __pyx_L7_exit_scope:;
  } /* exit inner scope */
  __Pyx_XGOTREF(__pyx_v_5PDSim_4core_13state_flooded_paras_inverse);
  __Pyx_DECREF_SET(__pyx_v_5PDSim_4core_13state_flooded_paras_inverse, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\core\state_flooded.pyx":1
 * from __future__ import division             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PDSim.core.state_flooded", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PDSim.core.state_flooded");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    return tstate->use_tracing && retval;
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
