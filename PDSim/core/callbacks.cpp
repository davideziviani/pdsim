/* Generated by Cython 0.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__PDSim__core__callbacks
#define __PYX_HAVE_API__PDSim__core__callbacks
#include "string.h"
#include "stdio.h"
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PDSim\\core\\callbacks.pyx",
  "PDSim\\core\\callbacks.pxd",
  "PDSim\\misc\\datatypes.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue;
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector;
struct __pyx_obj_5PDSim_4misc_9datatypes_listm;
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym;
struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback;
struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer;
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v;

/* "PDSim\misc\datatypes.pxd":15
 *     """ The list that contains the values """
 * 
 *     cpdef v(self, int ndmin = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class listm(list):
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v {
  int __pyx_n;
  int ndmin;
};

/* "PDSim\misc\datatypes.pxd":6
 * from cpython cimport bool
 * 
 * cdef class AnnotatedValue(object):             # <<<<<<<<<<<<<<
 *     cdef public object value
 *     cdef public str annotation, units, key
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue {
  PyObject_HEAD
  PyObject *value;
  PyObject *annotation;
  PyObject *units;
  PyObject *key;
};


/* "PDSim\misc\datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtab;
  PyObject *vec;
};


/* "PDSim\misc\datatypes.pxd":17
 *     cpdef v(self, int ndmin = *)
 * 
 * cdef class listm(list):             # <<<<<<<<<<<<<<
 *     """
 *     See http://docs.cython.org/src/userguide/special_methods.html
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_listm {
  PyListObject __pyx_base;
};


/* "PDSim\misc\datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtab;
  double *data;
  int N;
};


/* "PDSim\core\callbacks.pxd":5
 * 
 * ########## Heat transfer callbacks ##########
 * cdef class HeatTransferCallback(object):             # <<<<<<<<<<<<<<
 *     cdef object core
 *     cpdef arraym call(self, double t)
 */
struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_vtab;
  PyObject *core;
};


/* "PDSim\core\callbacks.pxd":9
 *     cpdef arraym call(self, double t)
 * 
 * cdef class WrappedHeatTransferCallback(HeatTransferCallback):             # <<<<<<<<<<<<<<
 *     cdef object func
 *     cpdef arraym call(self, double t)
 */
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback {
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback __pyx_base;
  PyObject *func;
};


/* "PDSim\core\callbacks.pxd":14
 * 
 * ########## Lumps energy balance callbacks ##########
 * cdef class LumpsEnergyBalanceCallback(object):             # <<<<<<<<<<<<<<
 *     cdef object core
 *     cpdef arraym call(self)
 */
struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_vtab;
  PyObject *core;
};


/* "PDSim\core\callbacks.pxd":18
 *     cpdef arraym call(self)
 * 
 * cdef class WrappedLumpsEnergyBalanceCallback(LumpsEnergyBalanceCallback):             # <<<<<<<<<<<<<<
 *     cdef object func
 *     cpdef arraym call(self)
 */
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback {
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback __pyx_base;
  PyObject *func;
};


/* "PDSim\core\callbacks.pxd":23
 * 
 * ########## Step callbacks ##########
 * cdef class StepCallback(object):             # <<<<<<<<<<<<<<
 *     cdef readonly object disable_adaptive
 *     cdef readonly double h
 */
struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback *__pyx_vtab;
  PyObject *disable_adaptive;
  double h;
  PyObject *core;
};


/* "PDSim\core\callbacks.pxd":29
 *     cpdef double call(self, double t, double h, int i) except *
 * 
 * cdef class WrappedStepCallback(StepCallback):             # <<<<<<<<<<<<<<
 *     cdef object func
 *     cpdef double call(self, double t, double h, int i) except *
 */
struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback {
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback __pyx_base;
  PyObject *func;
};


/* "PDSim\core\callbacks.pxd":34
 * 
 * ########## Callbacks container ##########
 * cdef class CallbackContainer(object):             # <<<<<<<<<<<<<<
 *     cdef public StepCallback step_callback
 *     cdef public HeatTransferCallback heat_transfer_callback
 */
struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer {
  PyObject_HEAD
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *step_callback;
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *heat_transfer_callback;
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *lumps_energy_balance_callback;
  PyObject *endcycle_callback;
};



/* "PDSim\misc\datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector {
  PyObject *(*v)(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector;


/* "PDSim\misc\datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym {
  void (*set_data)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double *, int);
  PyObject *(*set_size)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*dealloc)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*copy)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*slice)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int);
  PyObject *(*extend)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  double (*get_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  double (*set_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, double, int __pyx_skip_dispatch);
  PyObject *(*fill)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, int __pyx_skip_dispatch);
  PyBoolObject *(*all_finite)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym;


/* "PDSim\core\callbacks.pyx":47
 *         return r
 * 
 * cdef class HeatTransferCallback(object):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper to contain the callback that is called to evaluate the heat transfer
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*call)(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_HeatTransferCallback;


/* "PDSim\core\callbacks.pyx":83
 *         return self.call(t)
 * 
 * cdef class WrappedHeatTransferCallback(HeatTransferCallback):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, Core, func):
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedHeatTransferCallback {
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;


/* "PDSim\core\callbacks.pyx":1
 * cdef class LumpsEnergyBalanceCallback(object):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper to contain the callback that is called to evaluate the lump energy
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*call)(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;


/* "PDSim\core\callbacks.pyx":32
 *         return self.call()
 * 
 * cdef class WrappedLumpsEnergyBalanceCallback(LumpsEnergyBalanceCallback):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, Core, func):
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback {
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;


/* "PDSim\core\callbacks.pyx":98
 *         return Q
 * 
 * cdef class StepCallback(object):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper to contain the callback that is called when at the beginning of
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback {
  double (*call)(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *, double, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_StepCallback;


/* "PDSim\core\callbacks.pyx":139
 *         return self.call(t,h,i)
 * 
 * cdef class WrappedStepCallback(StepCallback):             # <<<<<<<<<<<<<<
 *     """
 *     This class is intended to provide a python-friendly wrapper of the Cython base class so
 */

struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedStepCallback {
  struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedStepCallback;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_CLEAR(__pyx_frame)
  #endif
  #define __Pyx_TraceDeclarations(codeobj)                            \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;                                          \
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  {   PyThreadState* tstate = PyThreadState_GET();                                   \
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&                       \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {    \
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
      }                                                                              \
  }
  #define __Pyx_TraceException()                                                           \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (tstate->use_tracing &&                                                           \
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {          \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          PyObject *exc_info = __Pyx_GetExceptionTuple();                                  \
          if (exc_info) {                                                                  \
              if (CYTHON_TRACE && tstate->c_tracefunc)                                     \
                  tstate->c_tracefunc(                                                     \
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);      \
              tstate->c_profilefunc(                                                       \
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);        \
              Py_DECREF(exc_info);                                                         \
          }                                                                                \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
  #define __Pyx_TraceReturn(result)                                                       \
  if (likely(!__Pyx_use_tracing)); else {                                                 \
      PyThreadState* tstate = PyThreadState_GET();                                        \
      if (tstate->use_tracing) {                                                          \
          tstate->tracing++;                                                              \
          tstate->use_tracing = 0;                                                        \
          if (CYTHON_TRACE && tstate->c_tracefunc)                                        \
              tstate->c_tracefunc(                                                        \
                  tstate->c_traceobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);   \
          if (tstate->c_profilefunc)                                                      \
              tstate->c_profilefunc(                                                      \
                  tstate->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result); \
          CYTHON_FRAME_DEL;                                                               \
          tstate->use_tracing = 1;                                                        \
          tstate->tracing--;                                                              \
      }                                                                                   \
  }
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)
#endif
#if CYTHON_TRACE
  #define __Pyx_TraceLine(lineno)                                                          \
  if (likely(!__Pyx_use_tracing)); else {                                                  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {                          \
          __pyx_frame->f_lineno = lineno;                                                 \
          tstate->tracing++;                                                               \
          tstate->use_tracing = 0;                                                         \
          tstate->c_tracefunc(tstate->c_traceobj, __pyx_frame, PyTrace_LINE, NULL);       \
          tstate->use_tracing = 1;                                                         \
          tstate->tracing--;                                                               \
      }                                                                                    \
  }
#else
  #define __Pyx_TraceLine(lineno)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_20HeatTransferCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, double __pyx_v_t, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_9callbacks_12StepCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t, CYTHON_UNUSED double __pyx_v_h, CYTHON_UNUSED int __pyx_v_i, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_5PDSim_4core_9callbacks_19WrappedStepCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'PDSim.misc.datatypes' */
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_Collector = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_listm = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_arraym = 0;

/* Module declarations from 'PDSim.core.callbacks' */
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_HeatTransferCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_WrappedHeatTransferCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_StepCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_WrappedStepCallback = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_9callbacks_CallbackContainer = 0;
#define __Pyx_MODULE_NAME "PDSim.core.callbacks"
int __pyx_module_is_main_PDSim__core__callbacks = 0;

/* Implementation of 'PDSim.core.callbacks' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static int __pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, double __pyx_v_t); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, double __pyx_v_t); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_12StepCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive___get__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_1h___get__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_HeatTransferCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedHeatTransferCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_StepCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedStepCallback(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_CallbackContainer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_t[] = "t";
static char __pyx_k_CVs[] = "CVs";
static char __pyx_k_and[] = " and ";
static char __pyx_k_Core[] = "Core";
static char __pyx_k_call[] = "call";
static char __pyx_k_func[] = "func";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Nexist[] = "Nexist";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_disable_adaptive[] = "disable_adaptive";
static char __pyx_k_NotImplementedError[] = "NotImplementedError";
static char __pyx_k_endcycle_callback_object[] = "endcycle_callback: object";
static char __pyx_k_StepCallback_is_not_meant_to_be[] = "StepCallback is not meant to be instantiated directly - you should derive from it";
static char __pyx_k_Cannot_apply_unary_operator_to_a[] = "Cannot apply unary operator to arraym instances with lengths of ";
static char __pyx_k_HeatTransferCallback_is_not_mean[] = "HeatTransferCallback is not meant to be instantiated directly - you should derive from it";
static char __pyx_k_Length_of_Q_from_wrapped_heat_tr[] = "Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence";
static char __pyx_k_LumpsEnergyBalanceCallback_is_no[] = "LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it";
static char __pyx_k_heat_transfer_callback_PDSim_cor[] = "heat_transfer_callback: PDSim.core.callbacks.HeatTransferCallback";
static char __pyx_k_lumps_energy_balance_callback_PD[] = "lumps_energy_balance_callback: PDSim.core.callbacks.LumpsEnergyBalanceCallback";
static char __pyx_k_step_callback_PDSim_core_callbac[] = "step_callback: PDSim.core.callbacks.StepCallback";
static char __pyx_k_step_callback_must_return_a_bool[] = "step_callback must return a bool,float pair, returned the values:";
static PyObject *__pyx_n_s_CVs;
static PyObject *__pyx_kp_s_Cannot_apply_unary_operator_to_a;
static PyObject *__pyx_n_s_Core;
static PyObject *__pyx_kp_s_HeatTransferCallback_is_not_mean;
static PyObject *__pyx_kp_s_Length_of_Q_from_wrapped_heat_tr;
static PyObject *__pyx_kp_s_LumpsEnergyBalanceCallback_is_no;
static PyObject *__pyx_n_s_Nexist;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_StepCallback_is_not_meant_to_be;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_and;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_disable_adaptive;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_s_step_callback_must_return_a_bool;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;

/* "PDSim\core\callbacks.pyx":22
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         self.core = Core
 * 
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_Core = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.LumpsEnergyBalanceCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)__pyx_v_self), __pyx_v_Core);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self, PyObject *__pyx_v_Core) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 22);

  /* "PDSim\core\callbacks.pyx":23
 * 
 *     def __init__(self, Core):
 *         self.core = Core             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym call(self):
 */
  __Pyx_INCREF(__pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __Pyx_GOTREF(__pyx_v_self->core);
  __Pyx_DECREF(__pyx_v_self->core);
  __pyx_v_self->core = __pyx_v_Core;

  /* "PDSim\core\callbacks.pyx":22
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         self.core = Core
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":25
 *         self.core = Core
 * 
 *     cpdef arraym call(self):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 25);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_3call)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":27
 *     cpdef arraym call(self):
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":25
 *         self.core = Core
 * 
 *     cpdef arraym call(self):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.callbacks.LumpsEnergyBalanceCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_2call[] = "LumpsEnergyBalanceCallback.call(self) -> arraym\n This is the base class function, so don't do anything, return all zeros for the heat transfer rate ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 25);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_call(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.LumpsEnergyBalanceCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":29
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self):             # <<<<<<<<<<<<<<
 *         return self.call()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 0))) return NULL;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_4__call__(((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 29);

  /* "PDSim\core\callbacks.pyx":30
 * 
 *     def __call__(self):
 *         return self.call()             # <<<<<<<<<<<<<<
 * 
 * cdef class WrappedLumpsEnergyBalanceCallback(LumpsEnergyBalanceCallback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)__pyx_v_self->__pyx_vtab)->call(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":29
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self):             # <<<<<<<<<<<<<<
 *         return self.call()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.LumpsEnergyBalanceCallback.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":34
 * cdef class WrappedLumpsEnergyBalanceCallback(LumpsEnergyBalanceCallback):
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         self.core = Core
 *         self.func = func
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  PyObject *__pyx_v_func = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,&__pyx_n_s_func,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_Core = values[0];
    __pyx_v_func = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedLumpsEnergyBalanceCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)__pyx_v_self), __pyx_v_Core, __pyx_v_func);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 34);

  /* "PDSim\core\callbacks.pyx":35
 * 
 *     def __init__(self, Core, func):
 *         self.core = Core             # <<<<<<<<<<<<<<
 *         self.func = func
 * 
 */
  __Pyx_INCREF(__pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.core);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.core);
  __pyx_v_self->__pyx_base.core = __pyx_v_Core;

  /* "PDSim\core\callbacks.pyx":36
 *     def __init__(self, Core, func):
 *         self.core = Core
 *         self.func = func             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym call(self):
 */
  __Pyx_INCREF(__pyx_v_func);
  __Pyx_GIVEREF(__pyx_v_func);
  __Pyx_GOTREF(__pyx_v_self->func);
  __Pyx_DECREF(__pyx_v_self->func);
  __pyx_v_self->func = __pyx_v_func;

  /* "PDSim\core\callbacks.pyx":34
 * cdef class WrappedLumpsEnergyBalanceCallback(LumpsEnergyBalanceCallback):
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         self.core = Core
 *         self.func = func
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":38
 *         self.func = func
 * 
 *     cpdef arraym call(self):             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_r = NULL;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 38);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_3call)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":42
 *         This function returns the values from the wrapped function
 *         """
 *         r = self.func()             # <<<<<<<<<<<<<<
 *         if not isinstance(r,arraym):
 *             r = arraym(r)
 */
  __Pyx_INCREF(__pyx_v_self->func);
  __pyx_t_2 = __pyx_v_self->func; __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim\core\callbacks.pyx":43
 *         """
 *         r = self.func()
 *         if not isinstance(r,arraym):             # <<<<<<<<<<<<<<
 *             r = arraym(r)
 *         return r
 */
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_r, ((PyObject*)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)); 
  __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
  if (__pyx_t_6) {

    /* "PDSim\core\callbacks.pyx":44
 *         r = self.func()
 *         if not isinstance(r,arraym):
 *             r = arraym(r)             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_r);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_r);
    __Pyx_GIVEREF(__pyx_v_r);
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "PDSim\core\callbacks.pyx":45
 *         if not isinstance(r,arraym):
 *             r = arraym(r)
 *         return r             # <<<<<<<<<<<<<<
 * 
 * cdef class HeatTransferCallback(object):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_r) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_v_r);
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":38
 *         self.func = func
 * 
 *     cpdef arraym call(self):             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedLumpsEnergyBalanceCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_2call[] = "WrappedLumpsEnergyBalanceCallback.call(self) -> arraym\n \n        This function returns the values from the wrapped function\n        ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_3call(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 38);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_call(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedLumpsEnergyBalanceCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":69
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         #: The flag which determines whether to enable or disable the adaptive method
 *         #: If true and the adaptive method is being used, the adaptive solver will
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_Core = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)__pyx_v_self), __pyx_v_Core);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, PyObject *__pyx_v_Core) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 69);

  /* "PDSim\core\callbacks.pyx":73
 *         #: If true and the adaptive method is being used, the adaptive solver will
 *         #: be turned off
 *         self.disable_adaptive = False             # <<<<<<<<<<<<<<
 *         self.core = Core
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_disable_adaptive, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\core\callbacks.pyx":74
 *         #: be turned off
 *         self.disable_adaptive = False
 *         self.core = Core             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym call(self, double t):
 */
  __Pyx_INCREF(__pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __Pyx_GOTREF(__pyx_v_self->core);
  __Pyx_DECREF(__pyx_v_self->core);
  __pyx_v_self->core = __pyx_v_Core;

  /* "PDSim\core\callbacks.pyx":69
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         #: The flag which determines whether to enable or disable the adaptive method
 *         #: If true and the adaptive method is being used, the adaptive solver will
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":76
 *         self.core = Core
 * 
 *     cpdef arraym call(self, double t):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_20HeatTransferCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 76);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_3call)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":78
 *     cpdef arraym call(self, double t):
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, double t):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":76
 *         self.core = Core
 * 
 *     cpdef arraym call(self, double t):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_20HeatTransferCallback_2call[] = "HeatTransferCallback.call(self, double t) -> arraym\n This is the base class function, so don't do anything, return all zeros for the heat transfer rate ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 76);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_9callbacks_20HeatTransferCallback_call(__pyx_v_self, __pyx_v_t, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":80
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self, double t):             # <<<<<<<<<<<<<<
 *         return self.call(t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_4__call__(((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_20HeatTransferCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 80);

  /* "PDSim\core\callbacks.pyx":81
 * 
 *     def __call__(self, double t):
 *         return self.call(t)             # <<<<<<<<<<<<<<
 * 
 * cdef class WrappedHeatTransferCallback(HeatTransferCallback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback *)__pyx_v_self->__pyx_vtab)->call(__pyx_v_self, __pyx_v_t, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":80
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self, double t):             # <<<<<<<<<<<<<<
 *         return self.call(t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.HeatTransferCallback.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":85
 * cdef class WrappedHeatTransferCallback(HeatTransferCallback):
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         self.core = Core
 *         self.func = func
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  PyObject *__pyx_v_func = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,&__pyx_n_s_func,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_Core = values[0];
    __pyx_v_func = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedHeatTransferCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)__pyx_v_self), __pyx_v_Core, __pyx_v_func);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 85);

  /* "PDSim\core\callbacks.pyx":86
 * 
 *     def __init__(self, Core, func):
 *         self.core = Core             # <<<<<<<<<<<<<<
 *         self.func = func
 * 
 */
  __Pyx_INCREF(__pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.core);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.core);
  __pyx_v_self->__pyx_base.core = __pyx_v_Core;

  /* "PDSim\core\callbacks.pyx":87
 *     def __init__(self, Core, func):
 *         self.core = Core
 *         self.func = func             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym call(self, double t):
 */
  __Pyx_INCREF(__pyx_v_func);
  __Pyx_GIVEREF(__pyx_v_func);
  __Pyx_GOTREF(__pyx_v_self->func);
  __Pyx_DECREF(__pyx_v_self->func);
  __pyx_v_self->func = __pyx_v_func;

  /* "PDSim\core\callbacks.pyx":85
 * cdef class WrappedHeatTransferCallback(HeatTransferCallback):
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         self.core = Core
 *         self.func = func
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":89
 *         self.func = func
 * 
 *     cpdef arraym call(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, double __pyx_v_t, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_Q = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 89);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_3call)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":93
 *         This function returns the values from the wrapped function
 *         """
 *         cdef arraym Q = self.func(t)             # <<<<<<<<<<<<<<
 *         if not len(Q) == self.core.CVs.Nexist:
 *             raise ValueError('Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence')
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->func);
  __pyx_t_4 = __pyx_v_self->func; __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim\core\callbacks.pyx":94
 *         """
 *         cdef arraym Q = self.func(t)
 *         if not len(Q) == self.core.CVs.Nexist:             # <<<<<<<<<<<<<<
 *             raise ValueError('Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence')
 *         return Q
 */
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_Q)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Nexist); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = ((!__pyx_t_8) != 0);
  if (__pyx_t_9) {

    /* "PDSim\core\callbacks.pyx":95
 *         cdef arraym Q = self.func(t)
 *         if not len(Q) == self.core.CVs.Nexist:
 *             raise ValueError('Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence')             # <<<<<<<<<<<<<<
 *         return Q
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PDSim\core\callbacks.pyx":96
 *         if not len(Q) == self.core.CVs.Nexist:
 *             raise ValueError('Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence')
 *         return Q             # <<<<<<<<<<<<<<
 * 
 * cdef class StepCallback(object):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_Q));
  __pyx_r = __pyx_v_Q;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":89
 *         self.func = func
 * 
 *     cpdef arraym call(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedHeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Q);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_2call[] = "WrappedHeatTransferCallback.call(self, double t) -> arraym\n \n        This function returns the values from the wrapped function\n        ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedHeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 89);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_call(__pyx_v_self, __pyx_v_t, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedHeatTransferCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":119
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_12StepCallback___init__[] = "\n        Parameters\n        ----------\n        Core: The :class:`PDSim.core.core.PDSimCore` subclass\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback___init__;
#endif
static int __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_Core = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_12StepCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self), __pyx_v_Core);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_12StepCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, PyObject *__pyx_v_Core) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 119);

  /* "PDSim\core\callbacks.pyx":128
 *         #: If true and the adaptive method is being used, the adaptive solver will
 *         #: be turned off
 *         self.disable_adaptive = False             # <<<<<<<<<<<<<<
 *         self.core = Core
 * 
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->disable_adaptive);
  __Pyx_DECREF(__pyx_v_self->disable_adaptive);
  __pyx_v_self->disable_adaptive = Py_False;

  /* "PDSim\core\callbacks.pyx":129
 *         #: be turned off
 *         self.disable_adaptive = False
 *         self.core = Core             # <<<<<<<<<<<<<<
 * 
 *     cpdef double call(self, double t, double h, int i) except *:
 */
  __Pyx_INCREF(__pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __Pyx_GOTREF(__pyx_v_self->core);
  __Pyx_DECREF(__pyx_v_self->core);
  __pyx_v_self->core = __pyx_v_Core;

  /* "PDSim\core\callbacks.pyx":119
 *     """
 * 
 *     def __init__(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":131
 *         self.core = Core
 * 
 *     cpdef double call(self, double t, double h, int i) except *:             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4core_9callbacks_12StepCallback_call(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t, CYTHON_UNUSED double __pyx_v_h, CYTHON_UNUSED int __pyx_v_i, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 131);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_3call)) {
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_h); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      }
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_10;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":133
 *     cpdef double call(self, double t, double h, int i) except *:
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, double t, double h, int i):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PDSim\core\callbacks.pyx":131
 *         self.core = Core
 * 
 *     cpdef double call(self, double t, double h, int i) except *:             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_12StepCallback_2call[] = "StepCallback.call(self, double t, double h, int i) -> double\n This is the base class function, so don't do anything, use the same step size again ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  double __pyx_v_h;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_h,&__pyx_n_s_i,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "call") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_h == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_i = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_12StepCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self), __pyx_v_t, __pyx_v_h, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 131);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_9callbacks_12StepCallback_call(__pyx_v_self, __pyx_v_t, __pyx_v_h, __pyx_v_i, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":135
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self, double t, double h, int i):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         return self.call(t,h,i)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_12StepCallback_4__call__[] = " This is the base class function, so don't do anything, use the same step size again ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback_4__call__;
#endif
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  double __pyx_v_h;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_h,&__pyx_n_s_i,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_h == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_i = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_12StepCallback_4__call__(((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self), __pyx_v_t, __pyx_v_h, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_4__call__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 135);

  /* "PDSim\core\callbacks.pyx":137
 *     def __call__(self, double t, double h, int i):
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         return self.call(t,h,i)             # <<<<<<<<<<<<<<
 * 
 * cdef class WrappedStepCallback(StepCallback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self->__pyx_vtab)->call(__pyx_v_self, __pyx_v_t, __pyx_v_h, __pyx_v_i, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":135
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')
 * 
 *     def __call__(self, double t, double h, int i):             # <<<<<<<<<<<<<<
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         return self.call(t,h,i)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":24
 * ########## Step callbacks ##########
 * cdef class StepCallback(object):
 *     cdef readonly object disable_adaptive             # <<<<<<<<<<<<<<
 *     cdef readonly double h
 *     cdef object core
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive___get__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 24);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->disable_adaptive);
  __pyx_r = __pyx_v_self->disable_adaptive;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":25
 * cdef class StepCallback(object):
 *     cdef readonly object disable_adaptive
 *     cdef readonly double h             # <<<<<<<<<<<<<<
 *     cdef object core
 *     cpdef double call(self, double t, double h, int i) except *
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_12StepCallback_1h___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_12StepCallback_1h___get__(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 25);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.StepCallback.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":146
 *     """
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_19WrappedStepCallback___init__[] = "\n        Parameters\n        ----------\n        Core: The :class:`PDSim.core.core.PDSimCore` subclass\n        func: The function that will be called\n        \n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_9callbacks_19WrappedStepCallback___init__;
#endif
static int __pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Core = 0;
  PyObject *__pyx_v_func = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Core,&__pyx_n_s_func,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Core)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_Core = values[0];
    __pyx_v_func = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback___init__(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)__pyx_v_self), __pyx_v_Core, __pyx_v_func);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback___init__(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, PyObject *__pyx_v_Core, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 146);

  /* "PDSim\core\callbacks.pyx":154
 * 
 *         """
 *         StepCallback.__init__(self,Core)             # <<<<<<<<<<<<<<
 *         self.func = func
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_5PDSim_4core_9callbacks_StepCallback)), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_Core);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_Core);
  __Pyx_GIVEREF(__pyx_v_Core);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\core\callbacks.pyx":155
 *         """
 *         StepCallback.__init__(self,Core)
 *         self.func = func             # <<<<<<<<<<<<<<
 * 
 *     cpdef double call(self, double t, double h, int i) except *:
 */
  __Pyx_INCREF(__pyx_v_func);
  __Pyx_GIVEREF(__pyx_v_func);
  __Pyx_GOTREF(__pyx_v_self->func);
  __Pyx_DECREF(__pyx_v_self->func);
  __pyx_v_self->func = __pyx_v_func;

  /* "PDSim\core\callbacks.pyx":146
 *     """
 * 
 *     def __init__(self, Core, func):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pyx":157
 *         self.func = func
 * 
 *     cpdef double call(self, double t, double h, int i) except *:             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

static PyObject *__pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_5PDSim_4core_9callbacks_19WrappedStepCallback_call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_vals = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 157);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_call); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_3call)) {
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_h); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      }
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_10;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim\core\callbacks.pyx":161
 *         This function returns the values from the wrapped function
 *         """
 *         vals = self.func(t,h,i)             # <<<<<<<<<<<<<<
 *         try:
 *             self.disable_adaptive,h = vals
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_h); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_self->func);
  __pyx_t_5 = __pyx_v_self->func; __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_3 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_vals = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim\core\callbacks.pyx":162
 *         """
 *         vals = self.func(t,h,i)
 *         try:             # <<<<<<<<<<<<<<
 *             self.disable_adaptive,h = vals
 *         except TypeError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "PDSim\core\callbacks.pyx":163
 *         vals = self.func(t,h,i)
 *         try:
 *             self.disable_adaptive,h = vals             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise TypeError('step_callback must return a bool,float pair, returned the values:'+str(vals))
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_vals))) || (PyList_CheckExact(__pyx_v_vals))) {
        PyObject* sequence = __pyx_v_vals;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_3 = PyObject_GetIter(__pyx_v_vals); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_14(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_5 = __pyx_t_14(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __pyx_L12_unpacking_done:;
      }
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->__pyx_base.disable_adaptive);
      __Pyx_DECREF(__pyx_v_self->__pyx_base.disable_adaptive);
      __pyx_v_self->__pyx_base.disable_adaptive = __pyx_t_1;
      __pyx_t_1 = 0;
      __pyx_v_h = __pyx_t_10;
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PDSim\core\callbacks.pyx":164
 *         try:
 *             self.disable_adaptive,h = vals
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise TypeError('step_callback must return a bool,float pair, returned the values:'+str(vals))
 *         return h
 */
    __pyx_t_15 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);

      /* "PDSim\core\callbacks.pyx":165
 *             self.disable_adaptive,h = vals
 *         except TypeError:
 *             raise TypeError('step_callback must return a bool,float pair, returned the values:'+str(vals))             # <<<<<<<<<<<<<<
 *         return h
 * 
 */
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_vals);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_vals);
      __Pyx_GIVEREF(__pyx_v_vals);
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_Add(__pyx_kp_s_step_callback_must_return_a_bool, __pyx_t_6); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "PDSim\core\callbacks.pyx":166
 *         except TypeError:
 *             raise TypeError('step_callback must return a bool,float pair, returned the values:'+str(vals))
 *         return h             # <<<<<<<<<<<<<<
 * 
 * cdef class CallbackContainer(object):
 */
  __pyx_r = __pyx_v_h;
  goto __pyx_L0;

  /* "PDSim\core\callbacks.pyx":157
 *         self.func = func
 * 
 *     cpdef double call(self, double t, double h, int i) except *:             # <<<<<<<<<<<<<<
 *         """
 *         This function returns the values from the wrapped function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_9callbacks_19WrappedStepCallback_2call[] = "WrappedStepCallback.call(self, double t, double h, int i) -> double\n \n        This function returns the values from the wrapped function\n        ";
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_3call(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  double __pyx_v_h;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_h,&__pyx_n_s_i,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "call") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_h == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_i = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback_2call(((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)__pyx_v_self), __pyx_v_t, __pyx_v_h, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_19WrappedStepCallback_2call(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *__pyx_v_self, double __pyx_v_t, double __pyx_v_h, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("call", 0);
  __Pyx_TraceCall("call", __pyx_f[0], 157);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_9callbacks_19WrappedStepCallback_call(__pyx_v_self, __pyx_v_t, __pyx_v_h, __pyx_v_i, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PDSim.core.callbacks.WrappedStepCallback.call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":35
 * ########## Callbacks container ##########
 * cdef class CallbackContainer(object):
 *     cdef public StepCallback step_callback             # <<<<<<<<<<<<<<
 *     cdef public HeatTransferCallback heat_transfer_callback
 *     cdef public LumpsEnergyBalanceCallback lumps_energy_balance_callback
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 35);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->step_callback));
  __pyx_r = ((PyObject *)__pyx_v_self->step_callback);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_2__set__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 35);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4core_9callbacks_StepCallback))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->step_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->step_callback));
  __pyx_v_self->step_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.CallbackContainer.step_callback.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_4__del__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 35);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->step_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->step_callback));
  __pyx_v_self->step_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":36
 * cdef class CallbackContainer(object):
 *     cdef public StepCallback step_callback
 *     cdef public HeatTransferCallback heat_transfer_callback             # <<<<<<<<<<<<<<
 *     cdef public LumpsEnergyBalanceCallback lumps_energy_balance_callback
 *     cdef public object endcycle_callback
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 36);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->heat_transfer_callback));
  __pyx_r = ((PyObject *)__pyx_v_self->heat_transfer_callback);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_2__set__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 36);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4core_9callbacks_HeatTransferCallback))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->heat_transfer_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->heat_transfer_callback));
  __pyx_v_self->heat_transfer_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.CallbackContainer.heat_transfer_callback.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_4__del__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 36);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->heat_transfer_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->heat_transfer_callback));
  __pyx_v_self->heat_transfer_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":37
 *     cdef public StepCallback step_callback
 *     cdef public HeatTransferCallback heat_transfer_callback
 *     cdef public LumpsEnergyBalanceCallback lumps_energy_balance_callback             # <<<<<<<<<<<<<<
 *     cdef public object endcycle_callback
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 37);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->lumps_energy_balance_callback));
  __pyx_r = ((PyObject *)__pyx_v_self->lumps_energy_balance_callback);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_2__set__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 37);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->lumps_energy_balance_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->lumps_energy_balance_callback));
  __pyx_v_self->lumps_energy_balance_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.callbacks.CallbackContainer.lumps_energy_balance_callback.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_4__del__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 37);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->lumps_energy_balance_callback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->lumps_energy_balance_callback));
  __pyx_v_self->lumps_energy_balance_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\core\callbacks.pxd":38
 *     cdef public HeatTransferCallback heat_transfer_callback
 *     cdef public LumpsEnergyBalanceCallback lumps_energy_balance_callback
 *     cdef public object endcycle_callback             # <<<<<<<<<<<<<<
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback___get__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback___get__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 38);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->endcycle_callback);
  __pyx_r = __pyx_v_self->endcycle_callback;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_2__set__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_2__set__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 38);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->endcycle_callback);
  __Pyx_DECREF(__pyx_v_self->endcycle_callback);
  __pyx_v_self->endcycle_callback = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_4__del__(((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_4__del__(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 38);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->endcycle_callback);
  __Pyx_DECREF(__pyx_v_self->endcycle_callback);
  __pyx_v_self->endcycle_callback = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim\misc\datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

static CYTHON_INLINE PyObject *__pyx_f_5PDSim_4misc_9datatypes_check_dims(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations(NULL)
  __Pyx_RefNannySetupContext("check_dims", 0);
  __Pyx_TraceCall("check_dims", __pyx_f[2], 41);

  /* "PDSim\misc\datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __pyx_t_1 = ((__pyx_v_x->N != __pyx_v_y->N) != 0);
  if (__pyx_t_1) {

    /* "PDSim\misc\datatypes.pxd":43
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))             # <<<<<<<<<<<<<<
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x->N); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_and); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_y->N); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PDSim\misc\datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.misc.datatypes.check_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback __pyx_vtable_5PDSim_4core_9callbacks_HeatTransferCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_HeatTransferCallback(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_9callbacks_HeatTransferCallback;
  p->core = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_HeatTransferCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->core);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_HeatTransferCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)o;
  if (p->core) {
    e = (*v)(p->core, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_HeatTransferCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)o;
  tmp = ((PyObject*)p->core);
  p->core = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_HeatTransferCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_3call, METH_O, __pyx_doc_5PDSim_4core_9callbacks_20HeatTransferCallback_2call},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.HeatTransferCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_HeatTransferCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "HeatTransferCallback(Core)\n\n    A wrapper to contain the callback that is called to evaluate the heat transfer\n    rate for all of the control volumes.  It is not meant to be instantiated\n    directly, rather inherited\n    \n    Two methods are provided, call(t) and __call__(t).  The special method\n     __call__(t) allows an instance of StepCallback to be called \n     directly like:: \n     \n         SC = StepCallback(core)\n         SC(t)\n         \n     or you can call the call() method like::\n     \n         SC.call(t)\n         \n     Having both methods allows cython functions to stay at the C++ layer since they\n     can call the .call() function with defined argument types and not\n     need to come back to python layer for speed \n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_HeatTransferCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_HeatTransferCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_HeatTransferCallback, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_HeatTransferCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedHeatTransferCallback __pyx_vtable_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedHeatTransferCallback(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *p;
  PyObject *o = __pyx_tp_new_5PDSim_4core_9callbacks_HeatTransferCallback(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4core_9callbacks_HeatTransferCallback*)__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;
  p->func = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedHeatTransferCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->func);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_HeatTransferCallback(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedHeatTransferCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)o;
  e = __pyx_tp_traverse_5PDSim_4core_9callbacks_HeatTransferCallback(o, v, a); if (e) return e;
  if (p->func) {
    e = (*v)(p->func, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedHeatTransferCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback *)o;
  __pyx_tp_clear_5PDSim_4core_9callbacks_HeatTransferCallback(o);
  tmp = ((PyObject*)p->func);
  p->func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_WrappedHeatTransferCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_3call, METH_O, __pyx_doc_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_2call},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.WrappedHeatTransferCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedHeatTransferCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedHeatTransferCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5PDSim_4core_9callbacks_20HeatTransferCallback_5__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "WrappedHeatTransferCallback(Core, func)", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedHeatTransferCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedHeatTransferCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_WrappedHeatTransferCallback, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_WrappedHeatTransferCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback __pyx_vtable_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
  p->core = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->core);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)o;
  if (p->core) {
    e = (*v)(p->core, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)o;
  tmp = ((PyObject*)p->core);
  p->core = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_3call, METH_NOARGS, __pyx_doc_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_2call},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.LumpsEnergyBalanceCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "LumpsEnergyBalanceCallback(Core)\n\n    A wrapper to contain the callback that is called to evaluate the lump energy\n    balance, as well as the error on the discharge temperature\n    \n    Two methods are provided, call() and __call__().  The special method\n     __call__() allows an instance of LumpsEnergyBalanceCallback to be called \n     directly like:: \n     \n         LEBC = LumpsEnergyBalanceCallback(core)\n         LEBC()\n         \n     or you can call the call() method like::\n     \n         LEBC.call()\n         \n     Having both methods allows cython functions to stay at the C++ layer since they\n     can call the .call() function with defined argument types and not\n     need to come back to python layer for speed \n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback __pyx_vtable_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *p;
  PyObject *o = __pyx_tp_new_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback*)__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;
  p->func = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->func);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)o;
  e = __pyx_tp_traverse_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(o, v, a); if (e) return e;
  if (p->func) {
    e = (*v)(p->func, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback *)o;
  __pyx_tp_clear_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback(o);
  tmp = ((PyObject*)p->func);
  p->func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_3call, METH_NOARGS, __pyx_doc_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_2call},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.WrappedLumpsEnergyBalanceCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_5__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "WrappedLumpsEnergyBalanceCallback(Core, func)", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback __pyx_vtable_5PDSim_4core_9callbacks_StepCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_StepCallback(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_9callbacks_StepCallback;
  p->disable_adaptive = Py_None; Py_INCREF(Py_None);
  p->core = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_StepCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->disable_adaptive);
  Py_CLEAR(p->core);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_StepCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)o;
  if (p->disable_adaptive) {
    e = (*v)(p->disable_adaptive, a); if (e) return e;
  }
  if (p->core) {
    e = (*v)(p->core, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_StepCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)o;
  tmp = ((PyObject*)p->disable_adaptive);
  p->disable_adaptive = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->core);
  p->core = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_12StepCallback_disable_adaptive(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_16disable_adaptive_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_12StepCallback_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1h_1__get__(o);
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_StepCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_12StepCallback_3call, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_9callbacks_12StepCallback_2call},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_9callbacks_StepCallback[] = {
  {(char *)"disable_adaptive", __pyx_getprop_5PDSim_4core_9callbacks_12StepCallback_disable_adaptive, 0, 0, 0},
  {(char *)"h", __pyx_getprop_5PDSim_4core_9callbacks_12StepCallback_h, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_StepCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.StepCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_StepCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "StepCallback(Core)\n\n    A wrapper to contain the callback that is called when at the beginning of \n    the step, before the step is actually evaluated.\n    \n    Two methods are provided, call(t,h,i) and __call__(t,h,i).  The special method\n     __call__(t,h,i) allows an instance of StepCallback to be called \n     directly like:: \n     \n         SC = StepCallback(core)\n         SC(t,h,i)\n         \n     or you can call the call() method like::\n     \n         SC.call(t,h,i)\n         \n     Having both methods allows cython functions to stay at the C++ layer since they\n     can call the .call() function with defined argument types and not\n     need to come back to python layer for speed\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_StepCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_StepCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_StepCallback, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_9callbacks_StepCallback, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_StepCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_9callbacks_WrappedStepCallback __pyx_vtable_5PDSim_4core_9callbacks_WrappedStepCallback;

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_WrappedStepCallback(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *p;
  PyObject *o = __pyx_tp_new_5PDSim_4core_9callbacks_StepCallback(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4core_9callbacks_StepCallback*)__pyx_vtabptr_5PDSim_4core_9callbacks_WrappedStepCallback;
  p->func = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedStepCallback(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->func);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_StepCallback(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedStepCallback(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)o;
  e = __pyx_tp_traverse_5PDSim_4core_9callbacks_StepCallback(o, v, a); if (e) return e;
  if (p->func) {
    e = (*v)(p->func, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedStepCallback(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *p = (struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback *)o;
  __pyx_tp_clear_5PDSim_4core_9callbacks_StepCallback(o);
  tmp = ((PyObject*)p->func);
  p->func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4core_9callbacks_WrappedStepCallback[] = {
  {"call", (PyCFunction)__pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_3call, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_9callbacks_19WrappedStepCallback_2call},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.WrappedStepCallback", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_WrappedStepCallback), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_WrappedStepCallback, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5PDSim_4core_9callbacks_12StepCallback_5__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "WrappedStepCallback(Core, func)\n\n    This class is intended to provide a python-friendly wrapper of the Cython base class so \n    that high-level python code can seamlessly interface through into Cython.  It is not as fast\n    as developing a cython Callback function, but it is easier to do\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_WrappedStepCallback, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_WrappedStepCallback, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_9callbacks_WrappedStepCallback, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_9callbacks_19WrappedStepCallback_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_WrappedStepCallback, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5PDSim_4core_9callbacks_CallbackContainer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)o);
  p->step_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)Py_None); Py_INCREF(Py_None);
  p->heat_transfer_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)Py_None); Py_INCREF(Py_None);
  p->lumps_energy_balance_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)Py_None); Py_INCREF(Py_None);
  p->endcycle_callback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_9callbacks_CallbackContainer(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *p = (struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->step_callback);
  Py_CLEAR(p->heat_transfer_callback);
  Py_CLEAR(p->lumps_energy_balance_callback);
  Py_CLEAR(p->endcycle_callback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_9callbacks_CallbackContainer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *p = (struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)o;
  if (p->step_callback) {
    e = (*v)(((PyObject*)p->step_callback), a); if (e) return e;
  }
  if (p->heat_transfer_callback) {
    e = (*v)(((PyObject*)p->heat_transfer_callback), a); if (e) return e;
  }
  if (p->lumps_energy_balance_callback) {
    e = (*v)(((PyObject*)p->lumps_energy_balance_callback), a); if (e) return e;
  }
  if (p->endcycle_callback) {
    e = (*v)(p->endcycle_callback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_9callbacks_CallbackContainer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *p = (struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer *)o;
  tmp = ((PyObject*)p->step_callback);
  p->step_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->heat_transfer_callback);
  p->heat_transfer_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lumps_energy_balance_callback);
  p->lumps_energy_balance_callback = ((struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->endcycle_callback);
  p->endcycle_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_step_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_step_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_13step_callback_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_heat_transfer_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_heat_transfer_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_22heat_transfer_callback_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_lumps_energy_balance_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_lumps_energy_balance_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_29lumps_energy_balance_callback_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_endcycle_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_endcycle_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_9callbacks_17CallbackContainer_17endcycle_callback_5__del__(o);
  }
}

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_9callbacks_CallbackContainer[] = {
  {(char *)"step_callback", __pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_step_callback, __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_step_callback, __pyx_k_step_callback_PDSim_core_callbac, 0},
  {(char *)"heat_transfer_callback", __pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_heat_transfer_callback, __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_heat_transfer_callback, __pyx_k_heat_transfer_callback_PDSim_cor, 0},
  {(char *)"lumps_energy_balance_callback", __pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_lumps_energy_balance_callback, __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_lumps_energy_balance_callback, __pyx_k_lumps_energy_balance_callback_PD, 0},
  {(char *)"endcycle_callback", __pyx_getprop_5PDSim_4core_9callbacks_17CallbackContainer_endcycle_callback, __pyx_setprop_5PDSim_4core_9callbacks_17CallbackContainer_endcycle_callback, __pyx_k_endcycle_callback_object, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_9callbacks_CallbackContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.callbacks.CallbackContainer", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_9callbacks_CallbackContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_9callbacks_CallbackContainer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_9callbacks_CallbackContainer, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_9callbacks_CallbackContainer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_9callbacks_CallbackContainer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_9callbacks_CallbackContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "AnnotatedValue",
    "CallbackContainer",
    "Collector",
    "HeatTransferCallback",
    "LumpsEnergyBalanceCallback",
    "StepCallback",
    "WrappedHeatTransferCallback",
    "WrappedLumpsEnergyBalanceCallback",
    "WrappedStepCallback",
    "__pyx_ctuple_double",
    "__pyx_ctuple_double__and_double__and_int",
    "__pyx_ctuple_double__and_double__and_int_struct",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int_struct",
    "__pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v",
    "arraym",
    "bool",
    "listm",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}


/* import_all_from is an unexposed function from ceval.c */

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1; /* Unexpected error */
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "callbacks",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CVs, __pyx_k_CVs, sizeof(__pyx_k_CVs), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_k_Cannot_apply_unary_operator_to_a, sizeof(__pyx_k_Cannot_apply_unary_operator_to_a), 0, 0, 1, 0},
  {&__pyx_n_s_Core, __pyx_k_Core, sizeof(__pyx_k_Core), 0, 0, 1, 1},
  {&__pyx_kp_s_HeatTransferCallback_is_not_mean, __pyx_k_HeatTransferCallback_is_not_mean, sizeof(__pyx_k_HeatTransferCallback_is_not_mean), 0, 0, 1, 0},
  {&__pyx_kp_s_Length_of_Q_from_wrapped_heat_tr, __pyx_k_Length_of_Q_from_wrapped_heat_tr, sizeof(__pyx_k_Length_of_Q_from_wrapped_heat_tr), 0, 0, 1, 0},
  {&__pyx_kp_s_LumpsEnergyBalanceCallback_is_no, __pyx_k_LumpsEnergyBalanceCallback_is_no, sizeof(__pyx_k_LumpsEnergyBalanceCallback_is_no), 0, 0, 1, 0},
  {&__pyx_n_s_Nexist, __pyx_k_Nexist, sizeof(__pyx_k_Nexist), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_StepCallback_is_not_meant_to_be, __pyx_k_StepCallback_is_not_meant_to_be, sizeof(__pyx_k_StepCallback_is_not_meant_to_be), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 0},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_disable_adaptive, __pyx_k_disable_adaptive, sizeof(__pyx_k_disable_adaptive), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_s_step_callback_must_return_a_bool, __pyx_k_step_callback_must_return_a_bool, sizeof(__pyx_k_step_callback_must_return_a_bool), 0, 0, 1, 0},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PDSim\core\callbacks.pyx":27
 *     cpdef arraym call(self):
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('LumpsEnergyBalanceCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_LumpsEnergyBalanceCallback_is_no); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "PDSim\core\callbacks.pyx":78
 *     cpdef arraym call(self, double t):
 *         """ This is the base class function, so don't do anything, return all zeros for the heat transfer rate """
 *         return NotImplementedError('HeatTransferCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, double t):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_HeatTransferCallback_is_not_mean); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "PDSim\core\callbacks.pyx":95
 *         cdef arraym Q = self.func(t)
 *         if not len(Q) == self.core.CVs.Nexist:
 *             raise ValueError('Length of Q from wrapped heat transfer callback is not equal to length of number of CV in existence')             # <<<<<<<<<<<<<<
 *         return Q
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Length_of_Q_from_wrapped_heat_tr); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "PDSim\core\callbacks.pyx":133
 *     cpdef double call(self, double t, double h, int i) except *:
 *         """ This is the base class function, so don't do anything, use the same step size again """
 *         raise NotImplementedError('StepCallback is not meant to be instantiated directly - you should derive from it')             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, double t, double h, int i):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_StepCallback_is_not_meant_to_be); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcallbacks(void); /*proto*/
PyMODINIT_FUNC initcallbacks(void)
#else
PyMODINIT_FUNC PyInit_callbacks(void); /*proto*/
PyMODINIT_FUNC PyInit_callbacks(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_callbacks(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("callbacks", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_PDSim__core__callbacks) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "PDSim.core.callbacks")) {
      if (unlikely(PyDict_SetItemString(modules, "PDSim.core.callbacks", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5PDSim_4core_9callbacks_HeatTransferCallback = &__pyx_vtable_5PDSim_4core_9callbacks_HeatTransferCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_HeatTransferCallback.call = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *, double, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_20HeatTransferCallback_call;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_HeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "HeatTransferCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_HeatTransferCallback = &__pyx_type_5PDSim_4core_9callbacks_HeatTransferCallback;
  __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedHeatTransferCallback = &__pyx_vtable_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedHeatTransferCallback.__pyx_base = *__pyx_vtabptr_5PDSim_4core_9callbacks_HeatTransferCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedHeatTransferCallback.__pyx_base.call = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_9callbacks_HeatTransferCallback *, double, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_27WrappedHeatTransferCallback_call;
  __pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback.tp_base = __pyx_ptype_5PDSim_4core_9callbacks_HeatTransferCallback;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedHeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "WrappedHeatTransferCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_WrappedHeatTransferCallback = &__pyx_type_5PDSim_4core_9callbacks_WrappedHeatTransferCallback;
  __pyx_vtabptr_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback = &__pyx_vtable_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback.call = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_26LumpsEnergyBalanceCallback_call;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "LumpsEnergyBalanceCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback = &__pyx_type_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
  __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback = &__pyx_vtable_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback.__pyx_base = *__pyx_vtabptr_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback.__pyx_base.call = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_33WrappedLumpsEnergyBalanceCallback_call;
  __pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback.tp_base = __pyx_ptype_5PDSim_4core_9callbacks_LumpsEnergyBalanceCallback;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "WrappedLumpsEnergyBalanceCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback = &__pyx_type_5PDSim_4core_9callbacks_WrappedLumpsEnergyBalanceCallback;
  __pyx_vtabptr_5PDSim_4core_9callbacks_StepCallback = &__pyx_vtable_5PDSim_4core_9callbacks_StepCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_StepCallback.call = (double (*)(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *, double, double, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_12StepCallback_call;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_StepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_StepCallback.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_9callbacks_StepCallback, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback___init__.doc = __pyx_doc_5PDSim_4core_9callbacks_12StepCallback___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback___init__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_9callbacks_StepCallback, "__call__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback_4__call__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback_4__call__.doc = __pyx_doc_5PDSim_4core_9callbacks_12StepCallback_4__call__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_9callbacks_12StepCallback_4__call__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_StepCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_StepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "StepCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_StepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_StepCallback = &__pyx_type_5PDSim_4core_9callbacks_StepCallback;
  __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedStepCallback = &__pyx_vtable_5PDSim_4core_9callbacks_WrappedStepCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedStepCallback.__pyx_base = *__pyx_vtabptr_5PDSim_4core_9callbacks_StepCallback;
  __pyx_vtable_5PDSim_4core_9callbacks_WrappedStepCallback.__pyx_base.call = (double (*)(struct __pyx_obj_5PDSim_4core_9callbacks_StepCallback *, double, double, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_9callbacks_19WrappedStepCallback_call;
  __pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback.tp_base = __pyx_ptype_5PDSim_4core_9callbacks_StepCallback;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_9callbacks_19WrappedStepCallback___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_9callbacks_19WrappedStepCallback___init__.doc = __pyx_doc_5PDSim_4core_9callbacks_19WrappedStepCallback___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_9callbacks_19WrappedStepCallback___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback.tp_dict, __pyx_vtabptr_5PDSim_4core_9callbacks_WrappedStepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "WrappedStepCallback", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_WrappedStepCallback = &__pyx_type_5PDSim_4core_9callbacks_WrappedStepCallback;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_9callbacks_CallbackContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5PDSim_4core_9callbacks_CallbackContainer.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CallbackContainer", (PyObject *)&__pyx_type_5PDSim_4core_9callbacks_CallbackContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4core_9callbacks_CallbackContainer = &__pyx_type_5PDSim_4core_9callbacks_CallbackContainer;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = __Pyx_ImportType("PDSim.misc.datatypes", "AnnotatedValue", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_Collector = __Pyx_ImportType("PDSim.misc.datatypes", "Collector", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_Collector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4misc_9datatypes_Collector = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_Collector->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_listm = __Pyx_ImportType("PDSim.misc.datatypes", "listm", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_listm), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_listm)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5PDSim_4misc_9datatypes_arraym = __Pyx_ImportType("PDSim.misc.datatypes", "arraym", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym), 1); if (unlikely(!__pyx_ptype_5PDSim_4misc_9datatypes_arraym)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5PDSim_4misc_9datatypes_arraym = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_arraym->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "PDSim\core\callbacks.pyx":1
 * cdef class LumpsEnergyBalanceCallback(object):             # <<<<<<<<<<<<<<
 *     """
 *     A wrapper to contain the callback that is called to evaluate the lump energy
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim\misc\datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PDSim.core.callbacks", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PDSim.core.callbacks");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    return tstate->use_tracing && retval;
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
